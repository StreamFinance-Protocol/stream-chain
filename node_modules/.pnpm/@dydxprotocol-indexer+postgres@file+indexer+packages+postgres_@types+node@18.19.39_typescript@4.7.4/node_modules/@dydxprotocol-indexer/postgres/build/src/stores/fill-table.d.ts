/// <reference types="node" />
import Big from 'big.js';
import _ from 'lodash';
import { FillCreateObject, FillFromDatabase, FillQueryConfig, FillUpdateObject, Liquidity, Market24HourTradeVolumes, OpenSizeWithFundingIndex, Options, OrderedFillsWithFundingIndices, QueryableField } from '../types';
export declare function uuid(eventId: Buffer, liquidity: Liquidity): string;
export declare function findAll({ limit, id, subaccountId, side, liquidity, type, clobPairId, eventId, transactionHash, createdBeforeOrAtHeight, createdBeforeOrAt, createdOnOrAfterHeight, createdOnOrAfter, clientMetadata, fee, }: FillQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<FillFromDatabase[]>;
export declare function create(fillToCreate: FillCreateObject, options?: Options): Promise<FillFromDatabase>;
export declare function update({ ...fields }: FillUpdateObject, options?: Options): Promise<FillFromDatabase | undefined>;
export declare function findById(id: string, options?: Options): Promise<FillFromDatabase | undefined>;
export declare function get24HourInformation(perpetualMarketIds: string[]): Promise<_.Dictionary<Market24HourTradeVolumes>>;
/**
 * Returns the cost of all fills for a given subaccount up to a given height.
 *
 * If the subaccount has spent $500 to buy 1 ETH, cost of fills will be -500.
 * If the subaccount shorted 1 ETH at $500, cost of fills will be 500.
 *
 * @param subaccountId
 * @param createdAtHeight
 */
export declare function getCostOfFills(subaccountId: string, createdAtHeight: string): Promise<Big>;
/**
 * Returns the total value of all open positions for a given subaccount at a given height.
 *
 * @param subaccountId
 * @param createdAtHeight
 */
export declare function getTotalValueOfOpenPositions(subaccountId: string, createdAtHeight: string): Promise<Big>;
/**
 * Returns the ordered fills with funding indices for a given clob pair and subaccount
 * prior to a given height.
 *
 * Fills will be paired with the last fill that occurred before it, and contain the latest
 * funding index at the time of the fill.
 *
 * @param clobPairId
 * @param subaccountId
 * @param effectiveBeforeHeight
 */
export declare function getOrderedFillsWithFundingIndices(clobPairId: string, subaccountId: string, effectiveBeforeHeight: string): Promise<OrderedFillsWithFundingIndices[]>;
/**
 * Returns the paid funding for a given set of ordered fills with funding indices.
 *
 * @param orderedFillsWithFundingIndices
 */
export declare function getSettledFunding(orderedFillsWithFundingIndices: OrderedFillsWithFundingIndices[]): Big;
/**
 * Returns the open size with funding index for a given subaccount prior to a given height,
 * for each clob pair.
 *
 * This will be used to compute unsettled funding payments.
 *
 * @param subaccountId
 * @param effectiveBeforeHeight
 */
export declare function getOpenSizeWithFundingIndex(subaccountId: string, effectiveBeforeHeight: string): Promise<OpenSizeWithFundingIndex[]>;
/**
 * Returns the unique clob pair ids for a given subaccount's fills prior to a given height.
 *
 * @param subaccountId
 * @param effectiveBeforeOrAtHeight
 * @param options
 */
export declare function getClobPairs(subaccountId: string, effectiveBeforeOrAtHeight: string, options?: Options): Promise<string[]>;
/**
 * Returns the fees paid for a given subaccount prior to a given height.
 *
 * @param subaccountId
 * @param effectiveBeforeOrAtHeight
 * @param options
 */
export declare function getFeesPaid(subaccountId: string, effectiveBeforeOrAtHeight: string): Promise<Big>;
