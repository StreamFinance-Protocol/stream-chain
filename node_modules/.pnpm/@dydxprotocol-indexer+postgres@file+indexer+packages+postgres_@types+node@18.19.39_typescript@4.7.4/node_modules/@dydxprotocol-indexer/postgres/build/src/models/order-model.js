"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
const types_1 = require("../types");
const base_model_1 = __importDefault(require("./base-model"));
class OrderModel extends base_model_1.default {
    static get tableName() {
        return 'orders';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'subaccountId',
                'clientId',
                'clobPairId',
                'side',
                'size',
                'totalFilled',
                'price',
                'type',
                'status',
                'timeInForce',
                'reduceOnly',
                'orderFlags',
                'createdAtHeight',
                'clientMetadata',
                'triggerPrice',
                'updatedAt',
                'updatedAtHeight',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                subaccountId: { type: 'string', format: 'uuid' },
                clientId: { type: 'string', pattern: validators_1.IntegerPattern },
                clobPairId: { type: 'string', pattern: validators_1.IntegerPattern },
                side: { type: 'string', enum: [...Object.values(types_1.OrderSide)] },
                size: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                totalFilled: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                price: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                type: { type: 'string', enum: [...Object.values(types_1.OrderType)] },
                status: { type: 'string', enum: [...Object.values(types_1.OrderStatus)] },
                timeInForce: { type: 'string', enum: [...Object.values(types_1.TimeInForce)] },
                reduceOnly: { type: 'boolean' },
                orderFlags: { type: 'string', pattern: validators_1.IntegerPattern },
                goodTilBlock: { type: ['string', 'null'], default: null, pattern: validators_1.IntegerPattern },
                goodTilBlockTime: { type: ['string', 'null'], default: null, format: 'date-time' },
                createdAtHeight: { type: ['string', 'null'], default: null, pattern: validators_1.IntegerPattern },
                clientMetadata: { type: 'string', pattern: validators_1.IntegerPattern },
                triggerPrice: { type: ['string', 'null'], default: null, pattern: validators_1.NonNegativeNumericPattern },
                updatedAt: { type: 'string', format: 'date-time' },
                updatedAtHeight: { type: 'string', pattern: validators_1.IntegerPattern },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            subaccountId: 'string',
            clientId: 'string',
            clobPairId: 'string',
            side: 'string',
            size: 'string',
            totalFilled: 'string',
            price: 'string',
            type: 'string',
            status: 'string',
            timeInForce: 'string',
            reduceOnly: 'boolean',
            orderFlags: 'string',
            goodTilBlock: 'string',
            goodTilBlockTime: 'date-time',
            createdAtHeight: 'string',
            clientMetadata: 'string',
            triggerPrice: 'string',
            updatedAt: 'date-time',
            updatedAtHeight: 'string',
        };
    }
}
exports.default = OrderModel;
OrderModel.relationMappings = {
    subaccounts: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'subaccount-model'),
        join: {
            from: 'orders.subaccountId',
            to: 'subaccounts.id',
        },
    },
    fills: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'fill-model'),
        join: {
            from: 'orders.id',
            to: 'fills.orderId',
        },
    },
    blocks: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'block-model'),
        join: {
            from: 'orders.createdAtHeight',
            to: 'blocks.blockHeight',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL29yZGVyLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHlDQUFrQztBQUVsQyxrREFHMkI7QUFFM0Isb0NBTWtCO0FBQ2xCLDhEQUFxQztBQUVyQyxNQUFxQixVQUFXLFNBQVEsb0JBQVM7SUFDL0MsTUFBTSxLQUFLLFNBQVM7UUFDbEIsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVELE1BQU0sS0FBSyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQTZCRCxNQUFNLEtBQUssVUFBVTtRQUNuQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSTtnQkFDSixjQUFjO2dCQUNkLFVBQVU7Z0JBQ1YsWUFBWTtnQkFDWixNQUFNO2dCQUNOLE1BQU07Z0JBQ04sYUFBYTtnQkFDYixPQUFPO2dCQUNQLE1BQU07Z0JBQ04sUUFBUTtnQkFDUixhQUFhO2dCQUNiLFlBQVk7Z0JBQ1osWUFBWTtnQkFDWixpQkFBaUI7Z0JBQ2pCLGdCQUFnQjtnQkFDaEIsY0FBYztnQkFDZCxXQUFXO2dCQUNYLGlCQUFpQjthQUNsQjtZQUNELFVBQVUsRUFBRTtnQkFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ3RDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDaEQsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDckQsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDdkQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFF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