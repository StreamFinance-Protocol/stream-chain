// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/daemons/sdai/sdai.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AddsDAIEventsRequest is a request message that contains a new
// sDAI conversion rate.
type AddsDAIEventsRequest struct {
	ConversionRate string `protobuf:"bytes,1,opt,name=conversion_rate,json=conversionRate,proto3" json:"conversion_rate,omitempty"`
}

func (m *AddsDAIEventsRequest) Reset()         { *m = AddsDAIEventsRequest{} }
func (m *AddsDAIEventsRequest) String() string { return proto.CompactTextString(m) }
func (*AddsDAIEventsRequest) ProtoMessage()    {}
func (*AddsDAIEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2cc40a06f0f0d7, []int{0}
}
func (m *AddsDAIEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddsDAIEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddsDAIEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddsDAIEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddsDAIEventsRequest.Merge(m, src)
}
func (m *AddsDAIEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddsDAIEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddsDAIEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddsDAIEventsRequest proto.InternalMessageInfo

func (m *AddsDAIEventsRequest) GetConversionRate() string {
	if m != nil {
		return m.ConversionRate
	}
	return ""
}

// AddsDAIEventsResponse is a response message for AddsDAIEventsRequest.
type AddsDAIEventsResponse struct {
}

func (m *AddsDAIEventsResponse) Reset()         { *m = AddsDAIEventsResponse{} }
func (m *AddsDAIEventsResponse) String() string { return proto.CompactTextString(m) }
func (*AddsDAIEventsResponse) ProtoMessage()    {}
func (*AddsDAIEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f2cc40a06f0f0d7, []int{1}
}
func (m *AddsDAIEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddsDAIEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddsDAIEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddsDAIEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddsDAIEventsResponse.Merge(m, src)
}
func (m *AddsDAIEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddsDAIEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddsDAIEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddsDAIEventsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AddsDAIEventsRequest)(nil), "dydxprotocol.daemons.sdai.AddsDAIEventsRequest")
	proto.RegisterType((*AddsDAIEventsResponse)(nil), "dydxprotocol.daemons.sdai.AddsDAIEventsResponse")
}

func init() {
	proto.RegisterFile("dydxprotocol/daemons/sdai/sdai.proto", fileDescriptor_5f2cc40a06f0f0d7)
}

var fileDescriptor_5f2cc40a06f0f0d7 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x49, 0xa9, 0x4c, 0xa9,
	0x28, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x4f, 0x49, 0x4c, 0xcd, 0xcd, 0xcf, 0x2b,
	0xd6, 0x2f, 0x4e, 0x49, 0xcc, 0x04, 0x13, 0x7a, 0x60, 0x29, 0x21, 0x49, 0x64, 0x55, 0x7a, 0x50,
	0x55, 0x7a, 0x20, 0x05, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x29, 0x7d, 0x10, 0x0b, 0xa2,
	0x41, 0xc9, 0x9e, 0x4b, 0xc4, 0x31, 0x25, 0xa5, 0xd8, 0xc5, 0xd1, 0xd3, 0xb5, 0x2c, 0x35, 0xaf,
	0xa4, 0x38, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x9d, 0x8b, 0x3f, 0x39, 0x3f, 0xaf,
	0x2c, 0xb5, 0xa8, 0x38, 0x33, 0x3f, 0x2f, 0xbe, 0x28, 0xb1, 0x24, 0x55, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x33, 0x88, 0x0f, 0x21, 0x1c, 0x94, 0x58, 0x92, 0xaa, 0x24, 0xce, 0x25, 0x8a, 0x66, 0x40,
	0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x51, 0x23, 0x23, 0x17, 0x37, 0x48, 0x38, 0x38, 0xb5, 0xa8,
	0x2c, 0x33, 0x39, 0x55, 0xa8, 0x88, 0x8b, 0x17, 0x45, 0xa1, 0x90, 0xbe, 0x1e, 0x4e, 0xc7, 0xea,
	0x61, 0x73, 0x93, 0x94, 0x01, 0xf1, 0x1a, 0x20, 0x6e, 0x70, 0xca, 0x38, 0xf1, 0x48, 0x8e, 0xf1,
	0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e,
	0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xbf, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0xb7, 0xcc, 0xbc, 0xc4, 0xbc, 0xe4, 0x54, 0xdd,
	0x00, 0x58, 0x18, 0x17, 0x83, 0x85, 0x75, 0x93, 0x33, 0x12, 0x33, 0xf3, 0xf4, 0xb1, 0x86, 0x7c,
	0x7e, 0x51, 0x62, 0x72, 0x4e, 0xaa, 0x7e, 0x62, 0x41, 0x66, 0x12, 0x1b, 0x58, 0x81, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0xe3, 0x7c, 0x48, 0xa7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SDAIServiceClient is the client API for SDAIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SDAIServiceClient interface {
	// Sends a list of newly recognized sDAI events.
	AddsDAIEvents(ctx context.Context, in *AddsDAIEventsRequest, opts ...grpc.CallOption) (*AddsDAIEventsResponse, error)
}

type sDAIServiceClient struct {
	cc grpc1.ClientConn
}

func NewSDAIServiceClient(cc grpc1.ClientConn) SDAIServiceClient {
	return &sDAIServiceClient{cc}
}

func (c *sDAIServiceClient) AddsDAIEvents(ctx context.Context, in *AddsDAIEventsRequest, opts ...grpc.CallOption) (*AddsDAIEventsResponse, error) {
	out := new(AddsDAIEventsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.daemons.sdai.sDAIService/AddsDAIEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SDAIServiceServer is the server API for SDAIService service.
type SDAIServiceServer interface {
	// Sends a list of newly recognized sDAI events.
	AddsDAIEvents(context.Context, *AddsDAIEventsRequest) (*AddsDAIEventsResponse, error)
}

// UnimplementedSDAIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSDAIServiceServer struct {
}

func (*UnimplementedSDAIServiceServer) AddsDAIEvents(ctx context.Context, req *AddsDAIEventsRequest) (*AddsDAIEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddsDAIEvents not implemented")
}

func RegisterSDAIServiceServer(s grpc1.Server, srv SDAIServiceServer) {
	s.RegisterService(&_SDAIService_serviceDesc, srv)
}

func _SDAIService_AddsDAIEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddsDAIEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SDAIServiceServer).AddsDAIEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.daemons.sdai.sDAIService/AddsDAIEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SDAIServiceServer).AddsDAIEvents(ctx, req.(*AddsDAIEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SDAIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.daemons.sdai.sDAIService",
	HandlerType: (*SDAIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddsDAIEvents",
			Handler:    _SDAIService_AddsDAIEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/daemons/sdai/sdai.proto",
}

func (m *AddsDAIEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddsDAIEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddsDAIEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversionRate) > 0 {
		i -= len(m.ConversionRate)
		copy(dAtA[i:], m.ConversionRate)
		i = encodeVarintSdai(dAtA, i, uint64(len(m.ConversionRate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddsDAIEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddsDAIEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddsDAIEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintSdai(dAtA []byte, offset int, v uint64) int {
	offset -= sovSdai(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddsDAIEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversionRate)
	if l > 0 {
		n += 1 + l + sovSdai(uint64(l))
	}
	return n
}

func (m *AddsDAIEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSdai(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSdai(x uint64) (n int) {
	return sovSdai(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddsDAIEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddsDAIEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddsDAIEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSdai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSdai
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSdai
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSdai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddsDAIEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSdai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddsDAIEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddsDAIEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSdai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSdai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSdai(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSdai
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSdai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSdai
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSdai
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSdai
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSdai        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSdai          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSdai = fmt.Errorf("proto: unexpected end of group")
)
