import { IndexerOrder, IndexerOrderSDKType } from "../protocol/v1/clob";
import * as _m0 from "protobufjs/minimal";
import { DeepPartial } from "../../../helpers";
/** Enum for the ticker type, PERPETUAL or SPOT. */
export declare enum RedisOrder_TickerType {
    /**
     * TICKER_TYPE_UNSPECIFIED - Default value for the enum. Should never be used in an initialized
     * `RedisOrder`.
     */
    TICKER_TYPE_UNSPECIFIED = 0,
    /** TICKER_TYPE_PERPETUAL - Ticker is for a perpetual pair. */
    TICKER_TYPE_PERPETUAL = 1,
    /** TICKER_TYPE_SPOT - Ticker is for a spot pair. */
    TICKER_TYPE_SPOT = 2,
    UNRECOGNIZED = -1
}
export declare const RedisOrder_TickerTypeSDKType: typeof RedisOrder_TickerType;
export declare function redisOrder_TickerTypeFromJSON(object: any): RedisOrder_TickerType;
export declare function redisOrder_TickerTypeToJSON(object: RedisOrder_TickerType): string;
/**
 * RedisOrder is a proto for orders stored in Redis. This proto holds some
 * human-readable values such as price, size and ticker as well as the original
 * `Order` proto from the dYdX application.
 */
export interface RedisOrder {
    /** uuid of the Order generated by the Indexer based on the `OrderId`. */
    id: string;
    /** Order proto from the protocol. */
    order?: IndexerOrder;
    /** Ticker for the exchange pair for the order. */
    ticker: string;
    /** Type of the ticker, PERPETUAL or SPOT. */
    tickerType: RedisOrder_TickerType;
    /** Human-readable price of the order. */
    price: string;
    /** Human-readable size of the order. */
    size: string;
}
/**
 * RedisOrder is a proto for orders stored in Redis. This proto holds some
 * human-readable values such as price, size and ticker as well as the original
 * `Order` proto from the dYdX application.
 */
export interface RedisOrderSDKType {
    id: string;
    order?: IndexerOrderSDKType;
    ticker: string;
    ticker_type: RedisOrder_TickerType;
    price: string;
    size: string;
}
export declare const RedisOrder: {
    encode(message: RedisOrder, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RedisOrder;
    fromPartial(object: DeepPartial<RedisOrder>): RedisOrder;
};
