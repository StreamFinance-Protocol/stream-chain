"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateNormalizedCandleStartTime = exports.getTransferType = exports.getUnrealizedPnl = exports.getUnsettledFunding = exports.getMaintenanceMarginPpm = exports.ppmToString = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const big_js_1 = __importDefault(require("big.js"));
const luxon_1 = require("luxon");
const constants_1 = require("../constants");
const types_1 = require("../types");
/**
 * Converts a parts-per-million value to the string representation of the number. 1 ppm, or
 * parts-per-million is equal to 10^-6 (0.000001).
 * @param ppm Parts-per-million value.
 * @returns String representation of the parts-per-million value as a floating point number.
 */
function ppmToString(ppm) {
    return (0, big_js_1.default)(ppm).div(1000000).toFixed();
}
exports.ppmToString = ppmToString;
/**
 * Calculates maintenance margin based on initial margin and maintenance fraction.
 * maintenance margin = initial margin * maintenance fraction
 * @param initialMarginPpm Initial margin in parts-per-million.
 * @param maintenanceFractionPpm Maintenance fraction in parts-per-million.
 * @returns Maintenance margin in parts-per-million.
 */
function getMaintenanceMarginPpm(initialMarginPpm, maintenanceFractionPpm) {
    return (0, big_js_1.default)(initialMarginPpm).times(maintenanceFractionPpm).div(constants_1.ONE_MILLION).toNumber();
}
exports.getMaintenanceMarginPpm = getMaintenanceMarginPpm;
/**
 * Computes the unsettled funding for a position.
 *
 * To compute the net USDC balance for a subaccount, sum the result of this function for all
 * open perpetual positions, and add it to the latest USDC asset position for
 * this subaccount.
 *
 * When funding index is increasing, shorts get paid & unsettled funding for shorts should
 * be positive, vice versa for longs.
 * When funding index is decreasing, longs get paid & unsettled funding for longs should
 * be positive, vice versa for shorts.
 *
 * @param position
 * @param latestFundingIndex
 * @param lastUpdateFundingIndex
 */
function getUnsettledFunding(position, latestFundingIndexMap, lastUpdateFundingIndexMap) {
    return (0, big_js_1.default)(position.size).times(lastUpdateFundingIndexMap[position.perpetualId].minus(latestFundingIndexMap[position.perpetualId]));
}
exports.getUnsettledFunding = getUnsettledFunding;
/**
 * Get unrealized pnl for a perpetual position. If the perpetual market is not found in the
 * markets map or the oracle price is not found in the market, return 0.
 *
 * @param position Perpetual position object from the database, or the updated
 * perpetual position subaccountKafkaObject.
 * @param perpetualMarketsMap Map of perpetual ids to perpetual market objects from the database.
 * @returns Unrealized pnl of the position.
 */
function getUnrealizedPnl(position, perpetualMarket, marketsMap) {
    if (marketsMap[perpetualMarket.marketId] === undefined) {
        base_1.logger.error({
            at: 'getUnrealizedPnl',
            message: 'Market is undefined',
            marketId: perpetualMarket.marketId,
        });
        return (0, big_js_1.default)(0).toFixed();
    }
    if (marketsMap[perpetualMarket.marketId].oraclePrice === undefined) {
        base_1.logger.error({
            at: 'getUnrealizedPnl',
            message: 'Oracle price is undefined for market',
            marketId: perpetualMarket.marketId,
        });
        return (0, big_js_1.default)(0).toFixed();
    }
    return ((0, big_js_1.default)(position.size).times((0, big_js_1.default)(marketsMap[perpetualMarket.marketId].oraclePrice).minus(position.entryPrice))).toFixed();
}
exports.getUnrealizedPnl = getUnrealizedPnl;
/**
 * Gets the transfer type for a subaccount.
 *
 * If sender/recipient are both subaccounts, then it is a transfer_in/transfer_out.
 * If sender/recipient are wallet addresses, then it is a deposit/withdrawal.
 *
 * @param transfer
 * @param subaccountId
 */
function getTransferType(transfer, subaccountId) {
    if (transfer.senderSubaccountId === subaccountId) {
        if (transfer.recipientSubaccountId) {
            return types_1.TransferType.TRANSFER_OUT;
        }
        else {
            return types_1.TransferType.WITHDRAWAL;
        }
    }
    else if (transfer.recipientSubaccountId === subaccountId) {
        if (transfer.senderSubaccountId) {
            return types_1.TransferType.TRANSFER_IN;
        }
        else {
            return types_1.TransferType.DEPOSIT;
        }
    }
    throw new Error(`Transfer ${transfer.id} does not involve subaccount ${subaccountId}`);
}
exports.getTransferType = getTransferType;
function calculateNormalizedCandleStartTime(time, resolution) {
    const epochSeconds = Math.floor(time.toUTC().toSeconds());
    const normalizedTimeSeconds = epochSeconds - (epochSeconds % constants_1.NUM_SECONDS_IN_CANDLE_RESOLUTIONS[resolution]);
    return luxon_1.DateTime.fromSeconds(normalizedTimeSeconds).toUTC();
}
exports.calculateNormalizedCandleStartTime = calculateNormalizedCandleStartTime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYi9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFvRDtBQUNwRCxvREFBeUI7QUFDekIsaUNBQWlDO0FBRWpDLDRDQUE4RTtBQUM5RSxvQ0FTa0I7QUFFbEI7Ozs7O0dBS0c7QUFDSCxTQUFnQixXQUFXLENBQUMsR0FBVztJQUNyQyxPQUFPLElBQUEsZ0JBQUcsRUFBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0MsQ0FBQztBQUZELGtDQUVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQ3JDLGdCQUF3QixFQUN4QixzQkFBOEI7SUFFOUIsT0FBTyxJQUFBLGdCQUFHLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxHQUFHLENBQUMsdUJBQVcsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3pGLENBQUM7QUFMRCwwREFLQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQWdCLG1CQUFtQixDQUNqQyxRQUF1QyxFQUN2QyxxQkFBc0MsRUFDdEMseUJBQTBDO0lBRTFDLE9BQU8sSUFBQSxnQkFBRyxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQzdCLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQ25ELHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FDNUMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVZELGtEQVVDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FDOUIsUUFBdUYsRUFDdkYsZUFBNEMsRUFDNUMsVUFBc0I7SUFFdEIsSUFBSSxVQUFVLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsRUFBRTtRQUN0RCxhQUFNLENBQUMsS0FBSyxDQUFDO1lBQ1gsRUFBRSxFQUFFLGtCQUFrQjtZQUN0QixPQUFPLEVBQUUscUJBQXFCO1lBQzlCLFFBQVEsRUFBRSxlQUFlLENBQUMsUUFBUTtTQUNuQyxDQUFDLENBQUM7UUFDSCxPQUFPLElBQUEsZ0JBQUcsRUFBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUN6QjtJQUNELElBQUksVUFBVSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEtBQUssU0FBUyxFQUFFO1FBQ2xFLGFBQU0sQ0FBQyxLQUFLLENBQUM7WUFDWCxFQUFFLEVBQUUsa0JBQWtCO1lBQ3RCLE9BQU8sRUFBRSxzQ0FBc0M7WUFDL0MsUUFBUSxFQUFFLGVBQWUsQ0FBQyxRQUFRO1NBQ25DLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBQSxnQkFBRyxFQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxDQUNMLElBQUEsZ0JBQUcsRUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUN0QixJQUFBLGdCQUFHLEVBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUNsRixDQUNGLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDZCxDQUFDO0FBMUJELDRDQTBCQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsU0FBZ0IsZUFBZSxDQUM3QixRQUE4QixFQUM5QixZQUFvQjtJQUVwQixJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsS0FBSyxZQUFZLEVBQUU7UUFDaEQsSUFBSSxRQUFRLENBQUMscUJBQXFCLEVBQUU7WUFDbEMsT0FBTyxvQkFBWSxDQUFDLFlBQVksQ0FBQztTQUNsQzthQUFNO1lBQ0wsT0FBTyxvQkFBWSxDQUFDLFVBQVUsQ0FBQztTQUNoQztLQUNGO1NBQU0sSUFBSSxRQUFRLENBQUMscUJBQXFCLEtBQUssWUFBWSxFQUFFO1FBQzFELElBQUksUUFBUSxDQUFDLGtCQUFrQixFQUFFO1lBQy9CLE9BQU8sb0JBQVksQ0FBQyxXQUFXLENBQUM7U0FDakM7YUFBTTtZQUNMLE9BQU8sb0JBQVksQ0FBQyxPQUFPLENBQUM7U0FDN0I7S0FDRjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxRQUFRLENBQUMsRUFBRSxnQ0FBZ0MsWUFBWSxFQUFFLENBQUMsQ0FBQztBQUN6RixDQUFDO0FBbEJELDBDQWtCQztBQUVELFNBQWdCLGtDQUFrQyxDQUNoRCxJQUFjLEVBQ2QsVUFBNEI7SUFFNUIsTUFBTSxZQUFZLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNsRSxNQUFNLHFCQUFxQixHQUFXLFlBQVksR0FBRyxDQUNuRCxZQUFZLEdBQUcsNkNBQWlDLENBQUMsVUFBVSxDQUFDLENBQzdELENBQUM7SUFFRixPQUFPLGdCQUFRLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDN0QsQ0FBQztBQVZELGdGQVVDIn0=