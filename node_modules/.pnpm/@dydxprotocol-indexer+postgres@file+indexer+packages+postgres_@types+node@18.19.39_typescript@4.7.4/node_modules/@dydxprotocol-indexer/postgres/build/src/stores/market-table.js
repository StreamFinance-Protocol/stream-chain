"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarketsMap = exports.findByPair = exports.findById = exports.update = exports.create = exports.findAll = void 0;
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const market_model_1 = __importDefault(require("../models/market-model"));
const types_1 = require("../types");
async function findAll({ limit, id, pair, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        pair,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(market_model_1.default, options);
    if (id) {
        baseQuery = baseQuery.whereIn(types_1.MarketColumns.id, id);
    }
    if (pair) {
        baseQuery = baseQuery.whereIn(types_1.MarketColumns.pair, pair);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.MarketColumns.id, types_1.Ordering.ASC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(MarketToCreate, options = { txId: undefined }) {
    return market_model_1.default.query(transaction_1.default.get(options.txId)).insert(MarketToCreate).returning('*');
}
exports.create = create;
async function update({ id, ...fields }, options = { txId: undefined }) {
    const market = await market_model_1.default.query(transaction_1.default.get(options.txId)).findById(id);
    const updatedMarket = await market
        .$query(transaction_1.default.get(options.txId))
        .patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of markets.
    return updatedMarket;
}
exports.update = update;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(market_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findByPair(pair, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(market_model_1.default, options);
    const markets = await baseQuery
        .where(types_1.MarketColumns.pair, pair)
        .returning('*');
    if (markets.length === 0) {
        return undefined;
    }
    return markets[0];
}
exports.findByPair = findByPair;
async function getMarketsMap(options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const markets = await findAll({}, [], options);
    return lodash_1.default.keyBy(markets, types_1.MarketColumns.id);
}
exports.getMarketsMap = getMarketsMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0LXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9tYXJrZXQtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQXVCO0FBR3ZCLDRDQUF3RDtBQUN4RCw4REFBb0Y7QUFDcEYseUVBQWlEO0FBQ2pELDBFQUFpRDtBQUNqRCxvQ0FXa0I7QUFFWCxLQUFLLFVBQVUsT0FBTyxDQUMzQixFQUNFLEtBQUssRUFDTCxFQUFFLEVBQ0YsSUFBSSxHQUNjLEVBQ3BCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEVBQUU7UUFDRixJQUFJO0tBQ1UsRUFDaEIsY0FBYyxDQUNmLENBQUM7SUFFRixJQUFJLFNBQVMsR0FBOEIsSUFBQSwrQkFBYyxFQUN2RCxzQkFBVyxFQUNYLE9BQU8sQ0FDUixDQUFDO0lBRUYsSUFBSSxFQUFFLEVBQUU7UUFDTixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxxQkFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNyRDtJQUVELElBQUksSUFBSSxFQUFFO1FBQ1IsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMscUJBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDekQ7SUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ2pDLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzdDLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQixNQUFNLEVBQ04sS0FBSyxDQUNOLENBQUM7U0FDSDtLQUNGO1NBQU07UUFDTCxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FDM0IscUJBQWEsQ0FBQyxFQUFFLEVBQ2hCLGdCQUFRLENBQUMsR0FBRyxDQUNiLENBQUM7S0FDSDtJQUVELElBQUksS0FBSyxFQUFFO1FBQ1QsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQWpERCwwQkFpREM7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQixjQUFrQyxFQUNsQyxVQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7SUFFdEMsT0FBTyxzQkFBVyxDQUFDLEtBQUssQ0FDdEIscUJBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUM5QixDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQVBELHdCQU9DO0FBRU0sS0FBSyxVQUFVLE1BQU0sQ0FDMUIsRUFDRSxFQUFFLEVBQ0YsR0FBRyxNQUFNLEVBQ1UsRUFDckIsVUFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0lBRXRDLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQVcsQ0FBQyxLQUFLLENBQ3BDLHFCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FHOUIsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDZixNQUFNLGFBQWEsR0FBRyxNQUFNLE1BQU07U0FDL0IsTUFBTSxDQUFDLHFCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQyxLQUFLLENBQUMsTUFBeUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRSw4RUFBOEU7SUFDOUUsT0FBTyxhQUE0RCxDQUFDO0FBQ3RFLENBQUM7QUFqQkQsd0JBaUJDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FDNUIsRUFBVSxFQUNWLFVBQW1CLG9DQUF3QjtJQUUzQyxNQUFNLFNBQVMsR0FBOEIsSUFBQSwrQkFBYyxFQUN6RCxzQkFBVyxFQUNYLE9BQU8sQ0FDUixDQUFDO0lBQ0YsT0FBTyxTQUFTO1NBQ2IsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUNaLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBWEQsNEJBV0M7QUFFTSxLQUFLLFVBQVUsVUFBVSxDQUM5QixJQUFZLEVBQ1osVUFBbUIsb0NBQXdCO0lBRTNDLE1BQU0sU0FBUyxHQUE4QixJQUFBLCtCQUFjLEVBQ3pELHNCQUFXLEVBQ1gsT0FBTyxDQUNSLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBeUIsTUFBTSxTQUFTO1NBQ2xELEtBQUssQ0FBQyxxQkFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUM7U0FDL0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWxCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDeEIsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBakJELGdDQWlCQztBQUVNLEtBQUssVUFBVSxhQUFhLENBQ2pDLFVBQW1CLG9DQUF3QjtJQUUzQyxNQUFNLE9BQU8sR0FBeUIsTUFBTSxPQUFPLENBQ2pELEVBQUUsRUFDRixFQUFFLEVBQ0YsT0FBTyxDQUNSLENBQUM7SUFDRixPQUFPLGdCQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxxQkFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFURCxzQ0FTQyJ9