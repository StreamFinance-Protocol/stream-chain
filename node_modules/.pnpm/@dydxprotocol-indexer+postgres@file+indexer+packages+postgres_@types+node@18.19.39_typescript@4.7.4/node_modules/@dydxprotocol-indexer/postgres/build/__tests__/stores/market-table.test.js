"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MarketTable = __importStar(require("../../src/stores/market-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const objection_1 = require("objection");
const constants_1 = require("../helpers/constants");
const transaction_1 = __importDefault(require("../../src/helpers/transaction"));
describe('Market store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
        jest.resetAllMocks();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
        jest.clearAllMocks();
    });
    it('Successfully creates a market', async () => {
        await MarketTable.create(constants_1.defaultMarket);
    });
    it('Fails to create second market with the same ID', async () => {
        try {
            await Promise.all([
                MarketTable.create(constants_1.defaultMarket),
                MarketTable.create(constants_1.defaultMarket),
            ]);
        }
        catch (e) {
            expect(e).toBeInstanceOf(objection_1.UniqueViolationError);
        }
    });
    it('Successfully finds all Markets', async () => {
        await Promise.all([
            MarketTable.create(constants_1.defaultMarket),
            MarketTable.create(constants_1.defaultMarket2),
        ]);
        const markets = await MarketTable.findAll({}, [], { readReplica: true });
        expect(markets.length).toEqual(2);
        expect(markets[0]).toEqual(expect.objectContaining(constants_1.defaultMarket));
        expect(markets[1]).toEqual(expect.objectContaining(constants_1.defaultMarket2));
    });
    it('Successfully finds market with pair', async () => {
        await Promise.all([
            MarketTable.create(constants_1.defaultMarket),
            MarketTable.create(constants_1.defaultMarket2),
        ]);
        const market = await MarketTable.findByPair(constants_1.defaultMarket.pair, {});
        expect(market).toEqual(expect.objectContaining(constants_1.defaultMarket));
    });
    it('Successfully finds a market', async () => {
        await MarketTable.create(constants_1.defaultMarket);
        const market = await MarketTable.findById(constants_1.defaultMarket.id);
        expect(market).toEqual(expect.objectContaining(constants_1.defaultMarket));
    });
    it('Unable to find a market', async () => {
        const market = await MarketTable.findById(constants_1.defaultMarket.id);
        expect(market).toEqual(undefined);
    });
    it('Successfully updates a market', async () => {
        await MarketTable.create(constants_1.defaultMarket);
        const market = await MarketTable.update({
            id: constants_1.defaultMarket.id,
            minPriceChangePpm: 100,
        });
        expect(market).toEqual(expect.objectContaining({
            ...constants_1.defaultMarket,
            minPriceChangePpm: 100,
        }));
    });
    it('Successfully updates a market created in the same transaction', async () => {
        const txId = await transaction_1.default.start();
        await MarketTable.create(constants_1.defaultMarket, { txId });
        const market = await MarketTable.update({
            id: constants_1.defaultMarket.id,
            minPriceChangePpm: 100,
        }, {
            txId,
        });
        expect(market).toEqual(expect.objectContaining({
            ...constants_1.defaultMarket,
            minPriceChangePpm: 100,
        }));
        await transaction_1.default.commit(txId);
    });
    it('Fails to update market to have same pair as existing market', async () => {
        try {
            await MarketTable.create(constants_1.defaultMarket);
            await MarketTable.create({
                id: 1, pair: 'ETH-USD', exponent: -5, minPriceChangePpm: 100,
            });
            await MarketTable.update({
                id: constants_1.defaultMarket.id,
                pair: 'ETH-USD',
            });
        }
        catch (e) {
            expect(e).toBeInstanceOf(objection_1.UniqueViolationError);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0LXRhYmxlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc3RvcmVzL21hcmtldC10YWJsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSwyRUFBNkQ7QUFDN0QsNkRBSXNDO0FBQ3RDLHlDQUFpRDtBQUNqRCxvREFBcUU7QUFDckUsZ0ZBQXdEO0FBRXhELFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxFQUFFO0lBQzVCLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsb0JBQU8sR0FBRSxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxzQkFBUyxHQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sSUFBQSxxQkFBUSxHQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtCQUErQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzdDLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyx5QkFBYSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDOUQsSUFBSTtZQUNGLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztnQkFDaEIsV0FBVyxDQUFDLE1BQU0sQ0FBQyx5QkFBYSxDQUFDO2dCQUNqQyxXQUFXLENBQUMsTUFBTSxDQUFDLHlCQUFhLENBQUM7YUFDbEMsQ0FBQyxDQUFDO1NBQ0o7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWLE1B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