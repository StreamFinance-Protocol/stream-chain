import { Options, PerpetualMarketFromDatabase, PerpetualMarketsMap } from '../types';
/**
 * Refresh loop to cache the list of all perpetual markets from the database in-memory.
 */
export declare function start(): Promise<void>;
/**
 * Clears the in-memory map of perpetual market clob pair ids to tickers and tickers to clob pair.
 * Used for testing.
 */
export declare function clear(): void;
/**
 * Updates in-memory map of perpetual market clob pair ids to tickers and tickers to clob pair ids.
 */
export declare function updatePerpetualMarkets(options?: Options): Promise<void>;
/**
 * Validates a ticker references a perpetual market.
 * @param ticker Ticker to validate.
 * @returns true if ticker matches a perpetual market ticker, false otherwise.
 */
export declare function isValidPerpetualMarketTicker(ticker: string): boolean;
export declare function getPerpetualMarketsList(): PerpetualMarketFromDatabase[];
/**
 * Gets the clob pair id for a given perpetual market ticker.
 * @param ticker Ticker for the perpetual market.
 * @returns Clob pair id to get perpetual market with the ticker, if no perpetual market exists
 * with the given clob pair id, undefined is returned.
 */
export declare function getClobPairIdFromTicker(ticker: string): string | undefined;
/**
 * Gets the perpetual market ticker given a clob pair id.
 * @param clobPairId Clob pair id to get perpetual market for.
 * @returns Ticker for the perpetual market with the clob pair id, if no perpetual market exists
 * with the given clob pair id, undefined is returned.
 */
export declare function getPerpetualMarketTicker(clobPairId: string): string | undefined;
/**
 * Gets the perpetual market for a given ticker.
 */
export declare function getPerpetualMarketFromTicker(ticker: string): PerpetualMarketFromDatabase | undefined;
/**
 * Gets the perpetual market for a given clob pair id.
 */
export declare function getPerpetualMarketFromClobPairId(clobPairId: string): PerpetualMarketFromDatabase | undefined;
/**
 * Gets the perpetual market for a given id.
 */
export declare function getPerpetualMarketFromId(id: string): PerpetualMarketFromDatabase | undefined;
export declare function getClobPairIdToPerpetualMarket(): Record<string, PerpetualMarketFromDatabase>;
export declare function getTickerToPerpetualMarketForTest(): Record<string, PerpetualMarketFromDatabase>;
export declare function getPerpetualMarketsMap(): PerpetualMarketsMap;
/**
 * Add or updates a perpetual market instance in the in memory cache
 */
export declare function upsertPerpetualMarket(perpetualMarket: PerpetualMarketFromDatabase): void;
