"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
const types_1 = require("../types");
class PerpetualPositionModel extends objection_1.Model {
    static get tableName() {
        return 'perpetual_positions';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'subaccountId',
                'perpetualId',
                'side',
                'status',
                'size',
                'maxSize',
                'entryPrice',
                'sumOpen',
                'createdAt',
                'createdAtHeight',
                'openEventId',
                'lastEventId',
                'settledFunding',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                subaccountId: { type: 'string', format: 'uuid' },
                perpetualId: { type: 'string', pattern: validators_1.IntegerPattern },
                side: { type: 'string', enum: [...Object.values(types_1.PositionSide)] },
                status: { type: 'string', enum: [...Object.values(types_1.PerpetualPositionStatus)] },
                size: { type: 'string', pattern: validators_1.NumericPattern },
                maxSize: { type: 'string', pattern: validators_1.NumericPattern },
                entryPrice: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                exitPrice: { type: ['string', 'null'], pattern: validators_1.NonNegativeNumericPattern, default: null },
                sumOpen: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                sumClose: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                createdAt: { type: 'string', format: 'date-time' },
                closedAt: { type: ['string', 'null'], format: 'date-time', default: null },
                createdAtHeight: { type: 'string', pattern: validators_1.IntegerPattern },
                closedAtHeight: { type: ['string', 'null'], default: null, pattern: validators_1.IntegerPattern },
                settledFunding: { type: 'string', pattern: validators_1.NumericPattern },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            subaccountId: 'string',
            perpetualId: 'string',
            side: 'string',
            status: 'string',
            size: 'string',
            maxSize: 'string',
            entryPrice: 'string',
            exitPrice: 'string',
            sumOpen: 'string',
            sumClose: 'string',
            createdAt: 'date-time',
            closedAt: 'date-time',
            createdAtHeight: 'string',
            closedAtHeight: 'string',
            openEventId: 'hex-string',
            closeEventId: 'hex-string',
            lastEventId: 'hex-string',
            settledFunding: 'string',
        };
    }
}
exports.default = PerpetualPositionModel;
PerpetualPositionModel.relationMappings = {
    subaccount: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'subaccount-model'),
        join: {
            from: 'perpetual_positions.subaccountId',
            to: 'subaccounts.id',
        },
    },
    perpetualMarket: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'perpetual-market-model'),
        join: {
            from: 'perpetual_positions.perpetualId',
            to: 'perpetual_markets.id',
        },
    },
    openTendermintEvent: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'perpetual_positions.openEventId',
            to: 'tendermint_events.id',
        },
    },
    closeTendermintEvent: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'perpetual_positions.closeEventId',
            to: 'tendermint_events.id',
        },
    },
    lastTendermintEvent: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'perpetual_positions.lastEventId',
            to: 'tendermint_events.id',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLXBvc2l0aW9uLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9wZXJwZXR1YWwtcG9zaXRpb24tbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFFeEIseUNBQWtDO0FBRWxDLGtEQUkyQjtBQUMzQixvQ0FBNEU7QUFFNUUsTUFBcUIsc0JBQXVCLFNBQVEsaUJBQUs7SUFDdkQsTUFBTSxLQUFLLFNBQVM7UUFDbEIsT0FBTyxxQkFBcUIsQ0FBQztJQUMvQixDQUFDO0lBRUQsTUFBTSxLQUFLLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBNkNELE1BQU0sS0FBSyxVQUFVO1FBQ25CLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtZQUNkLFFBQVEsRUFBRTtnQkFDUixJQUFJO2dCQUNKLGNBQWM7Z0JBQ2QsYUFBYTtnQkFDYixNQUFNO2dCQUNOLFFBQVE7Z0JBQ1IsTUFBTTtnQkFDTixTQUFTO2dCQUNULFlBQVk7Z0JBQ1osU0FBUztnQkFDVCxXQUFXO2dCQUNYLGlCQUFpQjtnQkFDakIsYUFBYTtnQkFDYixhQUFhO2dCQUNiLGdCQUFnQjthQUNqQjtZQUNELFVBQVUsRUFBRTtnQkFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ3RDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDaEQsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDeEQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQVksQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLCtCQUF1QixDQUFDLENBQUMsRUFBRTtnQkFDN0UsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDakQsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDcEQsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7Z0JBQ2xFLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtnQkFDMUYsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7Z0JBQy9ELFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLHNDQUF5QixFQUFFO2dCQUNoRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUU7Z0JBQ2xELFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7Z0JBQzFFLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLDJCQUFjLEVBQUU7Z0JBQzVELGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUNwRixjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2FBQzVEO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxvQkFBb0I7UUFDN0IsT0FBTztZQUNMLEVBQUUsRUFBRSxRQUFRO1lBQ1osWUFBWSxFQUFFLFFBQVE7WUFDdEIsV0FBVyxFQUFFLFFBQVE7WUFDckIsSUFBSSxFQUFFLFFBQVE7WUFDZCxNQUFNLEVBQUUsUUFBUTtZQUNoQixJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxRQUFRO1lBQ25CLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFNBQVMsRUFBRSxXQUFXO1lBQ3RCLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLGVBQWUsRUFBRSxRQUFRO1lBQ3pCLGNBQWMsRUFBRSxRQUFRO1lBQ3hCLFdBQVcsRUFBRSxZQUFZO1lBQ3pCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFdBQVcsRUFBRSxZQUFZO1lBQ3pCLGNBQWMsRUFBRSxRQUFRO1NBQ3pCLENBQUM7SUFDSixDQUFDOztBQXhISCx5Q0ErSkM7QUF0SlEsdUNBQWdCLEdBQUc7SUFDeEIsVUFBVSxFQUFFO1FBQ1YsUUFBUSxFQUFFLGlCQUFLLENBQUMsb0JBQW9CO1FBQ3BDLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxrQkFBa0IsQ0FBQztRQUNwRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsa0NBQWtDO1lBQ3hDLEVBQUUsRUFBRSxnQkFBZ0I7U0FDckI7S0FDRjtJQUNELGVBQWUsRUFBRTtRQUNmLFFBQVEsRUFBRSxpQkFBSyxDQUFDLG9CQUFvQjtRQUNwQyxVQUFVLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUM7UUFDMUQsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLGlDQUFpQztZQUN2QyxFQUFFLEVBQUUsc0JBQXNCO1NBQzNCO0tBQ0Y7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQixRQUFRLEVBQUUsaUJBQUssQ0FBQyxvQkFBb0I7UUFDcEMsVUFBVSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHdCQUF3QixDQUFDO1FBQzFELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxpQ0FBaUM7WUFDdkMsRUFBRSxFQUFFLHNCQUFzQjtTQUMzQjtLQUNGO0lBQ0Qsb0JBQW9CLEVBQUU7UUFDcEIsUUFBUSxFQUFFLGlCQUFLLENBQUMsb0JBQW9CO1FBQ3BDLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQztRQUMxRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsa0NBQWtDO1lBQ3hDLEVBQUUsRUFBRSxzQkFBc0I7U0FDM0I7S0FDRjtJQUNELG1CQUFtQixFQUFFO1FBQ25CLFFBQVEsRUFBRSxpQkFBSyxDQUFDLG9CQUFvQjtRQUNwQyxVQUFVLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUM7UUFDMUQsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLGlDQUFpQztZQUN2QyxFQUFFLEVBQUUsc0JBQXNCO1NBQzNCO0tBQ0Y7Q0FDRixDQUFDIn0=