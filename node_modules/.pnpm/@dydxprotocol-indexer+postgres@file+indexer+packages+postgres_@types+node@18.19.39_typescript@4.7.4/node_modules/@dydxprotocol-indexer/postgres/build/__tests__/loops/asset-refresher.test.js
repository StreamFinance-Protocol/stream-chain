"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const db_helpers_1 = require("../../src/helpers/db-helpers");
const asset_refresher_1 = require("../../src/loops/asset-refresher");
const constants_1 = require("../helpers/constants");
const mock_generators_1 = require("../helpers/mock-generators");
describe('assetRefresher', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
        await (0, mock_generators_1.seedData)();
        await (0, asset_refresher_1.updateAssets)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.clearData)();
        await (0, db_helpers_1.teardown)();
    });
    describe('getAssetFromId', () => {
        it.each([
            [constants_1.defaultAsset],
            [constants_1.defaultAsset2],
            [constants_1.defaultAsset3],
        ])('successfully get an asset from id', (asset) => {
            expect((0, asset_refresher_1.getAssetFromId)(asset.id)).toEqual(expect.objectContaining(asset));
        });
        it('returns undefined if asset does not exist', () => {
            expect(() => (0, asset_refresher_1.getAssetFromId)('invalid')).toThrowError('Unable to find asset with assetId: invalid');
        });
    });
    describe('addAsset', () => {
        it('fails to add asset with duplicate id', () => {
            expect(() => {
                (0, asset_refresher_1.addAsset)(constants_1.defaultAsset);
            }).toThrow(`Asset with id ${constants_1.defaultAsset.id} already exists`);
        });
        it('successfully adds asset', () => {
            (0, asset_refresher_1.addAsset)({
                ...constants_1.defaultAsset,
                id: '5',
            });
            expect((0, asset_refresher_1.getAssetsMap)()['5']).not.toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcmVmcmVzaGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vbG9vcHMvYXNzZXQtcmVmcmVzaGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2REFBNEU7QUFDNUUscUVBRXlDO0FBQ3pDLG9EQUFrRjtBQUNsRixnRUFBc0Q7QUFFdEQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLG9CQUFPLEdBQUUsQ0FBQztRQUNoQixNQUFNLElBQUEsMEJBQVEsR0FBRSxDQUFDO1FBQ2pCLE1BQU0sSUFBQSw4QkFBWSxHQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxJQUFBLHNCQUFTLEdBQUUsQ0FBQztRQUNsQixNQUFNLElBQUEscUJBQVEsR0FBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtRQUM5QixFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ04sQ0FBQyx3QkFBWSxDQUFDO1lBQ2QsQ0FBQyx5QkFBYSxDQUFDO1lBQ2YsQ0FBQyx5QkFBYSxDQUFDO1NBQ2hCLENBQUMsQ0FBQyxtQ0FBbUMsRUFBRSxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUNuRSxNQUFNLENBQUMsSUFBQSxnQ0FBYyxFQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMzRSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxHQUFHLEVBQUU7WUFDbkQsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsZ0NBQWMsRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQ3JHLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1lBQzlDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7Z0JBQ1YsSUFBQSwwQkFBUSxFQUFDLHdCQUFZLENBQUMsQ0FBQztZQUN6QixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLHdCQUFZLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtZQUNqQyxJQUFBLDBCQUFRLEVBQUM7Z0JBQ1AsR0FBRyx3QkFBWTtnQkFDZixFQUFFLEVBQUUsR0FBRzthQUNSLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxJQUFBLDhCQUFZLEdBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==