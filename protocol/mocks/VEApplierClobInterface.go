// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	aggregator "github.com/StreamFinance-Protocol/stream-chain/protocol/app/ve/aggregator"
	abcitypes "github.com/cometbft/cometbft/abci/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"

	vecache "github.com/StreamFinance-Protocol/stream-chain/protocol/caches/vecache"

	voteweighted "github.com/StreamFinance-Protocol/stream-chain/protocol/app/ve/math"
)

// VEApplierClobInterface is an autogenerated mock type for the VEApplierClobInterface type
type VEApplierClobInterface struct {
	mock.Mock
}

// CacheSeenExtendedVotes provides a mock function with given fields: ctx, req
func (_m *VEApplierClobInterface) CacheSeenExtendedVotes(ctx types.Context, req *abcitypes.RequestCommit) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CacheSeenExtendedVotes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *abcitypes.RequestCommit) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVECache provides a mock function with given fields:
func (_m *VEApplierClobInterface) GetVECache() *vecache.VeCache {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetVECache")
	}

	var r0 *vecache.VeCache
	if rf, ok := ret.Get(0).(func() *vecache.VeCache); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vecache.VeCache)
		}
	}

	return r0
}

// VoteAggregator provides a mock function with given fields:
func (_m *VEApplierClobInterface) VoteAggregator() aggregator.VoteAggregator {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for VoteAggregator")
	}

	var r0 aggregator.VoteAggregator
	if rf, ok := ret.Get(0).(func() aggregator.VoteAggregator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(aggregator.VoteAggregator)
		}
	}

	return r0
}

// WritePricesToStoreAndMaybeCache provides a mock function with given fields: ctx, prices, round, writeToCache
func (_m *VEApplierClobInterface) WritePricesToStoreAndMaybeCache(ctx types.Context, prices map[string]voteweighted.AggregatorPricePair, round int32, writeToCache bool) error {
	ret := _m.Called(ctx, prices, round, writeToCache)

	if len(ret) == 0 {
		panic("no return value specified for WritePricesToStoreAndMaybeCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, map[string]voteweighted.AggregatorPricePair, int32, bool) error); ok {
		r0 = rf(ctx, prices, round, writeToCache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteSDaiConversionRateToStoreAndMaybeCache provides a mock function with given fields: ctx, sDaiConversionRate, round, writeToCache
func (_m *VEApplierClobInterface) WriteSDaiConversionRateToStoreAndMaybeCache(ctx types.Context, sDaiConversionRate *big.Int, round int32, writeToCache bool) error {
	ret := _m.Called(ctx, sDaiConversionRate, round, writeToCache)

	if len(ret) == 0 {
		panic("no return value specified for WriteSDaiConversionRateToStoreAndMaybeCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *big.Int, int32, bool) error); ok {
		r0 = rf(ctx, sDaiConversionRate, round, writeToCache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVEApplierClobInterface creates a new instance of VEApplierClobInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVEApplierClobInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *VEApplierClobInterface {
	mock := &VEApplierClobInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
