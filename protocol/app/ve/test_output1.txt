=== RUN   TestExtendVoteHandler
=== RUN   TestExtendVoteHandler/nil_request_returns_error
=== RUN   TestExtendVoteHandler/price_daemon_returns_no_prices
    buffer.go:261: vote_extensions.go:74: [90m<nil>[0m [31mERR[0m [1mrecovered from panic in ExtendVoteHandler[0m [36merr=[0m"\n\nmock: Unexpected Method Call\n-----------------------------\n\nApplyPricesFromVE(types.Context,*types.RequestFinalizeBlock,bool)\n\t\t0: types.Context{baseCtx:context.backgroundCtx{emptyCtx:context.emptyCtx{}}, ms:(*rootmulti.Store)(0x14001231600), header:types.Header{Version:version.Consensus{Block:0x0, App:0x0}, ChainID:\"\", Height:4, Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, LastBlockId:types.BlockID{Hash:[]uint8(nil), PartSetHeader:types.PartSetHeader{Total:0x0, Hash:[]uint8(nil)}}, LastCommitHash:[]uint8(nil), DataHash:[]uint8(nil), ValidatorsHash:[]uint8(nil), NextValidatorsHash:[]uint8(nil), ConsensusHash:[]uint8(nil), AppHash:[]uint8(nil), LastResultsHash:[]uint8(nil), EvidenceHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}, headerHash:[]uint8(nil), chainID:\"\", txBytes:[]uint8{0x1}, logger:log.nopLogger{}, voteInfo:[]types.VoteInfo(nil), gasMeter:(*types.infiniteGasMeter)(0x14000e31798), blockGasMeter:types.GasMeter(nil), checkTx:false, recheckTx:false, execMode:0x0, minGasPrice:types.DecCoins{}, consParams:types.ConsensusParams{Block:(*types.BlockParams)(nil), Evidence:(*types.EvidenceParams)(nil), Validator:(*types.ValidatorParams)(nil), Version:(*types.VersionParams)(nil), Abci:(*types.ABCIParams)(0x14000e31d48)}, eventManager:(*types.EventManager)(0x14000b3a3d8), priority:0, kvGasConfig:types.GasConfig{HasCost:0x3e8, DeleteCost:0x3e8, ReadCostFlat:0x3e8, ReadCostPerByte:0x3, WriteCostFlat:0x7d0, WriteCostPerByte:0x1e, IterNextCostFlat:0x1e}, transientKVGasConfig:types.GasConfig{HasCost:0x64, DeleteCost:0x64, ReadCostFlat:0x64, ReadCostPerByte:0x0, WriteCostFlat:0xc8, WriteCostPerByte:0x3, IterNextCostFlat:0x3}, streamingManager:types.StreamingManager{ABCIListeners:[]types.ABCIListener(nil), StopNodeOnErr:false}, cometInfo:comet.BlockInfo(nil), headerInfo:header.Info{Height:0, Hash:[]uint8(nil), Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, ChainID:\"\", AppHash:[]uint8(nil)}}\n\t\t1: &types.RequestFinalizeBlock{Txs:[][]uint8(nil), DecidedLastCommit:types.CommitInfo{Round:0, Votes:[]types.VoteInfo{}}, Misbehavior:[]types.Misbehavior(nil), Hash:[]uint8(nil), Height:0, Time:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), NextValidatorsHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}\n\t\t2: true\n\nThe closest call I have is: \n\nApplyPricesFromVE(string,string)\n\t\t0: \"mock.Anything\"\n\t\t1: \"mock.Anything\"\n\nProvided 2 arguments, mocked for 3 arguments\nDiff: 0: PASS:  (types.Context={{{}} 0x14001231600 {{0 0}  4 {0 0 <nil>} {[] {0 []}} [] [] [] [] [] [] [] [] []} []  [1] {} [] 0x14000e31798 <nil> false false 0 [] {<nil> <nil> <nil> <nil> 0x14000e31d48} 0x14000b3a3d8 0 {1000 1000 1000 3 2000 30 30} {100 100 100 0 200 3 3} {[] false} <nil> {0 [] {0 0 <nil>}  []}}) == (string=mock.Anything)\n\t1: PASS:  (*types.RequestFinalizeBlock=decided_last_commit:<> time:<seconds:-62135596800 > ) == (string=mock.Anything)\n\t2: FAIL:  (bool=true) != (Missing)"
=== RUN   TestExtendVoteHandler/oracle_service_returns_single_price
    buffer.go:261: vote_extensions.go:74: [90m<nil>[0m [31mERR[0m [1mrecovered from panic in ExtendVoteHandler[0m [36merr=[0m"\n\nmock: Unexpected Method Call\n-----------------------------\n\nApplyPricesFromVE(types.Context,*types.RequestFinalizeBlock,bool)\n\t\t0: types.Context{baseCtx:context.backgroundCtx{emptyCtx:context.emptyCtx{}}, ms:(*rootmulti.Store)(0x1400004c600), header:types.Header{Version:version.Consensus{Block:0x0, App:0x0}, ChainID:\"\", Height:5, Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, LastBlockId:types.BlockID{Hash:[]uint8(nil), PartSetHeader:types.PartSetHeader{Total:0x0, Hash:[]uint8(nil)}}, LastCommitHash:[]uint8(nil), DataHash:[]uint8(nil), ValidatorsHash:[]uint8(nil), NextValidatorsHash:[]uint8(nil), ConsensusHash:[]uint8(nil), AppHash:[]uint8(nil), LastResultsHash:[]uint8(nil), EvidenceHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}, headerHash:[]uint8(nil), chainID:\"\", txBytes:[]uint8{0x1}, logger:log.nopLogger{}, voteInfo:[]types.VoteInfo(nil), gasMeter:(*types.infiniteGasMeter)(0x14001082a30), blockGasMeter:types.GasMeter(nil), checkTx:false, recheckTx:false, execMode:0x0, minGasPrice:types.DecCoins{}, consParams:types.ConsensusParams{Block:(*types.BlockParams)(nil), Evidence:(*types.EvidenceParams)(nil), Validator:(*types.ValidatorParams)(nil), Version:(*types.VersionParams)(nil), Abci:(*types.ABCIParams)(0x14001082e18)}, eventManager:(*types.EventManager)(0x14000b3a960), priority:0, kvGasConfig:types.GasConfig{HasCost:0x3e8, DeleteCost:0x3e8, ReadCostFlat:0x3e8, ReadCostPerByte:0x3, WriteCostFlat:0x7d0, WriteCostPerByte:0x1e, IterNextCostFlat:0x1e}, transientKVGasConfig:types.GasConfig{HasCost:0x64, DeleteCost:0x64, ReadCostFlat:0x64, ReadCostPerByte:0x0, WriteCostFlat:0xc8, WriteCostPerByte:0x3, IterNextCostFlat:0x3}, streamingManager:types.StreamingManager{ABCIListeners:[]types.ABCIListener(nil), StopNodeOnErr:false}, cometInfo:comet.BlockInfo(nil), headerInfo:header.Info{Height:0, Hash:[]uint8(nil), Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, ChainID:\"\", AppHash:[]uint8(nil)}}\n\t\t1: &types.RequestFinalizeBlock{Txs:[][]uint8(nil), DecidedLastCommit:types.CommitInfo{Round:0, Votes:[]types.VoteInfo{}}, Misbehavior:[]types.Misbehavior(nil), Hash:[]uint8(nil), Height:0, Time:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), NextValidatorsHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}\n\t\t2: true\n\nThe closest call I have is: \n\nApplyPricesFromVE(string,string)\n\t\t0: \"mock.Anything\"\n\t\t1: \"mock.Anything\"\n\nProvided 2 arguments, mocked for 3 arguments\nDiff: 0: PASS:  (types.Context={{{}} 0x1400004c600 {{0 0}  5 {0 0 <nil>} {[] {0 []}} [] [] [] [] [] [] [] [] []} []  [1] {} [] 0x14001082a30 <nil> false false 0 [] {<nil> <nil> <nil> <nil> 0x14001082e18} 0x14000b3a960 0 {1000 1000 1000 3 2000 30 30} {100 100 100 0 200 3 3} {[] false} <nil> {0 [] {0 0 <nil>}  []}}) == (string=mock.Anything)\n\t1: PASS:  (*types.RequestFinalizeBlock=decided_last_commit:<> time:<seconds:-62135596800 > ) == (string=mock.Anything)\n\t2: FAIL:  (bool=true) != (Missing)"
=== RUN   TestExtendVoteHandler/oracle_service_returns_multiple_prices
    buffer.go:261: vote_extensions.go:74: [90m<nil>[0m [31mERR[0m [1mrecovered from panic in ExtendVoteHandler[0m [36merr=[0m"\n\nmock: Unexpected Method Call\n-----------------------------\n\nApplyPricesFromVE(types.Context,*types.RequestFinalizeBlock,bool)\n\t\t0: types.Context{baseCtx:context.backgroundCtx{emptyCtx:context.emptyCtx{}}, ms:(*rootmulti.Store)(0x1400004d400), header:types.Header{Version:version.Consensus{Block:0x0, App:0x0}, ChainID:\"\", Height:6, Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, LastBlockId:types.BlockID{Hash:[]uint8(nil), PartSetHeader:types.PartSetHeader{Total:0x0, Hash:[]uint8(nil)}}, LastCommitHash:[]uint8(nil), DataHash:[]uint8(nil), ValidatorsHash:[]uint8(nil), NextValidatorsHash:[]uint8(nil), ConsensusHash:[]uint8(nil), AppHash:[]uint8(nil), LastResultsHash:[]uint8(nil), EvidenceHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}, headerHash:[]uint8(nil), chainID:\"\", txBytes:[]uint8{0x1}, logger:log.nopLogger{}, voteInfo:[]types.VoteInfo(nil), gasMeter:(*types.infiniteGasMeter)(0x14001083970), blockGasMeter:types.GasMeter(nil), checkTx:false, recheckTx:false, execMode:0x0, minGasPrice:types.DecCoins{}, consParams:types.ConsensusParams{Block:(*types.BlockParams)(nil), Evidence:(*types.EvidenceParams)(nil), Validator:(*types.ValidatorParams)(nil), Version:(*types.VersionParams)(nil), Abci:(*types.ABCIParams)(0x14001083d28)}, eventManager:(*types.EventManager)(0x14000b3ae10), priority:0, kvGasConfig:types.GasConfig{HasCost:0x3e8, DeleteCost:0x3e8, ReadCostFlat:0x3e8, ReadCostPerByte:0x3, WriteCostFlat:0x7d0, WriteCostPerByte:0x1e, IterNextCostFlat:0x1e}, transientKVGasConfig:types.GasConfig{HasCost:0x64, DeleteCost:0x64, ReadCostFlat:0x64, ReadCostPerByte:0x0, WriteCostFlat:0xc8, WriteCostPerByte:0x3, IterNextCostFlat:0x3}, streamingManager:types.StreamingManager{ABCIListeners:[]types.ABCIListener(nil), StopNodeOnErr:false}, cometInfo:comet.BlockInfo(nil), headerInfo:header.Info{Height:0, Hash:[]uint8(nil), Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, ChainID:\"\", AppHash:[]uint8(nil)}}\n\t\t1: &types.RequestFinalizeBlock{Txs:[][]uint8(nil), DecidedLastCommit:types.CommitInfo{Round:0, Votes:[]types.VoteInfo{}}, Misbehavior:[]types.Misbehavior(nil), Hash:[]uint8(nil), Height:0, Time:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), NextValidatorsHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}\n\t\t2: true\n\nThe closest call I have is: \n\nApplyPricesFromVE(string,string)\n\t\t0: \"mock.Anything\"\n\t\t1: \"mock.Anything\"\n\nProvided 2 arguments, mocked for 3 arguments\nDiff: 0: PASS:  (types.Context={{{}} 0x1400004d400 {{0 0}  6 {0 0 <nil>} {[] {0 []}} [] [] [] [] [] [] [] [] []} []  [1] {} [] 0x14001083970 <nil> false false 0 [] {<nil> <nil> <nil> <nil> 0x14001083d28} 0x14000b3ae10 0 {1000 1000 1000 3 2000 30 30} {100 100 100 0 200 3 3} {[] false} <nil> {0 [] {0 0 <nil>}  []}}) == (string=mock.Anything)\n\t1: PASS:  (*types.RequestFinalizeBlock=decided_last_commit:<> time:<seconds:-62135596800 > ) == (string=mock.Anything)\n\t2: FAIL:  (bool=true) != (Missing)"
=== RUN   TestExtendVoteHandler/getting_prices_panics
    buffer.go:261: vote_extensions.go:74: [90m<nil>[0m [31mERR[0m [1mrecovered from panic in ExtendVoteHandler[0m [36merr=[0m"\n\nmock: Unexpected Method Call\n-----------------------------\n\nApplyPricesFromVE(types.Context,*types.RequestFinalizeBlock,bool)\n\t\t0: types.Context{baseCtx:context.backgroundCtx{emptyCtx:context.emptyCtx{}}, ms:(*rootmulti.Store)(0x14000e78400), header:types.Header{Version:version.Consensus{Block:0x0, App:0x0}, ChainID:\"\", Height:7, Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, LastBlockId:types.BlockID{Hash:[]uint8(nil), PartSetHeader:types.PartSetHeader{Total:0x0, Hash:[]uint8(nil)}}, LastCommitHash:[]uint8(nil), DataHash:[]uint8(nil), ValidatorsHash:[]uint8(nil), NextValidatorsHash:[]uint8(nil), ConsensusHash:[]uint8(nil), AppHash:[]uint8(nil), LastResultsHash:[]uint8(nil), EvidenceHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}, headerHash:[]uint8(nil), chainID:\"\", txBytes:[]uint8{0x1}, logger:log.nopLogger{}, voteInfo:[]types.VoteInfo(nil), gasMeter:(*types.infiniteGasMeter)(0x14000f40d70), blockGasMeter:types.GasMeter(nil), checkTx:false, recheckTx:false, execMode:0x0, minGasPrice:types.DecCoins{}, consParams:types.ConsensusParams{Block:(*types.BlockParams)(nil), Evidence:(*types.EvidenceParams)(nil), Validator:(*types.ValidatorParams)(nil), Version:(*types.VersionParams)(nil), Abci:(*types.ABCIParams)(0x14000f41178)}, eventManager:(*types.EventManager)(0x14000b3b200), priority:0, kvGasConfig:types.GasConfig{HasCost:0x3e8, DeleteCost:0x3e8, ReadCostFlat:0x3e8, ReadCostPerByte:0x3, WriteCostFlat:0x7d0, WriteCostPerByte:0x1e, IterNextCostFlat:0x1e}, transientKVGasConfig:types.GasConfig{HasCost:0x64, DeleteCost:0x64, ReadCostFlat:0x64, ReadCostPerByte:0x0, WriteCostFlat:0xc8, WriteCostPerByte:0x3, IterNextCostFlat:0x3}, streamingManager:types.StreamingManager{ABCIListeners:[]types.ABCIListener(nil), StopNodeOnErr:false}, cometInfo:comet.BlockInfo(nil), headerInfo:header.Info{Height:0, Hash:[]uint8(nil), Time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, ChainID:\"\", AppHash:[]uint8(nil)}}\n\t\t1: &types.RequestFinalizeBlock{Txs:[][]uint8(nil), DecidedLastCommit:types.CommitInfo{Round:0, Votes:[]types.VoteInfo{}}, Misbehavior:[]types.Misbehavior(nil), Hash:[]uint8(nil), Height:0, Time:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), NextValidatorsHash:[]uint8(nil), ProposerAddress:[]uint8(nil)}\n\t\t2: true\n\nThe closest call I have is: \n\nApplyPricesFromVE(string,string)\n\t\t0: \"mock.Anything\"\n\t\t1: \"mock.Anything\"\n\nProvided 2 arguments, mocked for 3 arguments\nDiff: 0: PASS:  (types.Context={{{}} 0x14000e78400 {{0 0}  7 {0 0 <nil>} {[] {0 []}} [] [] [] [] [] [] [] [] []} []  [1] {} [] 0x14000f40d70 <nil> false false 0 [] {<nil> <nil> <nil> <nil> 0x14000f41178} 0x14000b3b200 0 {1000 1000 1000 3 2000 30 30} {100 100 100 0 200 3 3} {[] false} <nil> {0 [] {0 0 <nil>}  []}}) == (string=mock.Anything)\n\t1: PASS:  (*types.RequestFinalizeBlock=decided_last_commit:<> time:<seconds:-62135596800 > ) == (string=mock.Anything)\n\t2: FAIL:  (bool=true) != (Missing)"
--- PASS: TestExtendVoteHandler (0.00s)
    --- PASS: TestExtendVoteHandler/nil_request_returns_error (0.00s)
    --- PASS: TestExtendVoteHandler/price_daemon_returns_no_prices (0.00s)
    --- PASS: TestExtendVoteHandler/oracle_service_returns_single_price (0.00s)
    --- PASS: TestExtendVoteHandler/oracle_service_returns_multiple_prices (0.00s)
    --- PASS: TestExtendVoteHandler/getting_prices_panics (0.00s)
PASS
ok  	github.com/StreamFinance-Protocol/stream-chain/protocol/app/ve	1.953s
