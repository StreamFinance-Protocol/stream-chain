// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	clobtypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/clob/types"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"
)

// GrpcStreamingManager is an autogenerated mock type for the GrpcStreamingManager type
type GrpcStreamingManager struct {
	mock.Mock
}

// Enabled provides a mock function with given fields:
func (_m *GrpcStreamingManager) Enabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Enabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUninitializedClobPairIds provides a mock function with given fields:
func (_m *GrpcStreamingManager) GetUninitializedClobPairIds() []uint32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUninitializedClobPairIds")
	}

	var r0 []uint32
	if rf, ok := ret.Get(0).(func() []uint32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}

	return r0
}

// SendOrderbookUpdates provides a mock function with given fields: offchainUpdates, snapshot, blockHeight, execMode
func (_m *GrpcStreamingManager) SendOrderbookUpdates(offchainUpdates *clobtypes.OffchainUpdates, snapshot bool, blockHeight uint32, execMode cosmos_sdktypes.ExecMode) {
	_m.Called(offchainUpdates, snapshot, blockHeight, execMode)
}

// Subscribe provides a mock function with given fields: req, srv
func (_m *GrpcStreamingManager) Subscribe(req clobtypes.StreamOrderbookUpdatesRequest, srv clobtypes.Query_StreamOrderbookUpdatesServer) error {
	ret := _m.Called(req, srv)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(clobtypes.StreamOrderbookUpdatesRequest, clobtypes.Query_StreamOrderbookUpdatesServer) error); ok {
		r0 = rf(req, srv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGrpcStreamingManager creates a new instance of GrpcStreamingManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrpcStreamingManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrpcStreamingManager {
	mock := &GrpcStreamingManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
