"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsertPerpetualMarket = exports.getPerpetualMarketsMap = exports.getTickerToPerpetualMarketForTest = exports.getClobPairIdToPerpetualMarket = exports.getPerpetualMarketFromId = exports.getPerpetualMarketFromClobPairId = exports.getPerpetualMarketFromTicker = exports.getPerpetualMarketTicker = exports.getClobPairIdFromTicker = exports.getPerpetualMarketsList = exports.isValidPerpetualMarketTicker = exports.updatePerpetualMarkets = exports.clear = exports.start = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const lodash_1 = __importDefault(require("lodash"));
const config_1 = __importDefault(require("../config"));
const PerpetualMarketTable = __importStar(require("../stores/perpetual-market-table"));
const types_1 = require("../types");
let idToPerpetualMarket = {};
// TODO(DEC-642): Update the in-memory mapping of perpetual market tickers to ids from websocket
// messages from `v4_markets` topic rather than periodically refereshing from the database.
/**
 * Refresh loop to cache the list of all perpetual markets from the database in-memory.
 */
async function start() {
    for (;;) {
        await updatePerpetualMarkets();
        await (0, base_1.delay)(config_1.default.PERPETUAL_MARKETS_REFRESHER_INTERVAL_MS);
    }
}
exports.start = start;
/**
 * Clears the in-memory map of perpetual market clob pair ids to tickers and tickers to clob pair.
 * Used for testing.
 */
function clear() {
    if (config_1.default.NODE_ENV !== base_1.NodeEnv.TEST) {
        throw new Error('clear cannot be used in non-test env');
    }
    idToPerpetualMarket = {};
}
exports.clear = clear;
/**
 * Updates in-memory map of perpetual market clob pair ids to tickers and tickers to clob pair ids.
 */
async function updatePerpetualMarkets(options) {
    const startTime = Date.now();
    const perpetualMarkets = await PerpetualMarketTable.findAll({}, [], options || { readReplica: true });
    const tmpIdToPerpetualMarket = {};
    perpetualMarkets.forEach((market) => {
        tmpIdToPerpetualMarket[market.id] = market;
    });
    idToPerpetualMarket = tmpIdToPerpetualMarket;
    base_1.stats.timing(`${config_1.default.SERVICE_NAME}.loops.update_perpetual_markets`, Date.now() - startTime);
}
exports.updatePerpetualMarkets = updatePerpetualMarkets;
/**
 * Validates a ticker references a perpetual market.
 * @param ticker Ticker to validate.
 * @returns true if ticker matches a perpetual market ticker, false otherwise.
 */
function isValidPerpetualMarketTicker(ticker) {
    return lodash_1.default.some(idToPerpetualMarket, (perpetualMarket) => {
        return perpetualMarket.ticker === ticker;
    });
}
exports.isValidPerpetualMarketTicker = isValidPerpetualMarketTicker;
function getPerpetualMarketsList() {
    return Object.values(idToPerpetualMarket);
}
exports.getPerpetualMarketsList = getPerpetualMarketsList;
/**
 * Gets the clob pair id for a given perpetual market ticker.
 * @param ticker Ticker for the perpetual market.
 * @returns Clob pair id to get perpetual market with the ticker, if no perpetual market exists
 * with the given clob pair id, undefined is returned.
 */
function getClobPairIdFromTicker(ticker) {
    const perpetualMarket = getPerpetualMarketFromTicker(ticker);
    return perpetualMarket?.clobPairId;
}
exports.getClobPairIdFromTicker = getClobPairIdFromTicker;
/**
 * Gets the perpetual market ticker given a clob pair id.
 * @param clobPairId Clob pair id to get perpetual market for.
 * @returns Ticker for the perpetual market with the clob pair id, if no perpetual market exists
 * with the given clob pair id, undefined is returned.
 */
function getPerpetualMarketTicker(clobPairId) {
    const perpetualMarket = getPerpetualMarketFromClobPairId(clobPairId);
    return perpetualMarket?.ticker;
}
exports.getPerpetualMarketTicker = getPerpetualMarketTicker;
/**
 * Gets the perpetual market for a given ticker.
 */
function getPerpetualMarketFromTicker(ticker) {
    return lodash_1.default.find(getPerpetualMarketsList(), (perpetualMarket) => {
        return perpetualMarket.ticker === ticker;
    });
}
exports.getPerpetualMarketFromTicker = getPerpetualMarketFromTicker;
/**
 * Gets the perpetual market for a given clob pair id.
 */
function getPerpetualMarketFromClobPairId(clobPairId) {
    return lodash_1.default.find(getPerpetualMarketsList(), (perpetualMarket) => {
        return perpetualMarket.clobPairId === clobPairId;
    });
}
exports.getPerpetualMarketFromClobPairId = getPerpetualMarketFromClobPairId;
/**
 * Gets the perpetual market for a given id.
 */
function getPerpetualMarketFromId(id) {
    return idToPerpetualMarket[id];
}
exports.getPerpetualMarketFromId = getPerpetualMarketFromId;
function getClobPairIdToPerpetualMarket() {
    return lodash_1.default.keyBy(getPerpetualMarketsList(), types_1.PerpetualMarketColumns.clobPairId);
}
exports.getClobPairIdToPerpetualMarket = getClobPairIdToPerpetualMarket;
function getTickerToPerpetualMarketForTest() {
    if (config_1.default.NODE_ENV !== base_1.NodeEnv.TEST) {
        throw Error(`getTickerToPerpetualMarketForTest cannot be used in env ${config_1.default.NODE_ENV}`);
    }
    return lodash_1.default.keyBy(getPerpetualMarketsList(), types_1.PerpetualMarketColumns.ticker);
}
exports.getTickerToPerpetualMarketForTest = getTickerToPerpetualMarketForTest;
function getPerpetualMarketsMap() {
    return idToPerpetualMarket;
}
exports.getPerpetualMarketsMap = getPerpetualMarketsMap;
/**
 * Add or updates a perpetual market instance in the in memory cache
 */
function upsertPerpetualMarket(perpetualMarket) {
    idToPerpetualMarket[perpetualMarket.id] = perpetualMarket;
}
exports.upsertPerpetualMarket = upsertPerpetualMarket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLW1hcmtldC1yZWZyZXNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbG9vcHMvcGVycGV0dWFsLW1hcmtldC1yZWZyZXNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBbUU7QUFDbkUsb0RBQXVCO0FBRXZCLHVEQUErQjtBQUMvQix1RkFBeUU7QUFDekUsb0NBRWtCO0FBRWxCLElBQUksbUJBQW1CLEdBQWdELEVBQUUsQ0FBQztBQUUxRSxnR0FBZ0c7QUFDaEcsMkZBQTJGO0FBRTNGOztHQUVHO0FBQ0ksS0FBSyxVQUFVLEtBQUs7SUFDekIsU0FBUztRQUNQLE1BQU0sc0JBQXNCLEVBQUUsQ0FBQztRQUMvQixNQUFNLElBQUEsWUFBSyxFQUFDLGdCQUFNLENBQUMsdUNBQXVDLENBQUMsQ0FBQztLQUM3RDtBQUNILENBQUM7QUFMRCxzQkFLQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLEtBQUs7SUFDbkIsSUFBSSxnQkFBTSxDQUFDLFFBQVEsS0FBSyxjQUFPLENBQUMsSUFBSSxFQUFFO1FBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN6RDtJQUNELG1CQUFtQixHQUFHLEVBQUUsQ0FBQztBQUMzQixDQUFDO0FBTEQsc0JBS0M7QUFFRDs7R0FFRztBQUNJLEtBQUssVUFBVSxzQkFBc0IsQ0FBQyxPQUFpQjtJQUM1RCxNQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxnQkFBZ0IsR0FBa0MsTUFBTSxvQkFBb0IsQ0FBQyxPQUFPLENBQ3hGLEVBQUUsRUFDRixFQUFFLEVBQ0YsT0FBTyxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUNqQyxDQUFDO0lBRUYsTUFBTSxzQkFBc0IsR0FBZ0QsRUFBRSxDQUFDO0lBQy9FLGdCQUFnQixDQUFDLE9BQU8sQ0FDdEIsQ0FBQyxNQUFtQyxFQUFFLEVBQUU7UUFDdEMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUM3QyxDQUFDLENBQ0YsQ0FBQztJQUVGLG1CQUFtQixHQUFHLHNCQUFzQixDQUFDO0lBQzdDLFlBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxnQkFBTSxDQUFDLFlBQVksaUNBQWlDLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0FBQ2hHLENBQUM7QUFqQkQsd0RBaUJDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLDRCQUE0QixDQUFDLE1BQWM7SUFDekQsT0FBTyxnQkFBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLGVBQTRDLEVBQUUsRUFBRTtRQUNsRixPQUFPLGVBQWUsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUpELG9FQUlDO0FBRUQsU0FBZ0IsdUJBQXVCO0lBQ3JDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFGRCwwREFFQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0IsdUJBQXVCLENBQUMsTUFBYztJQUNwRCxNQUFNLGVBQWUsR0FBNEMsNEJBQTRCLENBQzNGLE1BQU0sQ0FDUCxDQUFDO0lBRUYsT0FBTyxlQUFlLEVBQUUsVUFBVSxDQUFDO0FBQ3JDLENBQUM7QUFORCwwREFNQztBQUVEOzs7OztHQUtHO0FBQ0gsU0FBZ0Isd0JBQXdCLENBQUMsVUFBa0I7SUFDekQsTUFBTSxlQUFlLEdBQTRDLGdDQUFnQyxDQUMvRixVQUFVLENBQ1gsQ0FBQztJQUVGLE9BQU8sZUFBZSxFQUFFLE1BQU0sQ0FBQztBQUNqQyxDQUFDO0FBTkQsNERBTUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLDRCQUE0QixDQUMxQyxNQUFjO0lBRWQsT0FBTyxnQkFBQyxDQUFDLElBQUksQ0FDWCx1QkFBdUIsRUFBRSxFQUN6QixDQUFDLGVBQTRDLEVBQUUsRUFBRTtRQUMvQyxPQUFPLGVBQWUsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDO0lBQzNDLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVRELG9FQVNDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixnQ0FBZ0MsQ0FDOUMsVUFBa0I7SUFFbEIsT0FBTyxnQkFBQyxDQUFDLElBQUksQ0FDWCx1QkFBdUIsRUFBRSxFQUN6QixDQUFDLGVBQTRDLEVBQUUsRUFBRTtRQUMvQyxPQUFPLGVBQWUsQ0FBQyxVQUFVLEtBQUssVUFBVSxDQUFDO0lBQ25ELENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQVRELDRFQVNDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQix3QkFBd0IsQ0FBQyxFQUFVO0lBQ2pELE9BQU8sbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUZELDREQUVDO0FBRUQsU0FBZ0IsOEJBQThCO0lBQzVDLE9BQU8sZ0JBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEVBQUUsRUFBRSw4QkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUMvRSxDQUFDO0FBRkQsd0VBRUM7QUFFRCxTQUFnQixpQ0FBaUM7SUFDL0MsSUFBSSxnQkFBTSxDQUFDLFFBQVEsS0FBSyxjQUFPLENBQUMsSUFBSSxFQUFFO1FBQ3BDLE1BQU0sS0FBSyxDQUNULDJEQUEyRCxnQkFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDakY7SUFFRCxPQUFPLGdCQUFDLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLEVBQUUsOEJBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQVBELDhFQU9DO0FBRUQsU0FBZ0Isc0JBQXNCO0lBQ3BDLE9BQU8sbUJBQW1CLENBQUM7QUFDN0IsQ0FBQztBQUZELHdEQUVDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxlQUE0QztJQUNoRixtQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLEdBQUcsZUFBZSxDQUFDO0FBQzVELENBQUM7QUFGRCxzREFFQyJ9