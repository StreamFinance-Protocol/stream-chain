"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const consumer_1 = require("../src/consumer");
const producer_1 = require("../src/producer");
const kafka_1 = require("./helpers/kafka");
const src_1 = require("../src");
// Skipping because timeout could cause tests to be flaky
describe.skip('consumer', () => {
    beforeAll(async () => {
        await Promise.all([
            consumer_1.consumer.connect(),
            producer_1.producer.connect(),
        ]);
        await consumer_1.consumer.subscribe({ topic: src_1.TO_ENDER_TOPIC });
        await (0, consumer_1.startConsumer)();
    });
    afterAll(async () => {
        await Promise.all([
            (0, consumer_1.stopConsumer)(),
            producer_1.producer.disconnect(),
        ]);
    });
    it('is consuming message', async () => {
        const onMessageFn = jest.fn();
        (0, consumer_1.updateOnMessageFunction)(onMessageFn);
        const kafkaMessage = (0, kafka_1.createKafkaMessage)(null);
        await producer_1.producer.send({
            topic: src_1.TO_ENDER_TOPIC,
            messages: [{
                    value: kafkaMessage.value,
                    timestamp: `${Date.now()}`,
                }],
        });
        await new Promise((resolve) => {
            setTimeout(resolve, 2000);
        });
        expect(onMessageFn).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VtZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL19fdGVzdHNfXy9jb25zdW1lci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBRXlCO0FBQ3pCLDhDQUEyQztBQUMzQywyQ0FBcUQ7QUFFckQsZ0NBQXdDO0FBRXhDLHlEQUF5RDtBQUN6RCxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNoQixtQkFBUSxDQUFDLE9BQU8sRUFBRTtZQUNsQixtQkFBUSxDQUFDLE9BQU8sRUFBRTtTQUNuQixDQUFDLENBQUM7UUFDSCxNQUFNLG1CQUFRLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLG9CQUFjLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sSUFBQSx3QkFBYSxHQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLElBQUEsdUJBQVksR0FBRTtZQUNkLG1CQUFRLENBQUMsVUFBVSxFQUFFO1NBQ3RCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3BDLE1BQU0sV0FBVyxHQUE0RCxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDdkYsSUFBQSxrQ0FBdUIsRUFBQyxXQUFXLENBQUMsQ0FBQztRQUNyQyxNQUFNLFlBQVksR0FBaUIsSUFBQSwwQkFBa0IsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUU1RCxNQUFNLG1CQUFRLENBQUMsSUFBSSxDQUFDO1lBQ2xCLEtBQUssRUFBRSxvQkFBYztZQUNyQixRQUFRLEVBQUUsQ0FBQztvQkFDVCxLQUFLLEVBQUUsWUFBWSxDQUFDLEtBQUs7b0JBQ3pCLFNBQVMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtpQkFDM0IsQ0FBQztTQUNILENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM1QixVQUFVLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9