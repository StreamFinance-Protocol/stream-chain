// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	ethclient "github.com/ethereum/go-ethereum/ethclient"

	mock "github.com/stretchr/testify/mock"
)

// EthQueryClient is an autogenerated mock type for the EthQueryClient type
type EthQueryClient struct {
	mock.Mock
}

// ChainID provides a mock function with given fields: ctx, client
func (_m *EthQueryClient) ChainID(ctx context.Context, client *ethclient.Client) (*big.Int, error) {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for ChainID")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client) (*big.Int, error)); ok {
		return rf(ctx, client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ethclient.Client) *big.Int); ok {
		r0 = rf(ctx, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ethclient.Client) error); ok {
		r1 = rf(ctx, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryDaiConversionRate provides a mock function with given fields: client
func (_m *EthQueryClient) QueryDaiConversionRate(client *ethclient.Client) (string, string, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for QueryDaiConversionRate")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*ethclient.Client) (string, string, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*ethclient.Client) string); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*ethclient.Client) string); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*ethclient.Client) error); ok {
		r2 = rf(client)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewEthQueryClient creates a new instance of EthQueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthQueryClient {
	mock := &EthQueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
