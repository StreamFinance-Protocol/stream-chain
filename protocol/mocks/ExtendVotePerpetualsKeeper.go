// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	perpetualstypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/perpetuals/types"
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// ExtendVotePerpetualsKeeper is an autogenerated mock type for the ExtendVotePerpetualsKeeper type
type ExtendVotePerpetualsKeeper struct {
	mock.Mock
}

// GetPerpetual provides a mock function with given fields: ctx, id
func (_m *ExtendVotePerpetualsKeeper) GetPerpetual(ctx types.Context, id uint32) (perpetualstypes.Perpetual, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPerpetual")
	}

	var r0 perpetualstypes.Perpetual
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint32) (perpetualstypes.Perpetual, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint32) perpetualstypes.Perpetual); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(perpetualstypes.Perpetual)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExtendVotePerpetualsKeeper creates a new instance of ExtendVotePerpetualsKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtendVotePerpetualsKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtendVotePerpetualsKeeper {
	mock := &ExtendVotePerpetualsKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
