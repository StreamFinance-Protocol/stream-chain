/// <reference types="node" />
import { Producer, RecordMetadata } from 'kafkajs';
import { KafkaTopics } from './types';
/**
 * Single message sent to the producer.
 */
export declare type ProducerMessage = {
    key?: Buffer;
    value: Buffer;
};
/**
 * Groups messages for a single kafka topic into batches to send fewer ProducerRecords.
 */
export declare class BatchKafkaProducer {
    maxBatchSizeBytes: number;
    producer: Producer;
    topic: KafkaTopics;
    producerMessages: ProducerMessage[];
    producerPromises: Promise<RecordMetadata[]>[];
    currentSize: number;
    constructor(topic: KafkaTopics, producer: Producer, maxBatchSizeBytes: number);
    /**
     * Add a message to the current batch. If the message size would push the current batch size over
     * the maxBatchSizeBytes, the current batch (without this message) is flushed first, then the
     * message is added to a new batch.
     */
    addMessageAndMaybeFlush(message: ProducerMessage): void;
    flush(): Promise<RecordMetadata[][]>;
    private sendBatch;
}
