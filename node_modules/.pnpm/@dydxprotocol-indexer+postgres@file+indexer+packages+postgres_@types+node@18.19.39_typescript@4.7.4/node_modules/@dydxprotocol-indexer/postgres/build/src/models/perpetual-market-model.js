"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
const types_1 = require("../types");
class PerpetualMarketModel extends objection_1.Model {
    static get tableName() {
        return 'perpetual_markets';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'clobPairId',
                'ticker',
                'marketId',
                'status',
                'priceChange24H',
                'volume24H',
                'trades24H',
                'nextFundingRate',
                'openInterest',
                'quantumConversionExponent',
                'atomicResolution',
                'subticksPerTick',
                'stepBaseQuantums',
                'liquidityTierId',
                'marketType',
            ],
            properties: {
                id: { type: 'string', pattern: validators_1.IntegerPattern },
                clobPairId: { type: 'string', pattern: validators_1.IntegerPattern },
                ticker: { type: 'string' },
                marketId: { type: 'integer' },
                status: { type: 'string', enum: [...Object.values(types_1.PerpetualMarketStatus)] },
                priceChange24H: { type: 'string', pattern: validators_1.NumericPattern },
                volume24H: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                trades24H: { type: 'integer' },
                nextFundingRate: { type: 'string', pattern: validators_1.NumericPattern },
                openInterest: { type: 'string', pattern: validators_1.NumericPattern },
                quantumConversionExponent: { type: 'integer' },
                atomicResolution: { type: 'integer' },
                subticksPerTick: { type: 'integer' },
                stepBaseQuantums: { type: 'integer' },
                liquidityTierId: { type: 'integer' },
                marketType: { type: 'string' },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            clobPairId: 'string',
            ticker: 'string',
            marketId: 'integer',
            status: 'string',
            priceChange24H: 'string',
            volume24H: 'string',
            trades24H: 'integer',
            nextFundingRate: 'string',
            openInterest: 'string',
            quantumConversionExponent: 'integer',
            atomicResolution: 'integer',
            subticksPerTick: 'integer',
            stepBaseQuantums: 'integer',
            liquidityTierId: 'integer',
            marketType: 'string',
        };
    }
}
exports.default = PerpetualMarketModel;
PerpetualMarketModel.relationMappings = {
    perpetualPosition: {
        relation: objection_1.Model.HasManyRelation,
        modelClass: path_1.default.join(__dirname, 'perpetual-position-model'),
        join: {
            from: 'perpetual_markets.id',
            to: 'perpetual_positions.perpetualId',
        },
    },
    market: {
        relation: objection_1.Model.HasOneRelation,
        modelClass: path_1.default.join(__dirname, 'market-model'),
        join: {
            from: 'perpetual_markets.marketId',
            to: 'markets.id',
        },
    },
    liquidityTiers: {
        relation: objection_1.Model.HasOneRelation,
        modelClass: path_1.default.join(__dirname, 'liquidity-tiers-model'),
        join: {
            from: 'perpetual_markets.liquidityTierId',
            to: 'liquidity_tiers.id',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLW1hcmtldC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvcGVycGV0dWFsLW1hcmtldC1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUV4Qix5Q0FBa0M7QUFFbEMsa0RBSTJCO0FBQzNCLG9DQUVrQjtBQUVsQixNQUFxQixvQkFBcUIsU0FBUSxpQkFBSztJQUNyRCxNQUFNLEtBQUssU0FBUztRQUNsQixPQUFPLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUE2QkQsTUFBTSxLQUFLLFVBQVU7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFO2dCQUNSLElBQUk7Z0JBQ0osWUFBWTtnQkFDWixRQUFRO2dCQUNSLFVBQVU7Z0JBQ1YsUUFBUTtnQkFDUixnQkFBZ0I7Z0JBQ2hCLFdBQVc7Z0JBQ1gsV0FBVztnQkFDWCxpQkFBaUI7Z0JBQ2pCLGNBQWM7Z0JBQ2QsMkJBQTJCO2dCQUMzQixrQkFBa0I7Z0JBQ2xCLGlCQUFpQjtnQkFDakIsa0JBQWtCO2dCQUNsQixpQkFBaUI7Z0JBQ2pCLFlBQVk7YUFDYjtZQUNELFVBQVUsRUFBRTtnQkFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUMvQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUN2RCxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUMxQixRQUFRLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUM3QixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyw2QkFBcUIsQ0FBQyxDQUFDLEVBQUU7Z0JBQzNFLGNBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLDJCQUFjLEVBQUU7Z0JBQzNELFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLHNDQUF5QixFQUFFO2dCQUNqRSxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUM5QixlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUM1RCxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUN6RCx5QkFBeUIsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQzlDLGdCQUFnQixFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtnQkFDckMsZUFBZSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtnQkFDcEMsZ0JBQWdCLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUNyQyxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO2dCQUNwQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO2FBQy9CO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxvQkFBb0I7UUFDN0IsT0FBTztZQUNMLEVBQUUsRUFBRSxRQUFRO1lBQ1osVUFBVSxFQUFFLFFBQVE7WUFDcEIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsTUFBTSxFQUFFLFFBQVE7WUFDaEIsY0FBYyxFQUFFLFFBQVE7WUFDeEIsU0FBUyxFQUFFLFFBQVE7WUFDbkIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsZUFBZSxFQUFFLFFBQVE7WUFDekIsWUFBWSxFQUFFLFFBQVE7WUFDdEIseUJBQXlCLEVBQUUsU0FBUztZQUNwQyxnQkFBZ0IsRUFBRSxTQUFTO1lBQzNCLGVBQWUsRUFBRSxTQUFTO1lBQzFCLGdCQUFnQixFQUFFLFNBQVM7WUFDM0IsZUFBZSxFQUFFLFNBQVM7WUFDMUIsVUFBVSxFQUFFLFFBQVE7U0FDckIsQ0FBQztJQUNKLENBQUM7O0FBdkdILHVDQXdJQztBQS9IUSxxQ0FBZ0IsR0FBRztJQUN4QixpQkFBaUIsRUFBRTtRQUNqQixRQUFRLEVBQUUsaUJBQUssQ0FBQyxlQUFlO1FBQy9CLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSwwQkFBMEIsQ0FBQztRQUM1RCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsc0JBQXNCO1lBQzVCLEVBQUUsRUFBRSxpQ0FBaUM7U0FDdEM7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFFBQVEsRUFBRSxpQkFBSyxDQUFDLGNBQWM7UUFDOUIsVUFBVSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQztRQUNoRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsNEJBQTRCO1lBQ2xDLEVBQUUsRUFBRSxZQUFZO1NBQ2pCO0tBQ0Y7SUFDRCxjQUFjLEVBQUU7UUFDZCxRQUFRLEVBQUUsaUJBQUssQ0FBQyxjQUFjO1FBQzlCLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx1QkFBdUIsQ0FBQztRQUN6RCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsbUNBQW1DO1lBQ3pDLEVBQUUsRUFBRSxvQkFBb0I7U0FDekI7S0FDRjtDQUNGLENBQUMifQ==