// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// VoteExtensionRateLimitKeeper is an autogenerated mock type for the VoteExtensionRateLimitKeeper type
type VoteExtensionRateLimitKeeper struct {
	mock.Mock
}

// GetSDAILastBlockUpdated provides a mock function with given fields: ctx
func (_m *VoteExtensionRateLimitKeeper) GetSDAILastBlockUpdated(ctx types.Context) (*big.Int, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSDAILastBlockUpdated")
	}

	var r0 *big.Int
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (*big.Int, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetSDAIPrice provides a mock function with given fields: ctx
func (_m *VoteExtensionRateLimitKeeper) GetSDAIPrice(ctx types.Context) (*big.Int, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSDAIPrice")
	}

	var r0 *big.Int
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (*big.Int, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) *big.Int); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewVoteExtensionRateLimitKeeper creates a new instance of VoteExtensionRateLimitKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoteExtensionRateLimitKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoteExtensionRateLimitKeeper {
	mock := &VoteExtensionRateLimitKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
