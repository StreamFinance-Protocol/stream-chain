// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/perpetuals/params.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for x/perpetuals module.
type Params struct {
	// Funding rate clamp factor in parts-per-million, used for clamping 8-hour
	// funding rates according to equation: |R| <= funding_rate_clamp_factor *
	// (initial margin - maintenance margin).
	FundingRateClampFactorPpm uint32 `protobuf:"varint,1,opt,name=funding_rate_clamp_factor_ppm,json=fundingRateClampFactorPpm,proto3" json:"funding_rate_clamp_factor_ppm,omitempty"`
	// Premium vote clamp factor in parts-per-million, used for clamping premium
	// votes according to equation: |V| <= premium_vote_clamp_factor *
	// (initial margin - maintenance margin).
	PremiumVoteClampFactorPpm uint32 `protobuf:"varint,2,opt,name=premium_vote_clamp_factor_ppm,json=premiumVoteClampFactorPpm,proto3" json:"premium_vote_clamp_factor_ppm,omitempty"`
	// Minimum number of premium votes per premium sample. If number of premium
	// votes is smaller than this number, pad with zeros up to this number.
	MinNumVotesPerSample uint32 `protobuf:"varint,3,opt,name=min_num_votes_per_sample,json=minNumVotesPerSample,proto3" json:"min_num_votes_per_sample,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b16af88c7880f7e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFundingRateClampFactorPpm() uint32 {
	if m != nil {
		return m.FundingRateClampFactorPpm
	}
	return 0
}

func (m *Params) GetPremiumVoteClampFactorPpm() uint32 {
	if m != nil {
		return m.PremiumVoteClampFactorPpm
	}
	return 0
}

func (m *Params) GetMinNumVotesPerSample() uint32 {
	if m != nil {
		return m.MinNumVotesPerSample
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "dydxprotocol.perpetuals.Params")
}

func init() {
	proto.RegisterFile("dydxprotocol/perpetuals/params.proto", fileDescriptor_8b16af88c7880f7e)
}

var fileDescriptor_8b16af88c7880f7e = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x73, 0x0a, 0x1d, 0x02, 0x2e, 0x45, 0x30, 0x0e, 0x1e, 0x22, 0x0e, 0x2e, 0x4d, 0x06,
	0xc1, 0x59, 0x14, 0x3a, 0x38, 0x48, 0x68, 0xc1, 0xc1, 0xe5, 0xb8, 0x5e, 0x5e, 0xdb, 0x83, 0xbc,
	0xbb, 0xc7, 0xdd, 0x45, 0xda, 0x6f, 0xe1, 0x87, 0x72, 0x70, 0xec, 0xe8, 0x28, 0xc9, 0x17, 0x91,
	0x5e, 0xa3, 0x16, 0x74, 0x7d, 0xff, 0xdf, 0xfb, 0x0d, 0xbf, 0xf4, 0xb2, 0x5a, 0x57, 0x2b, 0x72,
	0x36, 0x58, 0x65, 0xeb, 0x82, 0xc0, 0x11, 0x84, 0x46, 0xd6, 0xbe, 0x20, 0xe9, 0x24, 0xfa, 0x3c,
	0x4e, 0xc3, 0x93, 0x7d, 0x2a, 0xff, 0xa5, 0x2e, 0xde, 0x58, 0x3a, 0x28, 0x23, 0x39, 0xbc, 0x4d,
	0xcf, 0xe6, 0x8d, 0xa9, 0xb4, 0x59, 0x08, 0x27, 0x03, 0x08, 0x55, 0x4b, 0x24, 0x31, 0x97, 0x2a,
	0x58, 0x27, 0x88, 0x30, 0x63, 0xe7, 0xec, 0xea, 0x68, 0x72, 0xda, 0x43, 0x13, 0x19, 0xe0, 0x7e,
	0x8b, 0x8c, 0x23, 0x51, 0x12, 0x6e, 0x0d, 0xe4, 0x00, 0x75, 0x83, 0xe2, 0xc5, 0xfe, 0x67, 0x38,
	0xd8, 0x19, 0x7a, 0xe8, 0xc9, 0xfe, 0x31, 0xdc, 0xa4, 0x19, 0x6a, 0x23, 0x4c, 0x6f, 0xf0, 0x82,
	0xc0, 0x09, 0x2f, 0x91, 0x6a, 0xc8, 0x0e, 0xe3, 0xf3, 0x31, 0x6a, 0xf3, 0xb8, 0xfb, 0xf5, 0x25,
	0xb8, 0x69, 0xdc, 0xee, 0xaa, 0xf7, 0x96, 0xb3, 0x4d, 0xcb, 0xd9, 0x67, 0xcb, 0xd9, 0x6b, 0xc7,
	0x93, 0x4d, 0xc7, 0x93, 0x8f, 0x8e, 0x27, 0xcf, 0x0f, 0x0b, 0x1d, 0x96, 0xcd, 0x2c, 0x57, 0x16,
	0x8b, 0x69, 0x70, 0x20, 0x71, 0xac, 0x8d, 0x34, 0x0a, 0x46, 0xe5, 0x77, 0x34, 0x1f, 0xcf, 0x23,
	0xb5, 0x94, 0xda, 0x14, 0x3f, 0x29, 0x57, 0xfb, 0x31, 0xc3, 0x9a, 0xc0, 0xcf, 0x06, 0x71, 0xbc,
	0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x45, 0x97, 0x88, 0x74, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinNumVotesPerSample != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MinNumVotesPerSample))
		i--
		dAtA[i] = 0x18
	}
	if m.PremiumVoteClampFactorPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PremiumVoteClampFactorPpm))
		i--
		dAtA[i] = 0x10
	}
	if m.FundingRateClampFactorPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FundingRateClampFactorPpm))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FundingRateClampFactorPpm != 0 {
		n += 1 + sovParams(uint64(m.FundingRateClampFactorPpm))
	}
	if m.PremiumVoteClampFactorPpm != 0 {
		n += 1 + sovParams(uint64(m.PremiumVoteClampFactorPpm))
	}
	if m.MinNumVotesPerSample != 0 {
		n += 1 + sovParams(uint64(m.MinNumVotesPerSample))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRateClampFactorPpm", wireType)
			}
			m.FundingRateClampFactorPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingRateClampFactorPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumVoteClampFactorPpm", wireType)
			}
			m.PremiumVoteClampFactorPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremiumVoteClampFactorPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNumVotesPerSample", wireType)
			}
			m.MinNumVotesPerSample = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNumVotesPerSample |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
