/// <reference types="node" />
import { Model } from 'objection';
import { IsoString, PositionSide, PerpetualPositionStatus } from '../types';
export default class PerpetualPositionModel extends Model {
    static get tableName(): string;
    static get idColumn(): string;
    static relationMappings: {
        subaccount: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        perpetualMarket: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        openTendermintEvent: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        closeTendermintEvent: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        lastTendermintEvent: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
    };
    static get jsonSchema(): {
        type: string;
        required: string[];
        properties: {
            id: {
                type: string;
                format: string;
            };
            subaccountId: {
                type: string;
                format: string;
            };
            perpetualId: {
                type: string;
                pattern: string;
            };
            side: {
                type: string;
                enum: PositionSide[];
            };
            status: {
                type: string;
                enum: PerpetualPositionStatus[];
            };
            size: {
                type: string;
                pattern: string;
            };
            maxSize: {
                type: string;
                pattern: string;
            };
            entryPrice: {
                type: string;
                pattern: string;
            };
            exitPrice: {
                type: string[];
                pattern: string;
                default: null;
            };
            sumOpen: {
                type: string;
                pattern: string;
            };
            sumClose: {
                type: string;
                pattern: string;
            };
            createdAt: {
                type: string;
                format: string;
            };
            closedAt: {
                type: string[];
                format: string;
                default: null;
            };
            createdAtHeight: {
                type: string;
                pattern: string;
            };
            closedAtHeight: {
                type: string[];
                default: null;
                pattern: string;
            };
            settledFunding: {
                type: string;
                pattern: string;
            };
        };
    };
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions(): {
        id: string;
        subaccountId: string;
        perpetualId: string;
        side: string;
        status: string;
        size: string;
        maxSize: string;
        entryPrice: string;
        exitPrice: string;
        sumOpen: string;
        sumClose: string;
        createdAt: string;
        closedAt: string;
        createdAtHeight: string;
        closedAtHeight: string;
        openEventId: string;
        closeEventId: string;
        lastEventId: string;
        settledFunding: string;
    };
    id: string;
    subaccountId: string;
    perpetualId: string;
    side: PositionSide;
    status: PerpetualPositionStatus;
    size: string;
    maxSize: string;
    entryPrice: string;
    exitPrice: string;
    sumOpen: string;
    sumClose: string;
    createdAt: IsoString;
    closedAt: IsoString;
    createdAtHeight: string;
    closedAtHeight: string;
    openEventId: Buffer;
    closeEventId?: Buffer;
    lastEventId: Buffer;
    settledFunding: string;
}
