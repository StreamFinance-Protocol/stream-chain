import * as t from '@babel/types';
import { getProtoFieldTypeName } from '../utils';
import { getFieldOptionalityForDefaults, GOOGLE_TYPES, SCALAR_TYPES } from './proto';
export const getFieldNames = field => {
  const propName = field.options?.['(telescope:name)'] ?? field.name;
  const origName = field.options?.['(telescope:orig)'] ?? field.name;
  return {
    propName,
    origName
  };
};
;
export const createProtoTypeOptionsDefaults = {
  useOriginalCase: false
};
export const getMessageName = (name, options = createProtoTypeOptionsDefaults) => {
  const MsgName = [options.typeNamePrefix, name, options.typeNameSuffix].filter(Boolean).join('');
  return MsgName;
};
export const getFieldTypeReference = (context, field, options = createProtoTypeOptionsDefaults) => {
  let ast = null;
  let typ = null;

  if (SCALAR_TYPES.includes(field.type)) {
    // return on scalar
    typ = getTSTypeForProto(context, field);
    return typ;
  } else if (GOOGLE_TYPES.includes(field.type)) {
    typ = getTSTypeFromGoogleType(context, field.type, options);
  } else {
    const propName = getProtoFieldTypeName(context, field);
    const MsgName = getMessageName(propName, options);
    typ = t.tsTypeReference(t.identifier(MsgName));
  }

  if (field.parsedType?.type === 'Type' && field.rule !== 'repeated' && context.pluginValue('prototypes.allowUndefinedTypes')) {
    // NOTE: unfortunately bc of defaults...
    ast = t.tsUnionType([typ, t.tsUndefinedKeyword()]);
  } else {
    ast = typ;
  }

  return ast;
};
export const getTSType = (context, type) => {
  switch (type) {
    case 'string':
      return t.tsStringKeyword();

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.tsNumberKeyword();

    case 'int64':
    case 'uint64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.tsTypeReference(t.identifier('Long'));

    case 'bytes':
      return t.tsTypeReference(t.identifier('Uint8Array'));

    case 'bool':
      return t.tsBooleanKeyword();

    default:
      throw new Error('getTSType() type not found');
  }

  ;
};
export const getTSTypeFromGoogleType = (context, type, options = createProtoTypeOptionsDefaults) => {
  const identifier = str => {
    return t.identifier(getMessageName(str, options));
  };

  switch (type) {
    case 'google.protobuf.Timestamp':
      switch (context.pluginValue('prototypes.typingsFormat.timestamp')) {
        case 'timestamp':
          return t.tsTypeReference(identifier('Timestamp'));

        case 'date':
        default:
          return t.tsTypeReference(t.identifier('Date'));
      }

    case 'google.protobuf.Duration':
      switch (context.pluginValue('prototypes.typingsFormat.duration')) {
        case 'duration':
          return t.tsTypeReference(identifier('Duration'));

        case 'string':
        default:
          return t.tsStringKeyword();
      }

    case 'google.protobuf.Any':
      return t.tsTypeReference(identifier('Any'));

    default:
      throw new Error('getTSTypeFromGoogleType() type not found');
  }

  ;
};
export const getTSTypeForAmino = (context, field) => {
  switch (field.type) {
    case 'bytes':
      // bytes [WASMByteCode]
      if (field.options?.['(gogoproto.customname)'] === 'WASMByteCode') {
        return t.tsStringKeyword();
      }

      return t.tsTypeReference(t.identifier('Uint8Array'));

    default:
      return getTSType(context, field.type);
  }

  ;
};
export const getTSTypeForProto = (context, field) => {
  return getTSType(context, field.type);
};
export const getDefaultTSTypeFromProtoType = (context, field, isOneOf) => {
  const isOptional = getFieldOptionalityForDefaults(context, field, isOneOf);

  if (isOptional) {
    return t.identifier('undefined');
  }

  if (field.rule === 'repeated') {
    return t.arrayExpression([]);
  }

  if (field.keyType) {
    return t.objectExpression([]);
  }

  if (field.parsedType?.type === 'Enum') {
    if (context.ref.proto?.syntax === 'proto2') {
      return t.numericLiteral(1);
    }

    return t.numericLiteral(0);
  }

  switch (field.type) {
    case 'string':
      return t.stringLiteral('');

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.numericLiteral(0);

    case 'uint64':
      return t.memberExpression(t.identifier('Long'), t.identifier('UZERO'));

    case 'int64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.memberExpression(t.identifier('Long'), t.identifier('ZERO'));

    case 'bytes':
      return t.newExpression(t.identifier('Uint8Array'), []);

    case 'bool':
      return t.booleanLiteral(false);
    // OTHER TYPES

    case 'google.protobuf.Timestamp':
      return t.identifier('undefined');

    case 'google.protobuf.Duration':
      return t.identifier('undefined');

    case 'google.protobuf.Any':
      return t.identifier('undefined');

    case 'cosmos.base.v1beta1.Coins':
      return t.arrayExpression([]);

    case 'cosmos.base.v1beta1.Coin':
      return t.identifier('undefined');

    default:
      // console.warn('getDefaultTSTypeFromProtoType() type not found: ' + type);
      return t.identifier('undefined');
  }

  ;
};