"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFeesPaid = exports.getClobPairs = exports.getOpenSizeWithFundingIndex = exports.getSettledFunding = exports.getOrderedFillsWithFundingIndices = exports.getTotalValueOfOpenPositions = exports.getCostOfFills = exports.get24HourInformation = exports.findById = exports.update = exports.create = exports.findAll = exports.uuid = void 0;
const big_js_1 = __importDefault(require("big.js"));
const lodash_1 = __importDefault(require("lodash"));
const luxon_1 = require("luxon");
const constants_1 = require("../constants");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const fill_model_1 = __importDefault(require("../models/fill-model"));
const types_1 = require("../types");
function uuid(eventId, liquidity) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${eventId.toString('hex')}-${liquidity}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ limit, id, subaccountId, side, liquidity, type, clobPairId, eventId, transactionHash, createdBeforeOrAtHeight, createdBeforeOrAt, createdOnOrAfterHeight, createdOnOrAfter, clientMetadata, fee, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        subaccountId,
        side,
        liquidity,
        type,
        clobPairId,
        eventId,
        transactionHash,
        createdBeforeOrAtHeight,
        createdBeforeOrAt,
        createdOnOrAfterHeight,
        createdOnOrAfter,
        clientMetadata,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(fill_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.FillColumns.id, id);
    }
    if (subaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.FillColumns.subaccountId, subaccountId);
    }
    if (side !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.side, side);
    }
    if (liquidity !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.liquidity, liquidity);
    }
    if (type !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.type, type);
    }
    if (clobPairId !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.clobPairId, clobPairId);
    }
    if (eventId !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.eventId, eventId);
    }
    if (transactionHash !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.transactionHash, transactionHash);
    }
    if (createdBeforeOrAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.createdAtHeight, '<=', createdBeforeOrAtHeight);
    }
    if (createdBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.createdAt, '<=', createdBeforeOrAt);
    }
    if (createdOnOrAfterHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.createdAtHeight, '>=', createdOnOrAfterHeight);
    }
    if (createdOnOrAfter !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.createdAt, '>=', createdOnOrAfter);
    }
    if (clientMetadata !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.clientMetadata, clientMetadata);
    }
    if (fee !== undefined) {
        baseQuery = baseQuery.where(types_1.FillColumns.fee, fee);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    baseQuery = baseQuery.orderBy(types_1.FillColumns.createdAtHeight, types_1.Ordering.DESC);
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(fillToCreate, options = { txId: undefined }) {
    return fill_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(fillToCreate.eventId, fillToCreate.liquidity),
        ...fillToCreate,
    }).returning('*');
}
exports.create = create;
async function update({ ...fields }, options = { txId: undefined }) {
    const fill = await fill_model_1.default.query(transaction_1.default.get(options.txId)).findById(fields.id).patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of fills.
    return fill;
}
exports.update = update;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(fill_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function get24HourInformation(perpetualMarketIds) {
    // Rename perpetualMarketId to clobPairId
    const oneDayAgo = luxon_1.DateTime.local().minus({ days: 1 }).toISO();
    const result = await knex_1.knexReadReplica.getConnection().raw(`SELECT
      "clobPairId",
      COUNT("createdAt") AS "trades24H",
      SUM("quoteAmount") AS "volume24H"
    FROM fills
    WHERE
      "liquidity"='TAKER'
      AND "createdAt">'${oneDayAgo}'
      AND type IN (
        'LIMIT',
        'MARKET',
        'STOP_LIMIT',
        'STOP_MARKET',
        'TRAILING_STOP',
        'TAKE_PROFIT',
        'TAKE_PROFIT_MARKET'
      )
      GROUP BY "clobPairId";
    `);
    const perpetualMarketStats24hr = lodash_1.default.keyBy(result.rows, types_1.FillColumns.clobPairId);
    lodash_1.default.forEach(perpetualMarketIds, (clobPairId) => {
        if (!perpetualMarketStats24hr[clobPairId]) {
            // no fills exist for this market
            perpetualMarketStats24hr[clobPairId] = {
                clobPairId,
                trades24H: '0',
                volume24H: '0',
            };
        }
    });
    return perpetualMarketStats24hr;
}
exports.get24HourInformation = get24HourInformation;
/**
 * Returns the cost of all fills for a given subaccount up to a given height.
 *
 * If the subaccount has spent $500 to buy 1 ETH, cost of fills will be -500.
 * If the subaccount shorted 1 ETH at $500, cost of fills will be 500.
 *
 * @param subaccountId
 * @param createdAtHeight
 */
async function getCostOfFills(subaccountId, createdAtHeight) {
    const result = await knex_1.knexReadReplica
        .getConnection()
        .raw(`
      SELECT SUM(CASE 
                  WHEN side = 'SELL' THEN price * size 
                  ELSE -1 * price * size 
                END) AS "cost"
      FROM fills 
      WHERE "subaccountId" = ?
        AND "createdAtHeight" <= ?;
      `, [subaccountId, createdAtHeight]);
    const pnlOfFills = result.rows[0]?.cost || 0;
    return (0, big_js_1.default)(pnlOfFills);
}
exports.getCostOfFills = getCostOfFills;
/**
 * Returns the total value of all open positions for a given subaccount at a given height.
 *
 * @param subaccountId
 * @param createdAtHeight
 */
async function getTotalValueOfOpenPositions(subaccountId, createdAtHeight) {
    const query = `
    SELECT
      SUM(f.open_size * p.price) AS total_sum
    FROM
      (
        SELECT
          "clobPairId",
          SUM(CASE
            WHEN side = 'SELL' THEN -1 * size
            ELSE size
          END) AS open_size
        FROM
          fills
        WHERE
          "subaccountId" = ?
          AND "createdAtHeight" <= ?
        GROUP BY "clobPairId"
      ) AS f
      JOIN (
        SELECT "clobPairId", "marketId"
        FROM "perpetual_markets"
      ) AS pm
      ON f."clobPairId" = pm."clobPairId"
      JOIN (
        SELECT DISTINCT ON ("marketId") *
        FROM "oracle_prices"
        WHERE "effectiveAtHeight" <= ?
        ORDER BY "marketId", "effectiveAtHeight" DESC
      ) AS p
      ON p."marketId" = pm."marketId";
  `;
    const result = await knex_1.knexReadReplica
        .getConnection()
        .raw(query, [subaccountId, createdAtHeight, createdAtHeight]);
    const totalSum = result.rows[0]?.total_sum || '0';
    return new big_js_1.default(totalSum);
}
exports.getTotalValueOfOpenPositions = getTotalValueOfOpenPositions;
/**
 * Returns the ordered fills with funding indices for a given clob pair and subaccount
 * prior to a given height.
 *
 * Fills will be paired with the last fill that occurred before it, and contain the latest
 * funding index at the time of the fill.
 *
 * @param clobPairId
 * @param subaccountId
 * @param effectiveBeforeHeight
 */
async function getOrderedFillsWithFundingIndices(clobPairId, subaccountId, effectiveBeforeHeight) {
    const result = await knex_1.knexReadReplica
        .getConnection()
        .raw(`
      WITH input AS (
        SELECT
          f.*,
          fiu."fundingIndex",
          LAG(f."id") OVER (PARTITION BY f."subaccountId", f."clobPairId" ORDER BY f."createdAtHeight") AS last_fill_id
        FROM
          "fills" f
        JOIN
          "perpetual_markets" pm ON f."clobPairId" = pm."clobPairId"
        JOIN
          "funding_index_updates" fiu ON pm."id" = fiu."perpetualId"
        WHERE
          f."subaccountId" = ?
          AND f."clobPairId" = ?
          AND f."createdAtHeight" <= ?
          AND fiu."effectiveAtHeight" = (
            SELECT
              MAX("effectiveAtHeight")
            FROM
              "funding_index_updates"
            WHERE
              "perpetualId" = pm."id"
              AND "effectiveAtHeight" <= f."createdAtHeight"
          )
        ORDER BY
          "createdAtHeight" ASC
      )
      SELECT
        current_fill."id" as "id",
        current_fill."subaccountId" as "subaccountId",
        current_fill."side" as "side",
        current_fill."size" as "size",
        current_fill."createdAtHeight" as "createdAtHeight",
        current_fill."fundingIndex" as "fundingIndex",
        last_fill."id" as "lastFillId",
        last_fill."side" as "lastFillSide",
        last_fill."size" as "lastFillSize",
        last_fill."createdAtHeight" as "lastFillCreatedAtHeight",
        last_fill."fundingIndex" as "lastFillFundingIndex"
      FROM
        input current_fill
      LEFT JOIN input last_fill ON current_fill."last_fill_id" = last_fill."id"
      where current_fill."last_fill_id" is not null
      ORDER BY
        current_fill."createdAtHeight" ASC;
      `, [subaccountId, clobPairId, effectiveBeforeHeight]);
    return result.rows;
}
exports.getOrderedFillsWithFundingIndices = getOrderedFillsWithFundingIndices;
/**
 * Returns the paid funding for a given set of ordered fills with funding indices.
 *
 * @param orderedFillsWithFundingIndices
 */
function getSettledFunding(orderedFillsWithFundingIndices) {
    if (orderedFillsWithFundingIndices.length === 0) {
        return (0, big_js_1.default)(0);
    }
    let paidFunding = (0, big_js_1.default)(0);
    let currentSize = (0, big_js_1.default)(orderedFillsWithFundingIndices[0].lastFillSize);
    for (const fill of orderedFillsWithFundingIndices) {
        if (fill.fundingIndex !== fill.lastFillFundingIndex) {
            const currFunding = (0, big_js_1.default)(fill.fundingIndex)
                .minus(fill.lastFillFundingIndex).times(currentSize);
            paidFunding = paidFunding.plus(currFunding);
        }
        currentSize = currentSize.plus(fill.side === types_1.OrderSide.BUY ? fill.size : -fill.size);
    }
    return paidFunding;
}
exports.getSettledFunding = getSettledFunding;
/**
 * Returns the open size with funding index for a given subaccount prior to a given height,
 * for each clob pair.
 *
 * This will be used to compute unsettled funding payments.
 *
 * @param subaccountId
 * @param effectiveBeforeHeight
 */
async function getOpenSizeWithFundingIndex(subaccountId, effectiveBeforeHeight) {
    const result = await knex_1.knexReadReplica
        .getConnection()
        .raw(`
      WITH input AS (
        SELECT 
          f."clobPairId",
          SUM(CASE
            WHEN side = 'SELL' THEN -1 * size
            ELSE size
          END) AS "openSize",
          MAX("createdAtHeight") as "lastFillHeight"
        FROM
          "fills" f
        WHERE
          f."subaccountId" = ?
          AND f."createdAtHeight" <= ?
        GROUP BY
          f."clobPairId"
      )
      SELECT 
        input.*,
        fiu."fundingIndex",
        fiu."effectiveAtHeight" as "fundingIndexHeight"
      FROM
        input
      JOIN
        "perpetual_markets" pm ON input."clobPairId" = pm."clobPairId"
      JOIN
        "funding_index_updates" fiu ON pm."id" = fiu."perpetualId"
      WHERE
        fiu."effectiveAtHeight" = (
          SELECT
            MAX("effectiveAtHeight")
          FROM
            "funding_index_updates"
          WHERE
            "perpetualId" = pm."id"
            AND "effectiveAtHeight" <= input."lastFillHeight"
        )
      ORDER BY input."clobPairId" ASC;
      `, [subaccountId, effectiveBeforeHeight]);
    return result.rows;
}
exports.getOpenSizeWithFundingIndex = getOpenSizeWithFundingIndex;
/**
 * Returns the unique clob pair ids for a given subaccount's fills prior to a given height.
 *
 * @param subaccountId
 * @param effectiveBeforeOrAtHeight
 * @param options
 */
async function getClobPairs(subaccountId, effectiveBeforeOrAtHeight, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(fill_model_1.default, options);
    const fills = await baseQuery
        .distinctOn(types_1.FillColumns.clobPairId)
        .where(types_1.FillColumns.createdAtHeight, '<=', effectiveBeforeOrAtHeight)
        .where(types_1.FillColumns.subaccountId, subaccountId)
        .orderBy(types_1.FillColumns.clobPairId, types_1.Ordering.ASC)
        .returning('*');
    return lodash_1.default.map(fills, (fill) => fill.clobPairId);
}
exports.getClobPairs = getClobPairs;
/**
 * Returns the fees paid for a given subaccount prior to a given height.
 *
 * @param subaccountId
 * @param effectiveBeforeOrAtHeight
 * @param options
 */
async function getFeesPaid(subaccountId, effectiveBeforeOrAtHeight) {
    const result = await knex_1.knexReadReplica
        .getConnection()
        .raw(`
      SELECT
        SUM(CAST(f."fee" AS NUMERIC)) as "feesPaid"
      FROM
        "fills" f
      WHERE
        f."subaccountId" = ?
        AND f."createdAtHeight" <= ?
      `, [subaccountId, effectiveBeforeOrAtHeight]);
    if (result.rows[0].feesPaid === null) {
        return (0, big_js_1.default)(0);
    }
    return (0, big_js_1.default)(result.rows[0].feesPaid);
}
exports.getFeesPaid = getFeesPaid;
//# sourceMappingURL=data:application/json;base64,