/// <reference types="node" />
import Knex from 'knex';
import { Model, ModelClass, QueryBuilderType } from 'objection';
import { QueryConfig, QueryableField, Options } from '../types';
export declare function verifyAllRequiredFields(query: QueryConfig, requiredFields: QueryableField[]): void;
export declare function verifyAllInjectableVariables(vals: (string | number | undefined | null)[]): void;
export declare function setupBaseQuery<T extends Model>(model: ModelClass<T>, options: Options): QueryBuilderType<T>;
export declare function rawQuery(queryString: string, options: Options): Promise<Knex.Raw<any>>;
export declare function setBulkRowsForUpdate<T extends string>({ objectArray, columns, stringColumns, numericColumns, bigintColumns, timestampColumns, uuidColumns, booleanColumns, binaryColumns, }: {
    objectArray: Partial<Record<T, string | number | boolean | Buffer | null>>[];
    columns: T[];
    stringColumns?: T[];
    numericColumns?: T[];
    bigintColumns?: T[];
    timestampColumns?: T[];
    uuidColumns?: T[];
    booleanColumns?: T[];
    binaryColumns?: T[];
}): string[];
export declare function generateBulkUpdateString({ table, objectRows, columns, isUuid, uniqueIdentifier, setFieldsToAppend, }: {
    table: string;
    objectRows: string[];
    columns: string[];
    isUuid: boolean;
    uniqueIdentifier?: string;
    setFieldsToAppend?: string[];
}): string;
export declare function generateBulkUpsertString({ table, objectRows, columns, uniqueIdentifiers, }: {
    table: string;
    objectRows: string[];
    columns: string[];
    uniqueIdentifiers?: string[];
}): string;
