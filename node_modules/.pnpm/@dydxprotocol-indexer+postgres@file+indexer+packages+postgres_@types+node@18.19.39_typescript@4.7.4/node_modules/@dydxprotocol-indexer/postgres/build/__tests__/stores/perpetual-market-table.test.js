"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const PerpetualMarketTable = __importStar(require("../../src/stores/perpetual-market-table"));
const LiquidityTiersTable = __importStar(require("../../src/stores/liquidity-tiers-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const constants_1 = require("../helpers/constants");
const MarketTable = __importStar(require("../../src/stores/market-table"));
describe('PerpetualMarket store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    beforeEach(async () => {
        await Promise.all([
            MarketTable.create(constants_1.defaultMarket),
            MarketTable.create(constants_1.defaultMarket2),
        ]);
        await Promise.all([
            LiquidityTiersTable.create(constants_1.defaultLiquidityTier),
            LiquidityTiersTable.create(constants_1.defaultLiquidityTier2),
        ]);
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a PerpetualMarket', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
    });
    it('Successfully finds all PerpetualMarkets', async () => {
        await Promise.all([
            PerpetualMarketTable.create(constants_1.defaultPerpetualMarket),
            PerpetualMarketTable.create({
                ...constants_1.defaultPerpetualMarket,
                id: '1',
            }),
        ]);
        const perpetualMarkets = await PerpetualMarketTable.findAll({}, [], { readReplica: true });
        expect(perpetualMarkets.length).toEqual(2);
        expect(perpetualMarkets[0]).toEqual(expect.objectContaining(constants_1.defaultPerpetualMarket));
        expect(perpetualMarkets[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualMarket,
            id: '1',
        }));
    });
    it('Successfully finds a PerpetualMarket', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .findById('0');
        expect(perpetualMarket).toEqual(expect.objectContaining(constants_1.defaultPerpetualMarket));
    });
    it('Successfully finds a PerpetualMarket by market id', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .findByMarketId(constants_1.defaultMarket.id);
        expect(perpetualMarket).toEqual(expect.objectContaining(constants_1.defaultPerpetualMarket));
    });
    it('Successfully finds a PerpetualMarket by clob pair id', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .findByClobPairId('1');
        expect(perpetualMarket).toEqual(expect.objectContaining(constants_1.defaultPerpetualMarket));
    });
    it('Unable finds a PerpetualMarket', async () => {
        const perpetualMarket = await PerpetualMarketTable
            .findById('0');
        expect(perpetualMarket).toEqual(undefined);
    });
    it('Unable finds a PerpetualMarket by market id', async () => {
        const perpetualMarket = await PerpetualMarketTable
            .findByMarketId(constants_1.defaultMarket.id);
        expect(perpetualMarket).toEqual(undefined);
    });
    it.each([
        ['market with ticker exists', constants_1.defaultPerpetualMarket.ticker, constants_1.defaultPerpetualMarket],
        ['market with ticker does not exist', constants_1.invalidTicker, undefined],
    ])('Finds a PerpetualMarket by ticker: %s', async (_name, ticker, expectedPerpetualMarket) => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .findByTicker(ticker);
        if (expectedPerpetualMarket !== undefined) {
            expect(perpetualMarket).toEqual(expect.objectContaining(constants_1.defaultPerpetualMarket));
        }
        else {
            expect(perpetualMarket).toEqual(expectedPerpetualMarket);
        }
    });
    it('Successfully updates a perpetual market', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .update({
            id: constants_1.defaultPerpetualMarket.id,
            trades24H: 100,
        });
        expect(perpetualMarket).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualMarket,
            trades24H: 100,
        }));
    });
    it('Successfully winds down a perpetual market', async () => {
        await PerpetualMarketTable.create(constants_1.defaultPerpetualMarket);
        const perpetualMarket = await PerpetualMarketTable
            .update({
            id: constants_1.defaultPerpetualMarket.id,
            status: types_1.PerpetualMarketStatus.FINAL_SETTLEMENT,
        });
        expect(perpetualMarket).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualMarket,
            status: types_1.PerpetualMarketStatus.FINAL_SETTLEMENT,
        }));
    });
    it('Successfully updates a perpetual market by market id', async () => {
        const market = {
            id: 5,
            pair: 'DYDX-USD',
            exponent: -5,
            minPriceChangePpm: 50,
        };
        await MarketTable.create(market);
        await PerpetualMarketTable.create({
            ...constants_1.defaultPerpetualMarket,
            marketId: 5,
        });
        const perpetualMarket = await PerpetualMarketTable
            .updateByMarketId({
            marketId: 5,
            trades24H: 100,
        });
        expect(perpetualMarket).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualMarket,
            marketId: 5,
            trades24H: 100,
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLW1hcmtldC10YWJsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX190ZXN0c19fL3N0b3Jlcy9wZXJwZXR1YWwtbWFya2V0LXRhYmxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUF5RztBQUN6Ryw4RkFBZ0Y7QUFDaEYsNEZBQThFO0FBQzlFLDZEQUE0RTtBQUM1RSxvREFPOEI7QUFDOUIsMkVBQTZEO0FBRTdELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxvQkFBTyxHQUFFLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLFdBQVcsQ0FBQyxNQUFNLENBQUMseUJBQWEsQ0FBQztZQUNqQyxXQUFXLENBQUMsTUFBTSxDQUFDLDBCQUFjLENBQUM7U0FDbkMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxnQ0FBb0IsQ0FBQztZQUNoRCxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsaUNBQXFCLENBQUM7U0FDbEQsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLHNCQUFTLEdBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUEscUJBQVEsR0FBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RELE1B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