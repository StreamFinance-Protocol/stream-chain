"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
const types_1 = require("../types");
class FillModel extends objection_1.Model {
    static get tableName() {
        return 'fills';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'subaccountId',
                'side',
                'liquidity',
                'type',
                'clobPairId',
                'orderId',
                'size',
                'price',
                'quoteAmount',
                'eventId',
                'transactionHash',
                'createdAt',
                'createdAtHeight',
                'fee',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                subaccountId: { type: 'string', format: 'uuid' },
                side: { type: 'string', enum: [...Object.values(types_1.OrderSide)] },
                liquidity: { type: 'string', enum: [...Object.values(types_1.Liquidity)] },
                type: { type: 'string', enum: [...Object.values(types_1.FillType)] },
                clobPairId: { type: 'string', pattern: validators_1.IntegerPattern },
                orderId: { type: ['string', 'null'], default: null, format: 'uuid' },
                size: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                price: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                quoteAmount: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                transactionHash: { type: 'string' },
                createdAt: { type: 'string', format: 'date-time' },
                createdAtHeight: { type: 'string', pattern: validators_1.IntegerPattern },
                clientMetadata: { type: ['string', 'null'], pattern: validators_1.IntegerPattern },
                fee: { type: 'string', pattern: validators_1.NumericPattern },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            subaccountId: 'string',
            side: 'string',
            liquidity: 'string',
            type: 'string',
            clobPairId: 'string',
            orderId: 'string',
            size: 'string',
            price: 'string',
            quoteAmount: 'string',
            eventId: 'hex-string',
            transactionHash: 'string',
            createdAt: 'date-time',
            createdAtHeight: 'string',
            clientMetadata: 'string',
            fee: 'string',
        };
    }
}
exports.default = FillModel;
FillModel.relationMappings = {
    subaccounts: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'subaccount-model'),
        join: {
            from: 'fills.subaccountId',
            to: 'subaccounts.id',
        },
    },
    tendermintEvents: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'fills.eventId',
            to: 'tendermint_events.id',
        },
    },
    blocks: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'block-model'),
        join: {
            from: 'fills.createdAtHeight',
            to: 'blocks.blockHeight',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsbC1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvZmlsbC1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUV4Qix5Q0FBa0M7QUFFbEMsa0RBSTJCO0FBQzNCLG9DQUtrQjtBQUVsQixNQUFxQixTQUFVLFNBQVEsaUJBQUs7SUFDMUMsTUFBTSxLQUFLLFNBQVM7UUFDbEIsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE1BQU0sS0FBSyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQTZCRCxNQUFNLEtBQUssVUFBVTtRQUNuQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSTtnQkFDSixjQUFjO2dCQUNkLE1BQU07Z0JBQ04sV0FBVztnQkFDWCxNQUFNO2dCQUNOLFlBQVk7Z0JBQ1osU0FBUztnQkFDVCxNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsYUFBYTtnQkFDYixTQUFTO2dCQUNULGlCQUFpQjtnQkFDakIsV0FBVztnQkFDWCxpQkFBaUI7Z0JBQ2pCLEtBQUs7YUFDTjtZQUNELFVBQVUsRUFBRTtnQkFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ3RDLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDaEQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdELFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsQ0FBQyxFQUFFO2dC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