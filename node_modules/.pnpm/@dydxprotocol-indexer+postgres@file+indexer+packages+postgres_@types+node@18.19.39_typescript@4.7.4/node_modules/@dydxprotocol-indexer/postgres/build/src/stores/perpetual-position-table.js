"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkUpdateSubaccountFields = exports.bulkCreate = exports.getOpenInterestLong = exports.closePositionUpdateObject = exports.closePosition = exports.findOpenPositionsForSubaccounts = exports.findOpenPositionForSubaccountPerpetual = exports.findById = exports.update = exports.create = exports.findAll = exports.uuid = void 0;
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const error_helpers_1 = require("../helpers/error-helpers");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const perpetual_position_model_1 = __importDefault(require("../models/perpetual-position-model"));
const types_1 = require("../types");
const DEFAULT_CREATE_FIELDS = {
    sumOpen: '0',
    sumClose: '0',
    entryPrice: '0',
};
const DEFAULT_SUBACCOUNT_UPDATE_DEFAULT_POSITION_FIELDS = {
    closedAt: null,
    closedAtHeight: null,
    closeEventId: null,
};
function uuid(subaccountId, openEventId) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${subaccountId}-${openEventId.toString('hex')}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ id, subaccountId, perpetualId, side, status, createdBeforeOrAtHeight, createdBeforeOrAt, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        subaccountId,
        perpetualId,
        side,
        status,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_position_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualPositionColumns.id, id);
    }
    if (subaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualPositionColumns.subaccountId, subaccountId);
    }
    if (perpetualId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualPositionColumns.perpetualId, perpetualId);
    }
    if (side !== undefined) {
        baseQuery = baseQuery.where(types_1.PerpetualPositionColumns.side, side);
    }
    if (status !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualPositionColumns.status, status);
    }
    if (createdBeforeOrAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.PerpetualPositionColumns.createdAtHeight, '<=', createdBeforeOrAtHeight);
    }
    if (createdBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.PerpetualPositionColumns.createdAt, '<=', createdBeforeOrAt);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.PerpetualPositionColumns.subaccountId, types_1.Ordering.ASC).orderBy(types_1.PerpetualPositionColumns.openEventId, types_1.Ordering.DESC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(perpetualPosition, options = { txId: undefined }) {
    const perpetualPositionToCreate = {
        ...DEFAULT_CREATE_FIELDS,
        ...perpetualPosition,
    };
    return perpetual_position_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(perpetualPositionToCreate.subaccountId, perpetualPositionToCreate.openEventId),
        ...perpetualPositionToCreate,
    }).returning('*');
}
exports.create = create;
async function update({ id, ...fields }, options = { txId: undefined }) {
    const perpetualPosition = await perpetual_position_model_1.default.query(transaction_1.default.get(options.txId)).findById(id).patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of perpetual positions.
    return perpetualPosition;
}
exports.update = update;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_position_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findOpenPositionForSubaccountPerpetual(subaccountId, perpetualId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const positions = await findAll({
        subaccountId: [subaccountId],
        perpetualId: [perpetualId],
        status: [types_1.PerpetualPositionStatus.OPEN],
    }, [], options);
    if (positions.length === 0) {
        return undefined;
    }
    return positions[0];
}
exports.findOpenPositionForSubaccountPerpetual = findOpenPositionForSubaccountPerpetual;
async function findOpenPositionsForSubaccounts(subaccountIds, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const positions = await findAll({
        subaccountId: subaccountIds,
        status: [types_1.PerpetualPositionStatus.OPEN],
    }, [], options);
    if (positions.length === 0) {
        return {};
    }
    return lodash_1.default.reduce(positions, (acc, position) => {
        const { subaccountId, perpetualId } = position;
        acc[subaccountId] = acc[subaccountId] || {};
        acc[subaccountId][perpetualId] = position;
        return acc;
    }, {});
}
exports.findOpenPositionsForSubaccounts = findOpenPositionsForSubaccounts;
async function closePosition(existingPosition, perpetualPositionCloseObject, options = { txId: undefined }) {
    const updateObject = closePositionUpdateObject(existingPosition, perpetualPositionCloseObject);
    return update(updateObject, options);
}
exports.closePosition = closePosition;
/**
 * Validates close position and returns the update object to update the position.
 */
function closePositionUpdateObject(existingPosition, perpetualPositionCloseObject) {
    validateClosePosition(existingPosition);
    return {
        id: perpetualPositionCloseObject.id,
        closedAt: perpetualPositionCloseObject.closedAt,
        closedAtHeight: perpetualPositionCloseObject.closedAtHeight,
        closeEventId: perpetualPositionCloseObject.closeEventId,
        lastEventId: perpetualPositionCloseObject.closeEventId,
        settledFunding: perpetualPositionCloseObject.settledFunding,
        status: types_1.PerpetualPositionStatus.CLOSED,
        size: '0',
    };
}
exports.closePositionUpdateObject = closePositionUpdateObject;
/**
 * Throws an error if the position to close is already closed.
 * @param existingPosition
 */
function validateClosePosition(existingPosition) {
    if (existingPosition.status === types_1.PerpetualPositionStatus.CLOSED) {
        (0, error_helpers_1.logAndThrowValidationError)('Unable to close because position is closed');
    }
}
// TODO(DEC-1821): Fix getOpenInterestLong to only return data for the ids requested
async function getOpenInterestLong(perpetualMarketIds) {
    if (perpetualMarketIds.length === 0) {
        return {};
    }
    const perpetualMarketIdsSqlArray = `(${perpetualMarketIds.join(',')})`;
    const result = await knex_1.knexReadReplica.getConnection().raw(`SELECT
      "perpetualId" AS "perpetualMarketId",
      sum(size) AS "openInterest"
    FROM perpetual_positions
    WHERE "side"='LONG'
      AND "status"='OPEN'
      AND "perpetualId" IN ${perpetualMarketIdsSqlArray}
    GROUP BY "perpetualId";
    `);
    const openInterestStats = lodash_1.default.keyBy(result.rows, 'perpetualMarketId');
    Object.values(perpetualMarketIds).forEach((perpetualMarketId) => {
        if (!openInterestStats[perpetualMarketId]) {
            // no positions exist for this market, set to 0
            openInterestStats[perpetualMarketId] = {
                perpetualMarketId,
                openInterest: '0',
            };
        }
    });
    return openInterestStats;
}
exports.getOpenInterestLong = getOpenInterestLong;
async function bulkCreate(positions, options = { txId: undefined }) {
    const perpetualPositionsToCreate = lodash_1.default.map(positions, (position) => {
        return {
            ...DEFAULT_CREATE_FIELDS,
            ...position,
        };
    });
    return perpetual_position_model_1.default.query(transaction_1.default.get(options.txId)).insert(perpetualPositionsToCreate.map((position) => ({
        id: uuid(position.subaccountId, position.openEventId),
        ...position,
    }))).returning('*');
}
exports.bulkCreate = bulkCreate;
/**
 * Bulk update for processing SubaccountUpdateEvents. Updates the following fields:
 * - closedAt
 * - closedAtHeight
 * - closeEventId
 * - lastEventId
 * - settledFunding
 * - status
 * - size
 * - maxSize
 * maxSize is calculated algorithmically based on the previous maxSize and the new size.
 */
async function bulkUpdateSubaccountFields(positions, options = { txId: undefined }) {
    if (positions.length === 0) {
        return;
    }
    const positionUpdatesWithDefaultValues = lodash_1.default.map(positions, (position) => {
        return {
            ...DEFAULT_SUBACCOUNT_UPDATE_DEFAULT_POSITION_FIELDS,
            ...position,
            [types_1.PerpetualPositionColumns.perpetualId]: undefined,
        };
    });
    positionUpdatesWithDefaultValues.forEach((position) => (0, stores_helpers_1.verifyAllInjectableVariables)(Object.values(position)));
    const columns = [
        types_1.PerpetualPositionColumns.id,
        types_1.PerpetualPositionColumns.closedAt,
        types_1.PerpetualPositionColumns.closedAtHeight,
        types_1.PerpetualPositionColumns.closeEventId,
        types_1.PerpetualPositionColumns.lastEventId,
        types_1.PerpetualPositionColumns.settledFunding,
        types_1.PerpetualPositionColumns.status,
        types_1.PerpetualPositionColumns.size,
    ];
    const positionRows = (0, stores_helpers_1.setBulkRowsForUpdate)({
        objectArray: positionUpdatesWithDefaultValues,
        columns,
        stringColumns: [
            types_1.PerpetualPositionColumns.id,
            types_1.PerpetualPositionColumns.status,
        ],
        numericColumns: [
            types_1.PerpetualPositionColumns.settledFunding,
            types_1.PerpetualPositionColumns.size,
        ],
        bigintColumns: [
            types_1.PerpetualPositionColumns.closedAtHeight,
        ],
        timestampColumns: [
            types_1.PerpetualPositionColumns.closedAt,
        ],
        binaryColumns: [
            types_1.PerpetualPositionColumns.closeEventId,
            types_1.PerpetualPositionColumns.lastEventId,
        ],
    });
    const query = (0, stores_helpers_1.generateBulkUpdateString)({
        table: perpetual_position_model_1.default.tableName,
        objectRows: positionRows,
        columns,
        isUuid: true,
        uniqueIdentifier: types_1.PerpetualPositionColumns.id,
        setFieldsToAppend: [
            `"${types_1.PerpetualPositionColumns.maxSize}" = GREATEST("${types_1.PerpetualPositionColumns.maxSize}", c."${types_1.PerpetualPositionColumns.size}")`,
        ],
    });
    const transaction = transaction_1.default.get(options.txId);
    return transaction
        ? knex_1.knexPrimary.raw(query).transacting(transaction)
        : knex_1.knexPrimary.raw(query);
}
exports.bulkUpdateSubaccountFields = bulkUpdateSubaccountFields;
//# sourceMappingURL=data:application/json;base64,