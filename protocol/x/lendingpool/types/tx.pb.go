// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/lendingpool/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetLimitParams is the Msg/SetLimitParams request type.
type MsgDepositLiquidityIntoPool struct {
	// The liquidity provider wallet address.
	LiquidityProvider string `protobuf:"bytes,1,opt,name=liquidityProvider,proto3" json:"liquidityProvider,omitempty"`
	// The token denom to deposit.
	TokenDenom string `protobuf:"bytes,2,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	// The amount to deposit.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgDepositLiquidityIntoPool) Reset()         { *m = MsgDepositLiquidityIntoPool{} }
func (m *MsgDepositLiquidityIntoPool) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLiquidityIntoPool) ProtoMessage()    {}
func (*MsgDepositLiquidityIntoPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{0}
}
func (m *MsgDepositLiquidityIntoPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLiquidityIntoPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLiquidityIntoPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLiquidityIntoPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLiquidityIntoPool.Merge(m, src)
}
func (m *MsgDepositLiquidityIntoPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLiquidityIntoPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLiquidityIntoPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLiquidityIntoPool proto.InternalMessageInfo

func (m *MsgDepositLiquidityIntoPool) GetLiquidityProvider() string {
	if m != nil {
		return m.LiquidityProvider
	}
	return ""
}

func (m *MsgDepositLiquidityIntoPool) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *MsgDepositLiquidityIntoPool) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgDepositLiquidityIntoPoolResponse is the Msg/DepositLiquidityIntoPool response type.
type MsgDepositLiquidityIntoPoolResponse struct {
}

func (m *MsgDepositLiquidityIntoPoolResponse) Reset()         { *m = MsgDepositLiquidityIntoPoolResponse{} }
func (m *MsgDepositLiquidityIntoPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLiquidityIntoPoolResponse) ProtoMessage()    {}
func (*MsgDepositLiquidityIntoPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{1}
}
func (m *MsgDepositLiquidityIntoPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLiquidityIntoPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLiquidityIntoPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLiquidityIntoPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLiquidityIntoPoolResponse.Merge(m, src)
}
func (m *MsgDepositLiquidityIntoPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLiquidityIntoPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLiquidityIntoPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLiquidityIntoPoolResponse proto.InternalMessageInfo

// MsgWithdrawLiquidityFromPool is the Msg/WithdrawLiquidityFromPool request type.
type MsgWithdrawLiquidityFromPool struct {
	// The liquidity provider wallet address.
	LiquidityProvider string `protobuf:"bytes,1,opt,name=liquidityProvider,proto3" json:"liquidityProvider,omitempty"`
	// The token denom to deposit.
	TokenDenom string `protobuf:"bytes,2,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	// The amount to deposit.
	Amount string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgWithdrawLiquidityFromPool) Reset()         { *m = MsgWithdrawLiquidityFromPool{} }
func (m *MsgWithdrawLiquidityFromPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLiquidityFromPool) ProtoMessage()    {}
func (*MsgWithdrawLiquidityFromPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{2}
}
func (m *MsgWithdrawLiquidityFromPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLiquidityFromPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLiquidityFromPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLiquidityFromPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLiquidityFromPool.Merge(m, src)
}
func (m *MsgWithdrawLiquidityFromPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLiquidityFromPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLiquidityFromPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLiquidityFromPool proto.InternalMessageInfo

func (m *MsgWithdrawLiquidityFromPool) GetLiquidityProvider() string {
	if m != nil {
		return m.LiquidityProvider
	}
	return ""
}

func (m *MsgWithdrawLiquidityFromPool) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *MsgWithdrawLiquidityFromPool) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgWithdrawLiquidityFromPoolResponse is the Msg/WithdrawLiquidityFromPool response type.
type MsgWithdrawLiquidityFromPoolResponse struct {
}

func (m *MsgWithdrawLiquidityFromPoolResponse) Reset()         { *m = MsgWithdrawLiquidityFromPoolResponse{} }
func (m *MsgWithdrawLiquidityFromPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLiquidityFromPoolResponse) ProtoMessage()    {}
func (*MsgWithdrawLiquidityFromPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{3}
}
func (m *MsgWithdrawLiquidityFromPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLiquidityFromPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLiquidityFromPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLiquidityFromPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLiquidityFromPoolResponse.Merge(m, src)
}
func (m *MsgWithdrawLiquidityFromPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLiquidityFromPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLiquidityFromPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLiquidityFromPoolResponse proto.InternalMessageInfo

// MsgSetPoolParams is the Msg/SetPoolParams request type.
type MsgSetPoolParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The token denom to set the pool parameters for.
	TokenDenom string `protobuf:"bytes,2,opt,name=tokenDenom,proto3" json:"tokenDenom,omitempty"`
	// Defines the parameters to set. All parameters must be supplied.
	PoolParams PoolParams `protobuf:"bytes,3,opt,name=pool_params,json=poolParams,proto3" json:"pool_params"`
}

func (m *MsgSetPoolParams) Reset()         { *m = MsgSetPoolParams{} }
func (m *MsgSetPoolParams) String() string { return proto.CompactTextString(m) }
func (*MsgSetPoolParams) ProtoMessage()    {}
func (*MsgSetPoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{4}
}
func (m *MsgSetPoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPoolParams.Merge(m, src)
}
func (m *MsgSetPoolParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPoolParams proto.InternalMessageInfo

func (m *MsgSetPoolParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgSetPoolParams) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *MsgSetPoolParams) GetPoolParams() PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return PoolParams{}
}

// MsgSetPoolParamsResponse is the Msg/SetPoolParams response type.
type MsgSetPoolParamsResponse struct {
}

func (m *MsgSetPoolParamsResponse) Reset()         { *m = MsgSetPoolParamsResponse{} }
func (m *MsgSetPoolParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPoolParamsResponse) ProtoMessage()    {}
func (*MsgSetPoolParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60095c300d330800, []int{5}
}
func (m *MsgSetPoolParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPoolParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPoolParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPoolParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPoolParamsResponse.Merge(m, src)
}
func (m *MsgSetPoolParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPoolParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPoolParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPoolParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDepositLiquidityIntoPool)(nil), "dydxprotocol.lendingpool.MsgDepositLiquidityIntoPool")
	proto.RegisterType((*MsgDepositLiquidityIntoPoolResponse)(nil), "dydxprotocol.lendingpool.MsgDepositLiquidityIntoPoolResponse")
	proto.RegisterType((*MsgWithdrawLiquidityFromPool)(nil), "dydxprotocol.lendingpool.MsgWithdrawLiquidityFromPool")
	proto.RegisterType((*MsgWithdrawLiquidityFromPoolResponse)(nil), "dydxprotocol.lendingpool.MsgWithdrawLiquidityFromPoolResponse")
	proto.RegisterType((*MsgSetPoolParams)(nil), "dydxprotocol.lendingpool.MsgSetPoolParams")
	proto.RegisterType((*MsgSetPoolParamsResponse)(nil), "dydxprotocol.lendingpool.MsgSetPoolParamsResponse")
}

func init() { proto.RegisterFile("dydxprotocol/lendingpool/tx.proto", fileDescriptor_60095c300d330800) }

var fileDescriptor_60095c300d330800 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0x33, 0xbf, 0xfc, 0x2c, 0x74, 0x8a, 0xa2, 0x4b, 0xa9, 0xdb, 0xb5, 0xac, 0x1a, 0xab,
	0x48, 0x20, 0xbb, 0x18, 0xd1, 0x43, 0x41, 0xc1, 0x50, 0x02, 0x52, 0x03, 0x61, 0x73, 0x10, 0xbc,
	0x94, 0xed, 0xee, 0x30, 0x19, 0xdc, 0x9d, 0x67, 0x9d, 0x99, 0xd4, 0xe4, 0x26, 0xbe, 0x82, 0x82,
	0xef, 0xc1, 0x9b, 0xd0, 0x83, 0xfa, 0x1a, 0x7a, 0x2c, 0x9e, 0x3c, 0x89, 0x24, 0x87, 0xbe, 0x0d,
	0xd9, 0xbf, 0x49, 0x2c, 0xbb, 0x4a, 0x4f, 0x5e, 0x92, 0x7d, 0xbe, 0xcf, 0xbf, 0xcf, 0xc3, 0x3c,
	0x3c, 0xf8, 0xb6, 0x3f, 0xf1, 0xc7, 0x91, 0x00, 0x05, 0x1e, 0x04, 0x76, 0x40, 0xb8, 0xcf, 0x38,
	0x8d, 0x00, 0x02, 0x5b, 0x8d, 0xad, 0x44, 0xd7, 0xf4, 0xc5, 0x10, 0x6b, 0x21, 0xc4, 0xb8, 0xee,
	0x81, 0x0c, 0x41, 0xda, 0xa1, 0xa4, 0xf6, 0xe1, 0x83, 0xf8, 0x2f, 0x4d, 0x31, 0x36, 0x53, 0xc7,
	0x7e, 0x62, 0xd9, 0xa9, 0x91, 0xb9, 0xd6, 0x29, 0x50, 0x48, 0xf5, 0xf8, 0x2b, 0x53, 0x9b, 0xa5,
	0x18, 0xf1, 0xcf, 0x7e, 0xe4, 0x0a, 0x37, 0xcc, 0x2a, 0x34, 0xbe, 0x20, 0x7c, 0xa3, 0x27, 0xe9,
	0x2e, 0x89, 0x40, 0x32, 0xf5, 0x82, 0xbd, 0x19, 0x31, 0x9f, 0xa9, 0xc9, 0x73, 0xae, 0xa0, 0x0f,
	0x10, 0x68, 0x5d, 0x7c, 0x2d, 0xc8, 0xc5, 0xbe, 0x80, 0x43, 0xe6, 0x13, 0xa1, 0xa3, 0x5b, 0xe8,
	0xfe, 0x6a, 0x47, 0xff, 0xf6, 0xb9, 0xb5, 0x9e, 0xe1, 0x3c, 0xf3, 0x7d, 0x41, 0xa4, 0x1c, 0x28,
	0xc1, 0x38, 0x75, 0xce, 0xa7, 0x68, 0x26, 0xc6, 0x0a, 0x5e, 0x13, 0xbe, 0x4b, 0x38, 0x84, 0xfa,
	0x7f, 0x71, 0x01, 0x67, 0x41, 0xd1, 0x36, 0xf0, 0x8a, 0x1b, 0xc2, 0x88, 0x2b, 0xbd, 0x9e, 0xf8,
	0x32, 0x6b, 0x67, 0xe3, 0xfd, 0xd9, 0x71, 0xf3, 0x7c, 0xbd, 0xc6, 0x5d, 0x7c, 0xa7, 0x02, 0xdb,
	0x21, 0x32, 0x02, 0x2e, 0x49, 0xe3, 0x2b, 0xc2, 0x5b, 0x3d, 0x49, 0x5f, 0x32, 0x35, 0xf4, 0x85,
	0xfb, 0xb6, 0x08, 0xec, 0x0a, 0x08, 0xff, 0xe9, 0xf9, 0xee, 0xe1, 0xed, 0x2a, 0xee, 0x62, 0xc0,
	0x4f, 0x08, 0x5f, 0xed, 0x49, 0x3a, 0x20, 0x2a, 0x96, 0xfb, 0xc9, 0xd3, 0x6a, 0x5b, 0x78, 0xd5,
	0x1d, 0xa9, 0x21, 0x08, 0xa6, 0x26, 0xe9, 0x30, 0xce, 0x5c, 0xf8, 0x23, 0xea, 0x1e, 0x5e, 0x5b,
	0xd8, 0x93, 0x84, 0x77, 0xad, 0xbd, 0x6d, 0x95, 0x2d, 0xae, 0x35, 0x6f, 0xdc, 0xf9, 0xff, 0xe4,
	0xc7, 0xcd, 0x9a, 0x83, 0xa3, 0x42, 0xd9, 0xb9, 0x12, 0xcf, 0x37, 0x6f, 0xde, 0x30, 0xb0, 0xfe,
	0x3b, 0x6e, 0x3e, 0x4b, 0xfb, 0x63, 0x1d, 0xd7, 0x7b, 0x92, 0x6a, 0x47, 0x08, 0xeb, 0xa5, 0x0b,
	0xf9, 0xa8, 0x1c, 0xa4, 0x62, 0x21, 0x8c, 0x27, 0x17, 0x4a, 0xcb, 0xd1, 0xb4, 0x0f, 0x08, 0x6f,
	0x96, 0x2f, 0xd1, 0xe3, 0xca, 0xe2, 0xa5, 0x79, 0xc6, 0xd3, 0x8b, 0xe5, 0x15, 0x54, 0x80, 0x2f,
	0x2f, 0x3f, 0x7c, 0xb3, 0xb2, 0xe0, 0x52, 0xac, 0xd1, 0xfe, 0xfb, 0xd8, 0xbc, 0xa1, 0x71, 0xe9,
	0xdd, 0xd9, 0x71, 0x13, 0x75, 0xc8, 0xc9, 0xd4, 0x44, 0xa7, 0x53, 0x13, 0xfd, 0x9c, 0x9a, 0xe8,
	0x68, 0x66, 0xd6, 0x4e, 0x67, 0x66, 0xed, 0xfb, 0xcc, 0xac, 0xbd, 0xda, 0xa3, 0x4c, 0x0d, 0x47,
	0x07, 0x96, 0x07, 0xa1, 0x3d, 0x50, 0x82, 0xb8, 0x61, 0x97, 0x71, 0x97, 0x7b, 0xa4, 0xd5, 0xcf,
	0xef, 0x91, 0x4c, 0xe4, 0x96, 0x37, 0x74, 0x19, 0xb7, 0x8b, 0x2b, 0x35, 0x5e, 0x3e, 0x97, 0x93,
	0x88, 0xc8, 0x83, 0x95, 0xc4, 0xfb, 0xf0, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb4, 0x78, 0x7b,
	0x1a, 0x57, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DepositLiquidityIntoPool deposits liquidity into a pool.
	DepositLiquidityIntoPool(ctx context.Context, in *MsgDepositLiquidityIntoPool, opts ...grpc.CallOption) (*MsgDepositLiquidityIntoPoolResponse, error)
	// WithdrawLiquidityFromPool withdraws liquidity from a pool.
	WithdrawLiquidityFromPool(ctx context.Context, in *MsgWithdrawLiquidityFromPool, opts ...grpc.CallOption) (*MsgWithdrawLiquidityFromPoolResponse, error)
	// SetPoolParams sets the pool parameters for the lending pool.
	SetPoolParams(ctx context.Context, in *MsgSetPoolParams, opts ...grpc.CallOption) (*MsgSetPoolParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DepositLiquidityIntoPool(ctx context.Context, in *MsgDepositLiquidityIntoPool, opts ...grpc.CallOption) (*MsgDepositLiquidityIntoPoolResponse, error) {
	out := new(MsgDepositLiquidityIntoPoolResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.lendingpool.Msg/DepositLiquidityIntoPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawLiquidityFromPool(ctx context.Context, in *MsgWithdrawLiquidityFromPool, opts ...grpc.CallOption) (*MsgWithdrawLiquidityFromPoolResponse, error) {
	out := new(MsgWithdrawLiquidityFromPoolResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.lendingpool.Msg/WithdrawLiquidityFromPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPoolParams(ctx context.Context, in *MsgSetPoolParams, opts ...grpc.CallOption) (*MsgSetPoolParamsResponse, error) {
	out := new(MsgSetPoolParamsResponse)
	err := c.cc.Invoke(ctx, "/dydxprotocol.lendingpool.Msg/SetPoolParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DepositLiquidityIntoPool deposits liquidity into a pool.
	DepositLiquidityIntoPool(context.Context, *MsgDepositLiquidityIntoPool) (*MsgDepositLiquidityIntoPoolResponse, error)
	// WithdrawLiquidityFromPool withdraws liquidity from a pool.
	WithdrawLiquidityFromPool(context.Context, *MsgWithdrawLiquidityFromPool) (*MsgWithdrawLiquidityFromPoolResponse, error)
	// SetPoolParams sets the pool parameters for the lending pool.
	SetPoolParams(context.Context, *MsgSetPoolParams) (*MsgSetPoolParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DepositLiquidityIntoPool(ctx context.Context, req *MsgDepositLiquidityIntoPool) (*MsgDepositLiquidityIntoPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositLiquidityIntoPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawLiquidityFromPool(ctx context.Context, req *MsgWithdrawLiquidityFromPool) (*MsgWithdrawLiquidityFromPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawLiquidityFromPool not implemented")
}
func (*UnimplementedMsgServer) SetPoolParams(ctx context.Context, req *MsgSetPoolParams) (*MsgSetPoolParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPoolParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DepositLiquidityIntoPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositLiquidityIntoPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositLiquidityIntoPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.lendingpool.Msg/DepositLiquidityIntoPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositLiquidityIntoPool(ctx, req.(*MsgDepositLiquidityIntoPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawLiquidityFromPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawLiquidityFromPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawLiquidityFromPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.lendingpool.Msg/WithdrawLiquidityFromPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawLiquidityFromPool(ctx, req.(*MsgWithdrawLiquidityFromPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPoolParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPoolParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPoolParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dydxprotocol.lendingpool.Msg/SetPoolParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPoolParams(ctx, req.(*MsgSetPoolParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dydxprotocol.lendingpool.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositLiquidityIntoPool",
			Handler:    _Msg_DepositLiquidityIntoPool_Handler,
		},
		{
			MethodName: "WithdrawLiquidityFromPool",
			Handler:    _Msg_WithdrawLiquidityFromPool_Handler,
		},
		{
			MethodName: "SetPoolParams",
			Handler:    _Msg_SetPoolParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dydxprotocol/lendingpool/tx.proto",
}

func (m *MsgDepositLiquidityIntoPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLiquidityIntoPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLiquidityIntoPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidityProvider) > 0 {
		i -= len(m.LiquidityProvider)
		copy(dAtA[i:], m.LiquidityProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LiquidityProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositLiquidityIntoPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLiquidityIntoPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLiquidityIntoPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLiquidityFromPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLiquidityFromPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLiquidityFromPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidityProvider) > 0 {
		i -= len(m.LiquidityProvider)
		copy(dAtA[i:], m.LiquidityProvider)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LiquidityProvider)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLiquidityFromPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLiquidityFromPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLiquidityFromPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPoolParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPoolParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPoolParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDepositLiquidityIntoPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiquidityProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositLiquidityIntoPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawLiquidityFromPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiquidityProvider)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawLiquidityFromPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetPoolParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDepositLiquidityIntoPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLiquidityIntoPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLiquidityIntoPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLiquidityIntoPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLiquidityIntoPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLiquidityIntoPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLiquidityFromPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityFromPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityFromPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLiquidityFromPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityFromPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLiquidityFromPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPoolParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPoolParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPoolParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
