import { AssetPosition, AssetPositionSDKType } from "./asset_position";
import { PerpetualPosition, PerpetualPositionSDKType } from "./perpetual_position";
import * as _m0 from "protobufjs/minimal";
import { DeepPartial } from "../../helpers";
/** SubaccountId defines a unique identifier for a Subaccount. */
export interface SubaccountId {
    /** The address of the wallet that owns this subaccount. */
    owner: string;
    /**
     * < 128 Since 128 should be enough to start and it fits within
     * 1 Byte (1 Bit needed to indicate that the first byte is the last).
     */
    number: number;
}
/** SubaccountId defines a unique identifier for a Subaccount. */
export interface SubaccountIdSDKType {
    owner: string;
    number: number;
}
/**
 * Subaccount defines a single sub-account for a given address.
 * Subaccounts are uniquely indexed by a subaccountNumber/owner pair.
 */
export interface Subaccount {
    /** The Id of the Subaccount */
    id?: SubaccountId;
    /**
     * All `AssetPosition`s associated with this subaccount.
     * Always sorted ascending by `asset_id`.
     */
    assetPositions: AssetPosition[];
    /**
     * All `PerpetualPosition`s associated with this subaccount.
     * Always sorted ascending by `perpetual_id.
     */
    perpetualPositions: PerpetualPosition[];
    /**
     * Set by the owner. If true, then margin trades can be made in this
     * subaccount.
     */
    marginEnabled: boolean;
}
/**
 * Subaccount defines a single sub-account for a given address.
 * Subaccounts are uniquely indexed by a subaccountNumber/owner pair.
 */
export interface SubaccountSDKType {
    id?: SubaccountIdSDKType;
    asset_positions: AssetPositionSDKType[];
    perpetual_positions: PerpetualPositionSDKType[];
    margin_enabled: boolean;
}
export declare const SubaccountId: {
    encode(message: SubaccountId, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SubaccountId;
    fromPartial(object: DeepPartial<SubaccountId>): SubaccountId;
};
export declare const Subaccount: {
    encode(message: Subaccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subaccount;
    fromPartial(object: DeepPartial<Subaccount>): Subaccount;
};
