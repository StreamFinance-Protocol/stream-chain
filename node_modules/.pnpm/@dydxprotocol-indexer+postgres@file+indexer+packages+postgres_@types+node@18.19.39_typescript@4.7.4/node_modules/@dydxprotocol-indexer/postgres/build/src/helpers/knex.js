"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.knexReadReplica = exports.knexPrimary = void 0;
const knex_1 = __importDefault(require("knex"));
const objection_1 = require("objection");
const config_1 = __importDefault(require("../config"));
const knexfile_1 = require("../db/knexfile");
// TODO: add specific logger for the logging of knex
const logging = {
    log: {
        warn() { },
        error() { },
        deprecate() { },
        debug() { },
    },
};
class KnexReadReplica {
    constructor(isUsingReadOnlyDB, knexConfig) {
        this.knexReadReplica = null;
        if (isUsingReadOnlyDB) {
            this.knexReadReplica = (0, knex_1.default)({
                ...knexConfig,
                ...logging,
            });
        }
    }
    getConnection() {
        if (!this.knexReadReplica) {
            throw new Error('Service is not configured to use read only DB');
        }
        return this.knexReadReplica;
    }
}
exports.knexPrimary = (0, knex_1.default)({
    ...knexfile_1.knexPrimaryConfigForEnv,
    ...logging,
});
exports.knexReadReplica = new KnexReadReplica(config_1.default.IS_USING_DB_READONLY, knexfile_1.knexReadReplicaConfigForEnv);
// Bind all Models to the primary knex instance. You only
// need to do this once before you use any of
// your model classes.
objection_1.Model.knex(exports.knexPrimary);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia25leC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL2tuZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLHlDQUFrQztBQUVsQyx1REFBK0I7QUFDL0IsNkNBR3dCO0FBRXhCLG9EQUFvRDtBQUNwRCxNQUFNLE9BQU8sR0FBRztJQUNkLEdBQUcsRUFBRTtRQUNILElBQUksS0FBSSxDQUFDO1FBQ1QsS0FBSyxLQUFJLENBQUM7UUFDVixTQUFTLEtBQUksQ0FBQztRQUNkLEtBQUssS0FBSSxDQUFDO0tBQ1g7Q0FDRixDQUFDO0FBRUYsTUFBTSxlQUFlO0lBR25CLFlBQVksaUJBQTBCLEVBQUUsVUFBdUI7UUFGdkQsb0JBQWUsR0FBZ0IsSUFBSSxDQUFDO1FBRzFDLElBQUksaUJBQWlCLEVBQUU7WUFDckIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFBLGNBQUksRUFBQztnQkFDMUIsR0FBRyxVQUFVO2dCQUNiLEdBQUcsT0FBTzthQUNYLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVNLGFBQWE7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQUNZLFFBQUEsV0FBVyxHQUFTLElBQUEsY0FBSSxFQUFDO0lBQ3BDLEdBQUcsa0NBQXVCO0lBQzFCLEdBQUcsT0FBTztDQUNYLENBQUMsQ0FBQztBQUVVLFFBQUEsZUFBZSxHQUFvQixJQUFJLGVBQWUsQ0FDakUsZ0JBQU0sQ0FBQyxvQkFBb0IsRUFDM0Isc0NBQTJCLENBQzVCLENBQUM7QUFFRix5REFBeUQ7QUFDekQsNkNBQTZDO0FBQzdDLHNCQUFzQjtBQUN0QixpQkFBSyxDQUFDLElBQUksQ0FBQyxtQkFBVyxDQUFDLENBQUMifQ==