"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
class MarketModel extends objection_1.Model {
    static get tableName() {
        return 'markets';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'pair',
                'exponent',
                'minPriceChangePpm',
            ],
            properties: {
                id: { type: 'integer' },
                pair: { type: 'string' },
                exponent: { type: 'integer' },
                minPriceChangePpm: { type: 'integer' },
                oraclePrice: { type: ['string', 'null'], pattern: validators_1.NonNegativeNumericPattern, default: null },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'integer',
            pair: 'string',
            exponent: 'integer',
            minPriceChangePpm: 'integer',
            oraclePrice: 'string',
        };
    }
}
exports.default = MarketModel;
MarketModel.relationMappings = {
    perpetualMarket: {
        relation: objection_1.Model.HasOneRelation,
        modelClass: path_1.default.join(__dirname, 'perpetual-market-model'),
        join: {
            from: 'markets.id',
            to: 'perpetual_markets.marketId',
        },
    },
    oraclePrices: {
        relation: objection_1.Model.HasManyRelation,
        modelClass: path_1.default.join(__dirname, 'oracle-price-model'),
        join: {
            from: 'markets.id',
            to: 'oracle_prices.marketId',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2V0LW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9tYXJrZXQtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFFeEIseUNBQWtDO0FBRWxDLGtEQUE4RDtBQUU5RCxNQUFxQixXQUFZLFNBQVEsaUJBQUs7SUFDNUMsTUFBTSxLQUFLLFNBQVM7UUFDbEIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sS0FBSyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQXFCRCxNQUFNLEtBQUssVUFBVTtRQUNuQixPQUFPO1lBQ0wsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUU7Z0JBQ1IsSUFBSTtnQkFDSixNQUFNO2dCQUNOLFVBQVU7Z0JBQ1YsbUJBQW1CO2FBQ3BCO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQ3ZCLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7Z0JBQ3hCLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQzdCLGlCQUFpQixFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtnQkFDdEMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxzQ0FBeUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO2FBQzdGO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxvQkFBb0I7UUFDN0IsT0FBTztZQUNMLEVBQUUsRUFBRSxTQUFTO1lBQ2IsSUFBSSxFQUFFLFFBQVE7WUFDZCxRQUFRLEVBQUUsU0FBUztZQUNuQixpQkFBaUIsRUFBRSxTQUFTO1lBQzVCLFdBQVcsRUFBRSxRQUFRO1NBQ3RCLENBQUM7SUFDSixDQUFDOztBQTdESCw4QkF3RUM7QUEvRFEsNEJBQWdCLEdBQUc7SUFDeEIsZUFBZSxFQUFFO1FBQ2YsUUFBUSxFQUFFLGlCQUFLLENBQUMsY0FBYztRQUM5QixVQUFVLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsd0JBQXdCLENBQUM7UUFDMUQsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLFlBQVk7WUFDbEIsRUFBRSxFQUFFLDRCQUE0QjtTQUNqQztLQUNGO0lBQ0QsWUFBWSxFQUFFO1FBQ1osUUFBUSxFQUFFLGlCQUFLLENBQUMsZUFBZTtRQUMvQixVQUFVLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsb0JBQW9CLENBQUM7UUFDdEQsSUFBSSxFQUFFO1lBQ0osSUFBSSxFQUFFLFlBQVk7WUFDbEIsRUFBRSxFQUFFLHdCQUF3QjtTQUM3QjtLQUNGO0NBQ0YsQ0FBQyJ9