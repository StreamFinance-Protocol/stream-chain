"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMostRecentPnlTickForEachAccount = exports.findLatestProcessedBlocktime = exports.findById = exports.createMany = exports.create = exports.findAll = exports.uuid = void 0;
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const pnl_ticks_model_1 = __importDefault(require("../models/pnl-ticks-model"));
const types_1 = require("../types");
function uuid(subaccountId, createdAt) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${subaccountId}-${createdAt}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ limit, id, subaccountId, createdAt, blockHeight, blockTime, createdBeforeOrAt, createdBeforeOrAtBlockHeight, createdOnOrAfter, createdOnOrAfterBlockHeight, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        subaccountId,
        createdAt,
        blockHeight,
        blockTime,
        createdBeforeOrAt,
        createdBeforeOrAtBlockHeight,
        createdOnOrAfter,
        createdOnOrAfterBlockHeight,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(pnl_ticks_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PnlTicksColumns.id, id);
    }
    if (subaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PnlTicksColumns.subaccountId, subaccountId);
    }
    if (createdAt !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.createdAt, createdAt);
    }
    if (blockHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.blockHeight, blockHeight);
    }
    if (blockTime !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.blockTime, blockTime);
    }
    if (createdBeforeOrAtBlockHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.blockHeight, '<=', createdBeforeOrAtBlockHeight);
    }
    if (createdBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.createdAt, '<=', createdBeforeOrAt);
    }
    if (createdOnOrAfterBlockHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.blockHeight, '>=', createdOnOrAfterBlockHeight);
    }
    if (createdOnOrAfter !== undefined) {
        baseQuery = baseQuery.where(types_1.PnlTicksColumns.createdAt, '>=', createdOnOrAfter);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.PnlTicksColumns.subaccountId, types_1.Ordering.ASC).orderBy(types_1.PnlTicksColumns.blockHeight, types_1.Ordering.DESC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(pnlTicksToCreate, options = { txId: undefined }) {
    return pnl_ticks_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(pnlTicksToCreate.subaccountId, pnlTicksToCreate.createdAt),
        ...pnlTicksToCreate,
    }).returning('*');
}
exports.create = create;
async function createMany(pnlTicks, options = { txId: undefined }) {
    const ticks = pnlTicks.map((tick) => ({
        ...tick,
        id: uuid(tick.subaccountId, tick.createdAt),
    }));
    return pnl_ticks_model_1.default
        .query(transaction_1.default.get(options.txId))
        .insert(ticks)
        .returning('*');
}
exports.createMany = createMany;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(pnl_ticks_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
function convertPnlTicksFromDatabaseToPnlTicksCreateObject(pnlTicksFromDatabase) {
    return lodash_1.default.omit(pnlTicksFromDatabase, types_1.PnlTicksColumns.id);
}
async function findLatestProcessedBlocktime() {
    const result = await knex_1.knexReadReplica.getConnection().raw(`
    SELECT MAX("blockTime")
    FROM "pnl_ticks"
    `);
    return result.rows[0].max || constants_1.ZERO_TIME_ISO_8601;
}
exports.findLatestProcessedBlocktime = findLatestProcessedBlocktime;
async function findMostRecentPnlTickForEachAccount(createdOnOrAfterHeight) {
    (0, stores_helpers_1.verifyAllInjectableVariables)([createdOnOrAfterHeight]);
    const result = await knex_1.knexReadReplica.getConnection().raw(`
    SELECT DISTINCT ON ("subaccountId") *
    FROM "pnl_ticks"
    WHERE "blockHeight" >= '${createdOnOrAfterHeight}'
    ORDER BY "subaccountId" ASC, "blockHeight" DESC, "createdAt" DESC;
    `);
    return lodash_1.default.keyBy(result.rows.map(convertPnlTicksFromDatabaseToPnlTicksCreateObject), 'subaccountId');
}
exports.findMostRecentPnlTickForEachAccount = findMostRecentPnlTickForEachAccount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5sLXRpY2tzLXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9wbmwtdGlja3MtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQXVCO0FBR3ZCLDRDQUFtRztBQUNuRywwQ0FBa0Q7QUFDbEQsOERBQWtIO0FBQ2xILHlFQUFpRDtBQUNqRCwwQ0FBMEM7QUFDMUMsZ0ZBQXNEO0FBQ3RELG9DQVNrQjtBQUVsQixTQUFnQixJQUFJLENBQ2xCLFlBQW9CLEVBQ3BCLFNBQWlCO0lBRWpCLHNFQUFzRTtJQUN0RSxPQUFPLElBQUEsY0FBTyxFQUNaLE1BQU0sQ0FBQyxJQUFJLENBQ1QsR0FBRyxZQUFZLElBQUksU0FBUyxFQUFFLEVBQzlCLGlDQUFxQixDQUFDLENBQ3pCLENBQUM7QUFDSixDQUFDO0FBVkQsb0JBVUM7QUFFTSxLQUFLLFVBQVUsT0FBTyxDQUMzQixFQUNFLEtBQUssRUFDTCxFQUFFLEVBQ0YsWUFBWSxFQUNaLFNBQVMsRUFDVCxXQUFXLEVBQ1gsU0FBUyxFQUNULGlCQUFpQixFQUNqQiw0QkFBNEIsRUFDNUIsZ0JBQWdCLEVBQ2hCLDJCQUEyQixHQUNQLEVBQ3RCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEtBQUs7UUFDTCxFQUFFO1FBQ0YsWUFBWTtRQUNaLFNBQVM7UUFDVCxXQUFXO1FBQ1gsU0FBUztRQUNULGlCQUFpQjtRQUNqQiw0QkFBNEI7UUFDNUIsZ0JBQWdCO1FBQ2hCLDJCQUEyQjtLQUNiLEVBQ2hCLGNBQWMsQ0FDZixDQUFDO0lBRUYsSUFBSSxTQUFTLEdBQWdDLElBQUEsK0JBQWMsRUFDekQseUJBQWEsRUFDYixPQUFPLENBQ1IsQ0FBQztJQUVGLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUNwQixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyx1QkFBZSxDQUFDLEVBQUUsRUFB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