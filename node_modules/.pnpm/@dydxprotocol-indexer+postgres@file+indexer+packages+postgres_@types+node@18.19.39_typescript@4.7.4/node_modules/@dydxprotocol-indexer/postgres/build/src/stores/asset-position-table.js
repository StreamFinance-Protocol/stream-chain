"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUsdcPositionForSubaccounts = exports.findById = exports.upsert = exports.findAll = exports.uuid = void 0;
const big_js_1 = __importDefault(require("big.js"));
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const asset_position_model_1 = __importDefault(require("../models/asset-position-model"));
const types_1 = require("../types");
function uuid(subaccountId, assetId) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${subaccountId}-${assetId}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ limit, id, subaccountId, assetId, size, isLong, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        subaccountId,
        assetId,
        size,
        isLong,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(asset_position_model_1.default, options);
    if (id) {
        baseQuery = baseQuery.whereIn(types_1.AssetPositionColumns.id, id);
    }
    if (subaccountId) {
        baseQuery = baseQuery.whereIn(types_1.AssetPositionColumns.subaccountId, subaccountId);
    }
    if (assetId) {
        baseQuery = baseQuery.whereIn(types_1.AssetPositionColumns.assetId, assetId);
    }
    if (size) {
        baseQuery = baseQuery.where(types_1.AssetPositionColumns.size, size);
    }
    if (isLong) {
        baseQuery = baseQuery.where(types_1.AssetPositionColumns.isLong, isLong);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.AssetPositionColumns.assetId, types_1.Ordering.ASC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function upsert(assetPositionToUpsert, options = { txId: undefined }) {
    const { subaccountId, assetId, } = assetPositionToUpsert;
    const createdUuid = uuid(subaccountId, assetId);
    const assetPositions = await asset_position_model_1.default.query(transaction_1.default.get(options.txId)).upsert({
        ...assetPositionToUpsert,
        id: createdUuid,
    }).returning('*');
    // should only ever be one asset position
    return assetPositions[0];
}
exports.upsert = upsert;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(asset_position_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
function convertToSubaccountUsdcMap(usdcPositions) {
    return lodash_1.default.mapValues(lodash_1.default.keyBy(usdcPositions, 'subaccountId'), (asset) => {
        return (0, big_js_1.default)(asset.isLong ? asset.size : -asset.size);
    });
}
async function findUsdcPositionForSubaccounts(subaccountIds, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const positions = await findAll({
        subaccountId: subaccountIds,
        assetId: [constants_1.USDC_ASSET_ID],
    }, [], options);
    if (positions.length === 0) {
        return {};
    }
    return convertToSubaccountUsdcMap(positions);
}
exports.findUsdcPositionForSubaccounts = findUsdcPositionForSubaccounts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcG9zaXRpb24tdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmVzL2Fzc2V0LXBvc2l0aW9uLXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUF5QjtBQUN6QixvREFBdUI7QUFHdkIsNENBQThGO0FBQzlGLDhEQUFvRjtBQUNwRix5RUFBaUQ7QUFDakQsMENBQTBDO0FBQzFDLDBGQUFnRTtBQUNoRSxvQ0FVa0I7QUFFbEIsU0FBZ0IsSUFBSSxDQUFDLFlBQW9CLEVBQUUsT0FBZTtJQUN4RCxzRUFBc0U7SUFDdEUsT0FBTyxJQUFBLGNBQU8sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxJQUFJLE9BQU8sRUFBRSxFQUFFLGlDQUFxQixDQUFDLENBQUMsQ0FBQztBQUNuRixDQUFDO0FBSEQsb0JBR0M7QUFFTSxLQUFLLFVBQVUsT0FBTyxDQUMzQixFQUNFLEtBQUssRUFDTCxFQUFFLEVBQ0YsWUFBWSxFQUNaLE9BQU8sRUFDUCxJQUFJLEVBQ0osTUFBTSxHQUNtQixFQUMzQixjQUFnQyxFQUNoQyxVQUFtQixvQ0FBd0I7SUFFM0MsSUFBQSx3Q0FBdUIsRUFDckI7UUFDRSxLQUFLO1FBQ0wsRUFBRTtRQUNGLFlBQVk7UUFDWixPQUFPO1FBQ1AsSUFBSTtRQUNKLE1BQU07S0FDUSxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUFxQyxJQUFBLCtCQUFjLEVBQzlELDhCQUFrQixFQUNsQixPQUFPLENBQ1IsQ0FBQztJQUVGLElBQUksRUFBRSxFQUFFO1FBQ04sU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsNEJBQW9CLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQzVEO0lBQ0QsSUFBSSxZQUFZLEVBQUU7UUFDaEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsNEJBQW9CLENBQUMsWUFBWSxFQUFFLFlBQVksQ0FBQyxDQUFDO0tBQ2hGO0lBQ0QsSUFBSSxPQUFPLEVBQUU7UUFDWCxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyw0QkFBb0IsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdEU7SUFDRCxJQUFJLElBQUksRUFBRTtRQUNSLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLDRCQUFvQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM5RDtJQUNELElBQUksTUFBTSxFQUFFO1FBQ1YsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsNEJBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUNqQyxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUM3QyxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FDM0IsTUFBTSxFQUNOLEtBQUssQ0FDTixDQUFDO1NBQ0g7S0FDRjtTQUFNO1FBQ0wsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLDRCQUFvQixDQUFDLE9BQU8sRUFDNUIsZ0JBQVEsQ0FBQyxHQUFHLENBQ2IsQ0FBQztLQUNIO0lBRUQsSUFBSSxLQUFLLEVBQUU7UUFDVCxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNwQztJQUVELE9BQU8sU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBaEVELDBCQWdFQztBQUVNLEtBQUssVUFBVSxNQUFNLENBQzFCLHFCQUFnRCxFQUNoRCxVQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7SUFFdEMsTUFBTSxFQUNKLFlBQVksRUFDWixPQUFPLEdBQ1IsR0FBRyxxQkFBcUIsQ0FBQztJQUMxQixNQUFNLFdBQVcsR0FBVyxJQUFJLENBQzlCLFlBQVksRUFDWixPQUFPLENBQ1IsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUF5QixNQUFNLDhCQUFrQixDQUFDLEtBQUssQ0FDekUscUJBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUM5QixDQUFDLE1BQU0sQ0FBQztRQUNQLEdBQUcscUJBQXFCO1FBQ3hCLEVBQUUsRUFBRSxXQUFXO0tBQ2hCLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIseUNBQXlDO0lBQ3pDLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFyQkQsd0JBcUJDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FDNUIsRUFBVSxFQUNWLFVBQW1CLG9DQUF3QjtJQUUzQyxNQUFNLFNBQVMsR0FBcUMsSUFBQSwrQkFBYyxFQUNoRSw4QkFBa0IsRUFDbEIsT0FBTyxDQUNSLENBQUM7SUFDRixPQUFPLFNBQVM7U0FDYixRQUFRLENBQUMsRUFBRSxDQUFDO1NBQ1osU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFYRCw0QkFXQztBQUVELFNBQVMsMEJBQTBCLENBQ2pDLGFBQTBDO0lBRTFDLE9BQU8sZ0JBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDbkUsT0FBTyxJQUFBLGdCQUFHLEVBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRU0sS0FBSyxVQUFVLDhCQUE4QixDQUNsRCxhQUF1QixFQUN2QixVQUFtQixvQ0FBd0I7SUFFM0MsTUFBTSxTQUFTLEdBQWdDLE1BQU0sT0FBTyxDQUMxRDtRQUNFLFlBQVksRUFBRSxhQUFhO1FBQzNCLE9BQU8sRUFBRSxDQUFDLHlCQUFhLENBQUM7S0FDekIsRUFDRCxFQUFFLEVBQ0YsT0FBTyxDQUNSLENBQUM7SUFDRixJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQzFCLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxPQUFPLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFoQkQsd0VBZ0JDIn0=