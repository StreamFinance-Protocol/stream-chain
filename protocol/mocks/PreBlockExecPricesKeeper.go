// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	pricestypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/prices/types"
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// PreBlockExecPricesKeeper is an autogenerated mock type for the PreBlockExecPricesKeeper type
type PreBlockExecPricesKeeper struct {
	mock.Mock
}

// GetAllMarketParams provides a mock function with given fields: ctx
func (_m *PreBlockExecPricesKeeper) GetAllMarketParams(ctx types.Context) []pricestypes.MarketParam {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllMarketParams")
	}

	var r0 []pricestypes.MarketParam
	if rf, ok := ret.Get(0).(func(types.Context) []pricestypes.MarketParam); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pricestypes.MarketParam)
		}
	}

	return r0
}

// GetValidMarketPriceUpdates provides a mock function with given fields: ctx
func (_m *PreBlockExecPricesKeeper) GetValidMarketPriceUpdates(ctx types.Context) *pricestypes.MarketPriceUpdates {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetValidMarketPriceUpdates")
	}

	var r0 *pricestypes.MarketPriceUpdates
	if rf, ok := ret.Get(0).(func(types.Context) *pricestypes.MarketPriceUpdates); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pricestypes.MarketPriceUpdates)
		}
	}

	return r0
}

// PerformStatefulPriceUpdateValidation provides a mock function with given fields: ctx, marketPriceUpdates
func (_m *PreBlockExecPricesKeeper) PerformStatefulPriceUpdateValidation(ctx types.Context, marketPriceUpdates *pricestypes.MarketPriceUpdates) error {
	ret := _m.Called(ctx, marketPriceUpdates)

	if len(ret) == 0 {
		panic("no return value specified for PerformStatefulPriceUpdateValidation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *pricestypes.MarketPriceUpdates) error); ok {
		r0 = rf(ctx, marketPriceUpdates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSmoothedPrices provides a mock function with given fields: ctx, linearInterpolateFunc
func (_m *PreBlockExecPricesKeeper) UpdateSmoothedPrices(ctx types.Context, linearInterpolateFunc func(uint64, uint64, uint32) (uint64, error)) error {
	ret := _m.Called(ctx, linearInterpolateFunc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSmoothedPrices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, func(uint64, uint64, uint32) (uint64, error)) error); ok {
		r0 = rf(ctx, linearInterpolateFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPreBlockExecPricesKeeper creates a new instance of PreBlockExecPricesKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPreBlockExecPricesKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *PreBlockExecPricesKeeper {
	mock := &PreBlockExecPricesKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
