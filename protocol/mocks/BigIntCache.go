// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// BigIntCache is an autogenerated mock type for the BigIntCache type
type BigIntCache struct {
	mock.Mock
}

// GetValue provides a mock function with given fields:
func (_m *BigIntCache) GetValue() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// HasValidValue provides a mock function with given fields: currTxHash
func (_m *BigIntCache) HasValidValue(currTxHash []byte) bool {
	ret := _m.Called(currTxHash)

	if len(ret) == 0 {
		panic("no return value specified for HasValidValue")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte) bool); ok {
		r0 = rf(currTxHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetValue provides a mock function with given fields: ctx, value, txHash
func (_m *BigIntCache) SetValue(ctx types.Context, value *big.Int, txHash []byte) {
	_m.Called(ctx, value, txHash)
}

// NewBigIntCache creates a new instance of BigIntCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBigIntCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *BigIntCache {
	mock := &BigIntCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
