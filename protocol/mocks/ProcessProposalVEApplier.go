// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ProcessProposalVEApplier is an autogenerated mock type for the ProcessProposalVEApplier type
type ProcessProposalVEApplier struct {
	mock.Mock
}

// ApplyVE provides a mock function with given fields: ctx, txs, writeToCache
func (_m *ProcessProposalVEApplier) ApplyVE(ctx types.Context, txs [][]byte, writeToCache bool) error {
	ret := _m.Called(ctx, txs, writeToCache)

	if len(ret) == 0 {
		panic("no return value specified for ApplyVE")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, [][]byte, bool) error); ok {
		r0 = rf(ctx, txs, writeToCache)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProcessProposalVEApplier creates a new instance of ProcessProposalVEApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessProposalVEApplier(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessProposalVEApplier {
	mock := &ProcessProposalVEApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
