"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FundingIndexUpdatesTable = __importStar(require("../../src/stores/funding-index-updates-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const BlockTable = __importStar(require("../../src/stores/block-table"));
const big_js_1 = __importDefault(require("big.js"));
describe('funding index update store', () => {
    const updatedHeight = '5';
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
        await BlockTable.create({
            ...constants_1.defaultBlock,
            blockHeight: updatedHeight,
        });
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a funding index update', async () => {
        await FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate);
    });
    it('Successfully creates multiple funding index updates', async () => {
        const fundingIndexUpdate2 = {
            ...constants_1.defaultFundingIndexUpdate,
            perpetualId: constants_1.defaultPerpetualMarket2.id,
            eventId: constants_1.defaultTendermintEventId2,
            rate: '0.00005',
        };
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create(fundingIndexUpdate2),
        ]);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findAll({
            effectiveAtHeight: constants_1.defaultFundingIndexUpdate.effectiveAtHeight,
        }, [], {});
        expect(fundingIndexUpdates.length).toEqual(2);
        expect(fundingIndexUpdates[0]).toEqual(expect.objectContaining(fundingIndexUpdate2));
        expect(fundingIndexUpdates[1]).toEqual(expect.objectContaining(constants_1.defaultFundingIndexUpdate));
    });
    it('Successfully finds all FundingIndexUpdates', async () => {
        const fundingIndexUpdate2 = {
            ...constants_1.defaultFundingIndexUpdate,
            eventId: constants_1.defaultTendermintEventId2,
        };
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create(fundingIndexUpdate2),
        ]);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findAll({
            effectiveAtHeight: constants_1.defaultFundingIndexUpdate.effectiveAtHeight,
        }, [], {});
        expect(fundingIndexUpdates.length).toEqual(2);
        expect(fundingIndexUpdates[0]).toEqual(expect.objectContaining(fundingIndexUpdate2));
        expect(fundingIndexUpdates[1]).toEqual(expect.objectContaining(constants_1.defaultFundingIndexUpdate));
    });
    it('Successfully finds FundingIndexUpdates with effectiveAtHeight', async () => {
        await FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findAll({
            effectiveAtHeight: constants_1.defaultFundingIndexUpdate.effectiveAtHeight,
        }, [], { readReplica: true });
        expect(fundingIndexUpdates.length).toEqual(1);
        expect(fundingIndexUpdates[0]).toEqual(expect.objectContaining({
            ...constants_1.defaultFundingIndexUpdate,
        }));
    });
    it('Successfully finds all FundingIndexUpdates effective before or after the height', async () => {
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create({
                ...constants_1.defaultFundingIndexUpdate,
                effectiveAtHeight: updatedHeight,
                eventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findAll({
            effectiveBeforeOrAtHeight: constants_1.defaultFundingIndexUpdate.effectiveAtHeight,
        }, [], {});
        expect(fundingIndexUpdates.length).toEqual(1);
        expect(fundingIndexUpdates[0]).toEqual(expect.objectContaining(constants_1.defaultFundingIndexUpdate));
    });
    it('Successfully finds all FundingIndexUpdates effective before or after time', async () => {
        const fundingIndexUpdates2 = {
            ...constants_1.defaultFundingIndexUpdate,
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
            eventId: constants_1.defaultTendermintEventId2,
        };
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create(fundingIndexUpdates2),
        ]);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findAll({
            effectiveBeforeOrAt: '2000-05-25T00:00:00.000Z',
        }, [], {});
        expect(fundingIndexUpdates.length).toEqual(1);
        expect(fundingIndexUpdates[0]).toEqual(expect.objectContaining(fundingIndexUpdates2));
    });
    it('Successfully finds a FundingIndexUpdate', async () => {
        await FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate);
        const fundingIndexUpdates = await FundingIndexUpdatesTable.findById(constants_1.defaultFundingIndexUpdateId);
        expect(fundingIndexUpdates).toEqual(expect.objectContaining(constants_1.defaultFundingIndexUpdate));
    });
    it('Successfully finds latest funding index update for market id', async () => {
        const fundingIndexUpdates2 = {
            ...constants_1.defaultFundingIndexUpdate,
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
            eventId: constants_1.defaultTendermintEventId2,
        };
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create(fundingIndexUpdates2),
        ]);
        const fundingIndexUpdates = await FundingIndexUpdatesTable
            .findMostRecentMarketFundingIndexUpdate(constants_1.defaultPerpetualMarket.id);
        expect(fundingIndexUpdates).toEqual(expect.objectContaining(fundingIndexUpdates2));
    });
    it('Successfully finds funding index map effectiveBeforeOrAtHeight', async () => {
        const fundingIndexUpdates2 = {
            ...constants_1.defaultFundingIndexUpdate,
            fundingIndex: '124',
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
            eventId: constants_1.defaultTendermintEventId2,
        };
        const fundingIndexUpdates3 = {
            ...constants_1.defaultFundingIndexUpdate,
            eventId: constants_1.defaultTendermintEventId3,
            perpetualId: constants_1.defaultPerpetualMarket2.id,
        };
        await Promise.all([
            FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
            FundingIndexUpdatesTable.create(fundingIndexUpdates2),
            FundingIndexUpdatesTable.create(fundingIndexUpdates3),
        ]);
        const fundingIndexMap = await FundingIndexUpdatesTable
            .findFundingIndexMap('3');
        expect(fundingIndexMap[constants_1.defaultFundingIndexUpdate.perpetualId])
            .toEqual((0, big_js_1.default)(constants_1.defaultFundingIndexUpdate.fundingIndex));
        expect(fundingIndexMap[fundingIndexUpdates3.perpetualId])
            .toEqual((0, big_js_1.default)(fundingIndexUpdates3.fundingIndex));
    });
    it('Gets default funding index of 0 in funding index map if no funding indexes', async () => {
        const fundingIndexMap = await FundingIndexUpdatesTable
            .findFundingIndexMap('3');
        expect(fundingIndexMap[constants_1.defaultPerpetualMarket.id]).toEqual((0, big_js_1.default)(0));
        expect(fundingIndexMap[constants_1.defaultPerpetualMarket2.id]).toEqual((0, big_js_1.default)(0));
    });
    it('Gets default funding index of 0 in funding index map if no funding indexes for perpetual', async () => {
        await FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate);
        const fundingIndexMap = await FundingIndexUpdatesTable
            .findFundingIndexMap('3');
        expect(fundingIndexMap[constants_1.defaultPerpetualMarket.id])
            .toEqual((0, big_js_1.default)(constants_1.defaultFundingIndexUpdate.fundingIndex));
        expect(fundingIndexMap[constants_1.defaultPerpetualMarket2.id]).toEqual((0, big_js_1.default)(0));
    });
});
//# sourceMappingURL=data:application/json;base64,