"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.upsert = exports.update = exports.findById = exports.create = exports.findAll = void 0;
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const liquidity_tiers_model_1 = __importDefault(require("../models/liquidity-tiers-model"));
const types_1 = require("../types");
async function findAll({ limit, id, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(liquidity_tiers_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.LiquidityTiersColumns.id, id);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.LiquidityTiersColumns.id, types_1.Ordering.ASC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(liquidityTierToCreate, options = { txId: undefined }) {
    return liquidity_tiers_model_1.default.query(transaction_1.default.get(options.txId)).insert(liquidityTierToCreate).returning('*');
}
exports.create = create;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(liquidity_tiers_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function update({ id, ...fields }, options = { txId: undefined }) {
    const liquidityTier = await liquidity_tiers_model_1.default.query(transaction_1.default.get(options.txId)).findById(id);
    const updatedLiquidityTiers = await liquidityTier.$query().patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of liquidityTiers.
    return updatedLiquidityTiers;
}
exports.update = update;
async function upsert(tierToUpsert, options = { txId: undefined }) {
    const tiers = await liquidity_tiers_model_1.default.query(transaction_1.default.get(options.txId)).upsert(tierToUpsert).returning('*');
    // should only ever be one tier
    return tiers[0];
}
exports.upsert = upsert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkaXR5LXRpZXJzLXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9saXF1aWRpdHktdGllcnMtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsNENBQXdEO0FBQ3hELDhEQUFvRjtBQUNwRix5RUFBaUQ7QUFDakQsNEZBQWtFO0FBQ2xFLG9DQVVrQjtBQUVYLEtBQUssVUFBVSxPQUFPLENBQzNCLEVBQ0UsS0FBSyxFQUNMLEVBQUUsR0FDd0IsRUFDNUIsY0FBZ0MsRUFDaEMsVUFBbUIsb0NBQXdCO0lBRTNDLElBQUEsd0NBQXVCLEVBQ3JCO1FBQ0UsS0FBSztRQUNMLEVBQUU7S0FDWSxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUFzQyxJQUFBLCtCQUFjLEVBQy9ELCtCQUFtQixFQUNuQixPQUFPLENBQ1IsQ0FBQztJQUVGLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUNwQixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyw2QkFBcUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDN0Q7SUFFRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ2pDLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzdDLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQixNQUFNLEVBQ04sS0FBSyxDQUNOLENBQUM7U0FDSDtLQUNGO1NBQU07UUFDTCxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FDM0IsNkJBQXFCLENBQUMsRUFBRSxFQUN4QixnQkFBUSxDQUFDLEdBQUcsQ0FDYixDQUFDO0tBQ0g7SUFFRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDdkIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQTVDRCwwQkE0Q0M7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQixxQkFBaUQsRUFDakQsVUFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0lBRXRDLE9BQU8sK0JBQW1CLENBQUMsS0FBSyxDQUM5QixxQkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQzlCLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFQRCx3QkFPQztBQUVNLEtBQUssVUFBVSxRQUFRLENBQzVCLEVBQVUsRUFDVixVQUFtQixvQ0FBd0I7SUFFM0MsTUFBTSxTQUFTLEdBQXNDLElBQUEsK0JBQWMsRUFDakUsK0JBQW1CLEVBQ25CLE9BQU8sQ0FDUixDQUFDO0lBQ0YsT0FBTyxTQUFTO1NBQ2IsUUFBUSxDQUFDLEVBQUUsQ0FBQztTQUNaLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBWEQsNEJBV0M7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQixFQUNFLEVBQUUsRUFDRixHQUFHLE1BQU0sRUFDa0IsRUFDN0IsVUFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0lBRXRDLE1BQU0sYUFBYSxHQUFHLE1BQU0sK0JBQW1CLENBQUMsS0FBSyxDQUNuRCxxQkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBRzlCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsTUFBTSxxQkFBcUIsR0FBRyxNQUFNLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBaUQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuSSxxRkFBcUY7SUFDckYsT0FBTyxxQkFBNEUsQ0FBQztBQUN0RixDQUFDO0FBZkQsd0JBZUM7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQixZQUF3QyxFQUN4QyxVQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7SUFFdEMsTUFBTSxLQUFLLEdBQTBCLE1BQU0sK0JBQW1CLENBQUMsS0FBSyxDQUNsRSxxQkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQzlCLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QywrQkFBK0I7SUFDL0IsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsQ0FBQztBQVRELHdCQVNDIn0=