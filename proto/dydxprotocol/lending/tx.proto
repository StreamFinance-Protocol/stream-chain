syntax = "proto3";
package dydxprotocol.lending;

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/StreamFinance-Protocol/stream-chain/protocol/x/lending/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CreateLendingAccount creates a new lending account.
  rpc CreateLendingAccount(MsgCreateLendingAccount) returns (MsgCreateLendingAccountResponse);

  // OpenLendingPosition opens a new lending position.
  rpc OpenLendingPosition(MsgOpenLendingPosition) returns (MsgOpenLendingPositionResponse);
}

// MsgCreateLendingAccount is a message used to create a new lending account.
message MsgCreateLendingAccount {
  option (cosmos.msg.v1.signer) = "creator";

  // The address of the account creator.
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgCreateLendingAccountResponse defines the CreateLendingAccount response type.
message MsgCreateLendingAccountResponse {}

// MsgOpenLendingPosition is a message used to open a new lending position.
message MsgOpenLendingPosition {
  option (cosmos.msg.v1.signer) = "creator";

  // The address of the account owner.
  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // The amount to be deposited.
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

// MsgOpenLendingPositionResponse defines the OpenLendingPosition response type.
message MsgOpenLendingPositionResponse {}
