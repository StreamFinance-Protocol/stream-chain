"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PerpetualMarketTable = __importStar(require("../../src/stores/perpetual-market-table"));
const perpetual_market_refresher_1 = require("../../src/loops/perpetual-market-refresher");
const types_1 = require("../../src/types");
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../helpers/constants");
const src_1 = require("../../src");
describe('perpetual_markets_refresher', () => {
    let perpetualMarkets;
    const invalidTicker = 'INVALID-INVALID';
    const invalidClobPairId = '4125';
    const newId = '3';
    const newTicker = 'NEW-TICKER';
    const newClobPairId = '3';
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
        await (0, mock_generators_1.seedData)();
    });
    beforeEach(async () => {
        await (0, perpetual_market_refresher_1.updatePerpetualMarkets)();
        perpetualMarkets = await PerpetualMarketTable.findAll({}, [], { readReplica: true });
    });
    afterEach(async () => {
        await (0, perpetual_market_refresher_1.clear)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.clearData)();
        await (0, db_helpers_1.teardown)();
    });
    describe('updatePerpetualMarkets', () => {
        it('updates in-memory mapping of perpetual markets', () => {
            const clobPairIdToPerpetualMarket = (0, perpetual_market_refresher_1.getClobPairIdToPerpetualMarket)();
            const tickerToPerpetualMarket = (0, perpetual_market_refresher_1.getTickerToPerpetualMarketForTest)();
            const idToPerpetualMarket = (0, perpetual_market_refresher_1.getPerpetualMarketsMap)();
            perpetualMarkets.forEach((perpetualMarket) => {
                expect(clobPairIdToPerpetualMarket[perpetualMarket.clobPairId]).toEqual(perpetualMarket);
                expect(tickerToPerpetualMarket[perpetualMarket.ticker]).toEqual(perpetualMarket);
                expect(idToPerpetualMarket[perpetualMarket.id]).toEqual(perpetualMarket);
            });
            Object.keys(clobPairIdToPerpetualMarket).forEach((clobPairId) => {
                expect(lodash_1.default.map(perpetualMarkets, types_1.PerpetualMarketColumns.clobPairId))
                    .toContain(clobPairId);
            });
            Object.keys(tickerToPerpetualMarket).forEach((ticker) => {
                expect(lodash_1.default.map(perpetualMarkets, types_1.PerpetualMarketColumns.ticker))
                    .toContain(ticker);
            });
            Object.keys(idToPerpetualMarket).forEach((id) => {
                expect(lodash_1.default.map(perpetualMarkets, types_1.PerpetualMarketColumns.id))
                    .toContain(id);
            });
        });
    });
    describe('isValidPerpetualMarketTicker', () => {
        it('returns true for valid ticker', () => {
            expect((0, perpetual_market_refresher_1.isValidPerpetualMarketTicker)(perpetualMarkets[0].ticker)).toEqual(true);
        });
        it('returns false for invalid ticker', () => {
            expect((0, perpetual_market_refresher_1.isValidPerpetualMarketTicker)(invalidTicker)).toEqual(false);
        });
    });
    describe('getPerpetualMarketTicker', () => {
        it('gets ticker for clob pair id', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketTicker)(perpetualMarkets[0].clobPairId)).toEqual(perpetualMarkets[0].ticker);
        });
        it('returns undefined for invalid clob pair id', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketTicker)(invalidClobPairId)).toBeUndefined();
        });
    });
    describe('getClobPairIdFromTicker', () => {
        it('gets clob pair id for ticker', () => {
            expect((0, perpetual_market_refresher_1.getClobPairIdFromTicker)(perpetualMarkets[0].ticker)).toEqual(perpetualMarkets[0].clobPairId);
        });
        it('returns undefined for invalid ticker', () => {
            expect((0, perpetual_market_refresher_1.getClobPairIdFromTicker)(invalidTicker)).toBeUndefined();
        });
    });
    describe('getPerpetualMarketFromTicker', () => {
        it('gets perpetual market for ticker', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromTicker)(perpetualMarkets[0].ticker)).toEqual(perpetualMarkets[0]);
        });
        it('returns undefined for invalid ticker', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromTicker)(invalidTicker)).toBeUndefined();
        });
    });
    describe('getPerpetualMarketFromClobPairId', () => {
        it('gets perpetual market for clob pair id', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromClobPairId)(perpetualMarkets[0].clobPairId)).toEqual(perpetualMarkets[0]);
        });
        it('returns undefined for invalid clob pair id', () => {
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromClobPairId)(invalidClobPairId)).toBeUndefined();
        });
    });
    describe('upsertPerpetualMarket', () => {
        it('successfully adds perpetual market', () => {
            (0, perpetual_market_refresher_1.upsertPerpetualMarket)({
                ...constants_1.defaultPerpetualMarket,
                id: newId,
                clobPairId: newClobPairId,
                ticker: newTicker,
            });
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromId)(newId)).not.toBeUndefined();
        });
        it('successfully updates perpetual market', async () => {
            await src_1.perpetualMarketRefresher.updatePerpetualMarkets();
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromId)(constants_1.defaultPerpetualMarket.id)).not.toBeUndefined();
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromId)(constants_1.defaultPerpetualMarket.id)?.clobPairId).toEqual(constants_1.defaultPerpetualMarket.clobPairId);
            (0, perpetual_market_refresher_1.upsertPerpetualMarket)({
                ...constants_1.defaultPerpetualMarket,
                clobPairId: newClobPairId,
            });
            expect((0, perpetual_market_refresher_1.getPerpetualMarketFromId)(constants_1.defaultPerpetualMarket.id)?.clobPairId).toEqual(newClobPairId);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLW1hcmtldHMtcmVmcmVzaGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vbG9vcHMvcGVycGV0dWFsLW1hcmtldHMtcmVmcmVzaGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDhGQUFnRjtBQUNoRiwyRkFhb0Q7QUFDcEQsMkNBQXNGO0FBQ3RGLDZEQUE0RTtBQUM1RSxnRUFBc0Q7QUFDdEQsb0RBQXVCO0FBQ3ZCLG9EQUE4RDtBQUM5RCxtQ0FBcUQ7QUFFckQsUUFBUSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUMzQyxJQUFJLGdCQUErQyxDQUFDO0lBQ3BELE1BQU0sYUFBYSxHQUFXLGlCQUFpQixDQUFDO0lBQ2hELE1BQU0saUJBQWlCLEdBQVcsTUFBTSxDQUFDO0lBRXpDLE1BQU0sS0FBSyxHQUFXLEdBQUcsQ0FBQztJQUMxQixNQUFNLFNBQVMsR0FBVyxZQUFZLENBQUM7SUFDdkMsTUFBTSxhQUFhLEdBQVcsR0FBRyxDQUFDO0lBRWxDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsb0JBQU8sR0FBRSxDQUFDO1FBQ2hCLE1BQU0sSUFBQSwwQkFBUSxHQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxJQUFBLG1EQUFzQixHQUFFLENBQUM7UUFDL0IsZ0JBQWdCLEdBQUcsTUFBTSxvQkFBb0IsQ0FBQyxPQUFPLENBQ25ELEVBQUUsRUFDRixFQUFFLEVBQ0YsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQ3RCLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsa0NBQUssR0FBRSxDQUFDO0lBQ2hCLENBQUMsQ0FB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