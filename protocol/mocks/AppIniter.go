// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	json "encoding/json"

	ibctesting "github.com/cosmos/ibc-go/v8/testing"

	mock "github.com/stretchr/testify/mock"
)

// AppIniter is an autogenerated mock type for the AppIniter type
type AppIniter struct {
	mock.Mock
}

// Execute provides a mock function with given fields:
func (_m *AppIniter) Execute() (ibctesting.TestingApp, map[string]json.RawMessage) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 ibctesting.TestingApp
	var r1 map[string]json.RawMessage
	if rf, ok := ret.Get(0).(func() (ibctesting.TestingApp, map[string]json.RawMessage)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() ibctesting.TestingApp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ibctesting.TestingApp)
		}
	}

	if rf, ok := ret.Get(1).(func() map[string]json.RawMessage); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]json.RawMessage)
		}
	}

	return r0, r1
}

// NewAppIniter creates a new instance of AppIniter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppIniter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppIniter {
	mock := &AppIniter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
