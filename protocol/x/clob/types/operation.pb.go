// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: klyraprotocol/clob/operation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Operation represents an operation in the proposed operations. Operation is
// used internally within the memclob only.
type Operation struct {
	// operation represents the operation that occurred, which can be a match,
	// short term order placement, short term order cancellation, or the placement
	// of a pre-existing stateful order.
	//
	// Types that are valid to be assigned to Operation:
	//	*Operation_Match
	//	*Operation_ShortTermOrderPlacement
	//	*Operation_ShortTermOrderCancellation
	//	*Operation_PreexistingStatefulOrder
	Operation isOperation_Operation `protobuf_oneof:"operation"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0badfbdea2e980bd, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type isOperation_Operation interface {
	isOperation_Operation()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operation_Match struct {
	Match *ClobMatch `protobuf:"bytes,1,opt,name=match,proto3,oneof" json:"match,omitempty"`
}
type Operation_ShortTermOrderPlacement struct {
	ShortTermOrderPlacement *MsgPlaceOrder `protobuf:"bytes,2,opt,name=short_term_order_placement,json=shortTermOrderPlacement,proto3,oneof" json:"short_term_order_placement,omitempty"`
}
type Operation_ShortTermOrderCancellation struct {
	ShortTermOrderCancellation *MsgCancelOrder `protobuf:"bytes,3,opt,name=short_term_order_cancellation,json=shortTermOrderCancellation,proto3,oneof" json:"short_term_order_cancellation,omitempty"`
}
type Operation_PreexistingStatefulOrder struct {
	PreexistingStatefulOrder *OrderId `protobuf:"bytes,4,opt,name=preexisting_stateful_order,json=preexistingStatefulOrder,proto3,oneof" json:"preexisting_stateful_order,omitempty"`
}

func (*Operation_Match) isOperation_Operation()                      {}
func (*Operation_ShortTermOrderPlacement) isOperation_Operation()    {}
func (*Operation_ShortTermOrderCancellation) isOperation_Operation() {}
func (*Operation_PreexistingStatefulOrder) isOperation_Operation()   {}

func (m *Operation) GetOperation() isOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *Operation) GetMatch() *ClobMatch {
	if x, ok := m.GetOperation().(*Operation_Match); ok {
		return x.Match
	}
	return nil
}

func (m *Operation) GetShortTermOrderPlacement() *MsgPlaceOrder {
	if x, ok := m.GetOperation().(*Operation_ShortTermOrderPlacement); ok {
		return x.ShortTermOrderPlacement
	}
	return nil
}

func (m *Operation) GetShortTermOrderCancellation() *MsgCancelOrder {
	if x, ok := m.GetOperation().(*Operation_ShortTermOrderCancellation); ok {
		return x.ShortTermOrderCancellation
	}
	return nil
}

func (m *Operation) GetPreexistingStatefulOrder() *OrderId {
	if x, ok := m.GetOperation().(*Operation_PreexistingStatefulOrder); ok {
		return x.PreexistingStatefulOrder
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Operation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Operation_Match)(nil),
		(*Operation_ShortTermOrderPlacement)(nil),
		(*Operation_ShortTermOrderCancellation)(nil),
		(*Operation_PreexistingStatefulOrder)(nil),
	}
}

// InternalOperation represents an internal operation in the operations to
// propose. InternalOperation is used internally within the memclob only.
type InternalOperation struct {
	// operation represents the operation that occurred, which can be a match,
	// Short-Term order placement, or the placement of a pre-existing stateful
	// order.
	//
	// Types that are valid to be assigned to Operation:
	//	*InternalOperation_Match
	//	*InternalOperation_ShortTermOrderPlacement
	//	*InternalOperation_PreexistingStatefulOrder
	//	*InternalOperation_OrderRemoval
	Operation isInternalOperation_Operation `protobuf_oneof:"operation"`
}

func (m *InternalOperation) Reset()         { *m = InternalOperation{} }
func (m *InternalOperation) String() string { return proto.CompactTextString(m) }
func (*InternalOperation) ProtoMessage()    {}
func (*InternalOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0badfbdea2e980bd, []int{1}
}
func (m *InternalOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalOperation.Merge(m, src)
}
func (m *InternalOperation) XXX_Size() int {
	return m.Size()
}
func (m *InternalOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalOperation.DiscardUnknown(m)
}

var xxx_messageInfo_InternalOperation proto.InternalMessageInfo

type isInternalOperation_Operation interface {
	isInternalOperation_Operation()
	MarshalTo([]byte) (int, error)
	Size() int
}

type InternalOperation_Match struct {
	Match *ClobMatch `protobuf:"bytes,1,opt,name=match,proto3,oneof" json:"match,omitempty"`
}
type InternalOperation_ShortTermOrderPlacement struct {
	ShortTermOrderPlacement *MsgPlaceOrder `protobuf:"bytes,2,opt,name=short_term_order_placement,json=shortTermOrderPlacement,proto3,oneof" json:"short_term_order_placement,omitempty"`
}
type InternalOperation_PreexistingStatefulOrder struct {
	PreexistingStatefulOrder *OrderId `protobuf:"bytes,3,opt,name=preexisting_stateful_order,json=preexistingStatefulOrder,proto3,oneof" json:"preexisting_stateful_order,omitempty"`
}
type InternalOperation_OrderRemoval struct {
	OrderRemoval *OrderRemoval `protobuf:"bytes,4,opt,name=order_removal,json=orderRemoval,proto3,oneof" json:"order_removal,omitempty"`
}

func (*InternalOperation_Match) isInternalOperation_Operation()                    {}
func (*InternalOperation_ShortTermOrderPlacement) isInternalOperation_Operation()  {}
func (*InternalOperation_PreexistingStatefulOrder) isInternalOperation_Operation() {}
func (*InternalOperation_OrderRemoval) isInternalOperation_Operation()             {}

func (m *InternalOperation) GetOperation() isInternalOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *InternalOperation) GetMatch() *ClobMatch {
	if x, ok := m.GetOperation().(*InternalOperation_Match); ok {
		return x.Match
	}
	return nil
}

func (m *InternalOperation) GetShortTermOrderPlacement() *MsgPlaceOrder {
	if x, ok := m.GetOperation().(*InternalOperation_ShortTermOrderPlacement); ok {
		return x.ShortTermOrderPlacement
	}
	return nil
}

func (m *InternalOperation) GetPreexistingStatefulOrder() *OrderId {
	if x, ok := m.GetOperation().(*InternalOperation_PreexistingStatefulOrder); ok {
		return x.PreexistingStatefulOrder
	}
	return nil
}

func (m *InternalOperation) GetOrderRemoval() *OrderRemoval {
	if x, ok := m.GetOperation().(*InternalOperation_OrderRemoval); ok {
		return x.OrderRemoval
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*InternalOperation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*InternalOperation_Match)(nil),
		(*InternalOperation_ShortTermOrderPlacement)(nil),
		(*InternalOperation_PreexistingStatefulOrder)(nil),
		(*InternalOperation_OrderRemoval)(nil),
	}
}

func init() {
	proto.RegisterType((*Operation)(nil), "klyraprotocol.clob.Operation")
	proto.RegisterType((*InternalOperation)(nil), "klyraprotocol.clob.InternalOperation")
}

func init() {
	proto.RegisterFile("klyraprotocol/clob/operation.proto", fileDescriptor_0badfbdea2e980bd)
}

var fileDescriptor_0badfbdea2e980bd = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0x31, 0x6f, 0x9b, 0x40,
	0x14, 0xc7, 0xc1, 0x6e, 0x2b, 0xf9, 0xdc, 0x0e, 0x65, 0x29, 0xc2, 0x32, 0x72, 0x59, 0xda, 0xc5,
	0x20, 0xb5, 0xea, 0x17, 0xb0, 0xab, 0x16, 0x0f, 0x96, 0x2d, 0xdc, 0xa9, 0x95, 0x4a, 0x8e, 0xf3,
	0x05, 0x50, 0x8e, 0x3b, 0x74, 0x9c, 0x23, 0xfb, 0x5b, 0xe4, 0x63, 0x65, 0xf4, 0x98, 0x2d, 0x91,
	0xfd, 0x21, 0xb2, 0x46, 0x1c, 0x60, 0x19, 0x19, 0x67, 0xc9, 0x94, 0x91, 0xf7, 0xfe, 0xef, 0xf7,
	0xff, 0xeb, 0x71, 0x0f, 0x58, 0x57, 0x64, 0xc3, 0x61, 0xca, 0x99, 0x60, 0x88, 0x11, 0x07, 0x11,
	0x16, 0x38, 0x2c, 0xc5, 0x1c, 0x8a, 0x98, 0x51, 0x5b, 0xd6, 0x35, 0xad, 0xa6, 0xb1, 0x73, 0x8d,
	0x31, 0x68, 0x98, 0x4b, 0xa0, 0x40, 0x11, 0xce, 0x8a, 0x29, 0xc3, 0x6c, 0x22, 0xf3, 0x25, 0xe6,
	0x65, 0xff, 0xcb, 0xb9, 0xbe, 0xcf, 0x71, 0xc2, 0xae, 0x21, 0xa9, 0x40, 0xbd, 0x06, 0xa1, 0x58,
	0x17, 0x4d, 0xeb, 0xb1, 0x05, 0x3a, 0xb3, 0x2a, 0xaf, 0xf6, 0x03, 0xbc, 0x95, 0x21, 0x74, 0x75,
	0xa0, 0x7e, 0xed, 0x7e, 0xeb, 0xdb, 0xa7, 0xc9, 0xed, 0x31, 0x61, 0xc1, 0x34, 0x17, 0xb9, 0x8a,
	0x57, 0xa8, 0xb5, 0x0b, 0x60, 0x64, 0x11, 0xe3, 0xc2, 0x17, 0x98, 0x27, 0x7e, 0x11, 0x22, 0x25,
	0x10, 0xe1, 0x04, 0x53, 0xa1, 0xb7, 0x24, 0xeb, 0x73, 0x13, 0x6b, 0x9a, 0x85, 0xf3, 0x5c, 0x37,
	0xcb, 0x47, 0x5c, 0xc5, 0xfb, 0x24, 0x31, 0x7f, 0x30, 0x4f, 0x64, 0x65, 0x5e, 0x31, 0xb4, 0x10,
	0xf4, 0x4f, 0x1c, 0x10, 0xa4, 0x08, 0x13, 0x22, 0x93, 0xeb, 0x6d, 0x69, 0x62, 0x9d, 0x31, 0x19,
	0x4b, 0x69, 0xe5, 0x62, 0xd4, 0x5d, 0xc6, 0x47, 0x1c, 0xed, 0x1f, 0x30, 0x52, 0x8e, 0xf1, 0x3a,
	0xce, 0x44, 0x4c, 0x43, 0x3f, 0x13, 0x50, 0xe0, 0xcb, 0x15, 0x29, 0x2c, 0xf5, 0x37, 0xd2, 0xa5,
	0xd7, 0xe4, 0x22, 0x51, 0x93, 0xa5, 0xab, 0x78, 0xfa, 0x11, 0x60, 0x51, 0xce, 0xcb, 0xee, 0xa8,
	0x0b, 0x3a, 0x87, 0xb7, 0x61, 0xdd, 0xb7, 0xc0, 0xc7, 0x09, 0x15, 0x98, 0x53, 0x48, 0x5e, 0xc1,
	0x1f, 0x78, 0x7e, 0x31, 0xed, 0x17, 0x2d, 0x46, 0xfb, 0x0d, 0x3e, 0xd4, 0x9e, 0x6e, 0xb9, 0xe8,
	0xc1, 0x59, 0x9e, 0x57, 0xe8, 0x5c, 0xc5, 0x7b, 0xcf, 0x8e, 0xbe, 0x6b, 0x1b, 0x1e, 0xfd, 0xbf,
	0xdd, 0x99, 0xea, 0x76, 0x67, 0xaa, 0x0f, 0x3b, 0x53, 0xbd, 0xd9, 0x9b, 0xca, 0x76, 0x6f, 0x2a,
	0x77, 0x7b, 0x53, 0xf9, 0xfb, 0x33, 0x8c, 0x45, 0xb4, 0x0a, 0x6c, 0xc4, 0x12, 0x67, 0x21, 0x38,
	0x86, 0xc9, 0xaf, 0x98, 0xe6, 0xcf, 0x60, 0x38, 0xaf, 0xce, 0x24, 0x93, 0xe5, 0x21, 0x8a, 0x60,
	0x4c, 0x9d, 0xc3, 0xf1, 0xac, 0xcb, 0xf3, 0xd9, 0xa4, 0x38, 0x0b, 0xde, 0xc9, 0xf2, 0xf7, 0xa7,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x65, 0x5e, 0x4f, 0x04, 0x04, 0x00, 0x00,
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		{
			size := m.Operation.Size()
			i -= size
			if _, err := m.Operation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Operation_Match) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_Match) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Operation_ShortTermOrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_ShortTermOrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ShortTermOrderPlacement != nil {
		{
			size, err := m.ShortTermOrderPlacement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Operation_ShortTermOrderCancellation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_ShortTermOrderCancellation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ShortTermOrderCancellation != nil {
		{
			size, err := m.ShortTermOrderCancellation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Operation_PreexistingStatefulOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation_PreexistingStatefulOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreexistingStatefulOrder != nil {
		{
			size, err := m.PreexistingStatefulOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *InternalOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalOperation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalOperation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Operation != nil {
		{
			size := m.Operation.Size()
			i -= size
			if _, err := m.Operation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *InternalOperation_Match) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalOperation_Match) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Match != nil {
		{
			size, err := m.Match.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InternalOperation_ShortTermOrderPlacement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalOperation_ShortTermOrderPlacement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ShortTermOrderPlacement != nil {
		{
			size, err := m.ShortTermOrderPlacement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *InternalOperation_PreexistingStatefulOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalOperation_PreexistingStatefulOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PreexistingStatefulOrder != nil {
		{
			size, err := m.PreexistingStatefulOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InternalOperation_OrderRemoval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalOperation_OrderRemoval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.OrderRemoval != nil {
		{
			size, err := m.OrderRemoval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOperation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func encodeVarintOperation(dAtA []byte, offset int, v uint64) int {
	offset -= sovOperation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		n += m.Operation.Size()
	}
	return n
}

func (m *Operation_Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *Operation_ShortTermOrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShortTermOrderPlacement != nil {
		l = m.ShortTermOrderPlacement.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *Operation_ShortTermOrderCancellation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShortTermOrderCancellation != nil {
		l = m.ShortTermOrderCancellation.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *Operation_PreexistingStatefulOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreexistingStatefulOrder != nil {
		l = m.PreexistingStatefulOrder.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *InternalOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Operation != nil {
		n += m.Operation.Size()
	}
	return n
}

func (m *InternalOperation_Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Match != nil {
		l = m.Match.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *InternalOperation_ShortTermOrderPlacement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShortTermOrderPlacement != nil {
		l = m.ShortTermOrderPlacement.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *InternalOperation_PreexistingStatefulOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreexistingStatefulOrder != nil {
		l = m.PreexistingStatefulOrder.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}
func (m *InternalOperation_OrderRemoval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderRemoval != nil {
		l = m.OrderRemoval.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	return n
}

func sovOperation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOperation(x uint64) (n int) {
	return sovOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClobMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &Operation_Match{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTermOrderPlacement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgPlaceOrder{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &Operation_ShortTermOrderPlacement{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTermOrderCancellation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgCancelOrder{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &Operation_ShortTermOrderCancellation{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreexistingStatefulOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &Operation_PreexistingStatefulOrder{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalOperation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalOperation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClobMatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &InternalOperation_Match{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortTermOrderPlacement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgPlaceOrder{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &InternalOperation_ShortTermOrderPlacement{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreexistingStatefulOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderId{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &InternalOperation_PreexistingStatefulOrder{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderRemoval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOperation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderRemoval{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Operation = &InternalOperation_OrderRemoval{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOperation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOperation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOperation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOperation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOperation = fmt.Errorf("proto: unexpected end of group")
)
