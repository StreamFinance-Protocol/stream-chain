// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	clobtypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/clob/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/StreamFinance-Protocol/stream-chain/protocol/x/subaccounts/types"
)

// AddOrderToOrderbookCollateralizationCheckFn is an autogenerated mock type for the AddOrderToOrderbookCollateralizationCheckFn type
type AddOrderToOrderbookCollateralizationCheckFn struct {
	mock.Mock
}

// Execute provides a mock function with given fields: subaccountMatchedOrders
func (_m *AddOrderToOrderbookCollateralizationCheckFn) Execute(subaccountMatchedOrders map[types.SubaccountId][]clobtypes.PendingOpenOrder) (bool, map[types.SubaccountId]types.UpdateResult) {
	ret := _m.Called(subaccountMatchedOrders)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 bool
	var r1 map[types.SubaccountId]types.UpdateResult
	if rf, ok := ret.Get(0).(func(map[types.SubaccountId][]clobtypes.PendingOpenOrder) (bool, map[types.SubaccountId]types.UpdateResult)); ok {
		return rf(subaccountMatchedOrders)
	}
	if rf, ok := ret.Get(0).(func(map[types.SubaccountId][]clobtypes.PendingOpenOrder) bool); ok {
		r0 = rf(subaccountMatchedOrders)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(map[types.SubaccountId][]clobtypes.PendingOpenOrder) map[types.SubaccountId]types.UpdateResult); ok {
		r1 = rf(subaccountMatchedOrders)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[types.SubaccountId]types.UpdateResult)
		}
	}

	return r0, r1
}

// NewAddOrderToOrderbookCollateralizationCheckFn creates a new instance of AddOrderToOrderbookCollateralizationCheckFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddOrderToOrderbookCollateralizationCheckFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddOrderToOrderbookCollateralizationCheckFn {
	mock := &AddOrderToOrderbookCollateralizationCheckFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
