"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTSTypeFromGoogleType = exports.getTSTypeForProto = exports.getTSTypeForAmino = exports.getTSType = exports.getMessageName = exports.getFieldTypeReference = exports.getFieldNames = exports.getDefaultTSTypeFromProtoType = exports.createProtoTypeOptionsDefaults = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../utils");

var _proto = require("./proto");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var getFieldNames = function getFieldNames(field) {
  var _field$options$Teles, _field$options, _field$options$Teles2, _field$options2;

  var propName = (_field$options$Teles = (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options['(telescope:name)']) !== null && _field$options$Teles !== void 0 ? _field$options$Teles : field.name;
  var origName = (_field$options$Teles2 = (_field$options2 = field.options) === null || _field$options2 === void 0 ? void 0 : _field$options2['(telescope:orig)']) !== null && _field$options$Teles2 !== void 0 ? _field$options$Teles2 : field.name;
  return {
    propName: propName,
    origName: origName
  };
};

exports.getFieldNames = getFieldNames;
;
var createProtoTypeOptionsDefaults = {
  useOriginalCase: false
};
exports.createProtoTypeOptionsDefaults = createProtoTypeOptionsDefaults;

var getMessageName = function getMessageName(name) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : createProtoTypeOptionsDefaults;
  var MsgName = [options.typeNamePrefix, name, options.typeNameSuffix].filter(Boolean).join('');
  return MsgName;
};

exports.getMessageName = getMessageName;

var getFieldTypeReference = function getFieldTypeReference(context, field) {
  var _field$parsedType;

  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createProtoTypeOptionsDefaults;
  var ast = null;
  var typ = null;

  if (_proto.SCALAR_TYPES.includes(field.type)) {
    // return on scalar
    typ = getTSTypeForProto(context, field);
    return typ;
  } else if (_proto.GOOGLE_TYPES.includes(field.type)) {
    typ = getTSTypeFromGoogleType(context, field.type, options);
  } else {
    var propName = (0, _utils.getProtoFieldTypeName)(context, field);
    var MsgName = getMessageName(propName, options);
    typ = t.tsTypeReference(t.identifier(MsgName));
  }

  if (((_field$parsedType = field.parsedType) === null || _field$parsedType === void 0 ? void 0 : _field$parsedType.type) === 'Type' && field.rule !== 'repeated' && context.pluginValue('prototypes.allowUndefinedTypes')) {
    // NOTE: unfortunately bc of defaults...
    ast = t.tsUnionType([typ, t.tsUndefinedKeyword()]);
  } else {
    ast = typ;
  }

  return ast;
};

exports.getFieldTypeReference = getFieldTypeReference;

var getTSType = function getTSType(context, type) {
  switch (type) {
    case 'string':
      return t.tsStringKeyword();

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.tsNumberKeyword();

    case 'int64':
    case 'uint64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.tsTypeReference(t.identifier('Long'));

    case 'bytes':
      return t.tsTypeReference(t.identifier('Uint8Array'));

    case 'bool':
      return t.tsBooleanKeyword();

    default:
      throw new Error('getTSType() type not found');
  }

  ;
};

exports.getTSType = getTSType;

var getTSTypeFromGoogleType = function getTSTypeFromGoogleType(context, type) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : createProtoTypeOptionsDefaults;

  var identifier = function identifier(str) {
    return t.identifier(getMessageName(str, options));
  };

  switch (type) {
    case 'google.protobuf.Timestamp':
      switch (context.pluginValue('prototypes.typingsFormat.timestamp')) {
        case 'timestamp':
          return t.tsTypeReference(identifier('Timestamp'));

        case 'date':
        default:
          return t.tsTypeReference(t.identifier('Date'));
      }

    case 'google.protobuf.Duration':
      switch (context.pluginValue('prototypes.typingsFormat.duration')) {
        case 'duration':
          return t.tsTypeReference(identifier('Duration'));

        case 'string':
        default:
          return t.tsStringKeyword();
      }

    case 'google.protobuf.Any':
      return t.tsTypeReference(identifier('Any'));

    default:
      throw new Error('getTSTypeFromGoogleType() type not found');
  }

  ;
};

exports.getTSTypeFromGoogleType = getTSTypeFromGoogleType;

var getTSTypeForAmino = function getTSTypeForAmino(context, field) {
  var _field$options3;

  switch (field.type) {
    case 'bytes':
      // bytes [WASMByteCode]
      if (((_field$options3 = field.options) === null || _field$options3 === void 0 ? void 0 : _field$options3['(gogoproto.customname)']) === 'WASMByteCode') {
        return t.tsStringKeyword();
      }

      return t.tsTypeReference(t.identifier('Uint8Array'));

    default:
      return getTSType(context, field.type);
  }

  ;
};

exports.getTSTypeForAmino = getTSTypeForAmino;

var getTSTypeForProto = function getTSTypeForProto(context, field) {
  return getTSType(context, field.type);
};

exports.getTSTypeForProto = getTSTypeForProto;

var getDefaultTSTypeFromProtoType = function getDefaultTSTypeFromProtoType(context, field, isOneOf) {
  var _field$parsedType2;

  var isOptional = (0, _proto.getFieldOptionalityForDefaults)(context, field, isOneOf);

  if (isOptional) {
    return t.identifier('undefined');
  }

  if (field.rule === 'repeated') {
    return t.arrayExpression([]);
  }

  if (field.keyType) {
    return t.objectExpression([]);
  }

  if (((_field$parsedType2 = field.parsedType) === null || _field$parsedType2 === void 0 ? void 0 : _field$parsedType2.type) === 'Enum') {
    var _context$ref$proto;

    if (((_context$ref$proto = context.ref.proto) === null || _context$ref$proto === void 0 ? void 0 : _context$ref$proto.syntax) === 'proto2') {
      return t.numericLiteral(1);
    }

    return t.numericLiteral(0);
  }

  switch (field.type) {
    case 'string':
      return t.stringLiteral('');

    case 'double':
    case 'float':
    case 'int32':
    case 'uint32':
    case 'sint32':
    case 'fixed32':
    case 'sfixed32':
      return t.numericLiteral(0);

    case 'uint64':
      return t.memberExpression(t.identifier('Long'), t.identifier('UZERO'));

    case 'int64':
    case 'sint64':
    case 'fixed64':
    case 'sfixed64':
      return t.memberExpression(t.identifier('Long'), t.identifier('ZERO'));

    case 'bytes':
      return t.newExpression(t.identifier('Uint8Array'), []);

    case 'bool':
      return t.booleanLiteral(false);
    // OTHER TYPES

    case 'google.protobuf.Timestamp':
      return t.identifier('undefined');

    case 'google.protobuf.Duration':
      return t.identifier('undefined');

    case 'google.protobuf.Any':
      return t.identifier('undefined');

    case 'cosmos.base.v1beta1.Coins':
      return t.arrayExpression([]);

    case 'cosmos.base.v1beta1.Coin':
      return t.identifier('undefined');

    default:
      // console.warn('getDefaultTSTypeFromProtoType() type not found: ' + type);
      return t.identifier('undefined');
  }

  ;
};

exports.getDefaultTSTypeFromProtoType = getDefaultTSTypeFromProtoType;