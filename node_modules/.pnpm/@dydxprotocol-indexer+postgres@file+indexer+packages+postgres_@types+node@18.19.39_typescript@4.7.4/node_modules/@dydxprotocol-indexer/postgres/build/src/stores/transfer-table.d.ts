/// <reference types="node" />
import Big from 'big.js';
import { TransferFromDatabase, TransferQueryConfig, TransferCreateObject, Options, QueryableField, ToAndFromSubaccountTransferQueryConfig, SubaccountAssetNetTransferMap } from '../types';
export declare function uuid(eventId: Buffer, assetId: string, senderSubaccountId?: string, recipientSubaccountId?: string, senderWalletAddress?: string, recipientWalletAddress?: string): string;
export declare function findAll({ limit, id, senderSubaccountId, recipientSubaccountId, senderWalletAddress, recipientWalletAddress, assetId, size, eventId, transactionHash, createdAt, createdAtHeight, createdBeforeOrAtHeight, createdBeforeOrAt, createdAfter, createdAfterHeight, }: TransferQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<TransferFromDatabase[]>;
export declare function findAllToOrFromSubaccountId({ limit, id, subaccountId, assetId, size, eventId, transactionHash, createdAt, createdAtHeight, createdBeforeOrAtHeight, createdBeforeOrAt, createdAfterHeight, createdAfter, }: ToAndFromSubaccountTransferQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<TransferFromDatabase[]>;
export interface AssetTransferMap {
    [assetId: string]: Big;
}
export declare function getNetTransfersBetweenBlockHeightsForSubaccount(subaccountId: string, createdAfterHeight: string, createdBeforeOrAtHeight: string, options?: Options): Promise<AssetTransferMap>;
export declare function getNetTransfersPerSubaccount(createdBeforeOrAtHeight: string, options?: Options): Promise<SubaccountAssetNetTransferMap>;
export declare function create(transferToCreate: TransferCreateObject, options?: Options): Promise<TransferFromDatabase>;
export declare function findById(id: string, options?: Options): Promise<TransferFromDatabase | undefined>;
