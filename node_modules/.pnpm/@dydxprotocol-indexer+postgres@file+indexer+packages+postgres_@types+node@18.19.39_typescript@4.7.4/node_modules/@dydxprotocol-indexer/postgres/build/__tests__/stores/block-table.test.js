"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const BlockTable = __importStar(require("../../src/stores/block-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const constants_1 = require("../helpers/constants");
describe('Block store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a Block', async () => {
        await BlockTable.create(constants_1.defaultBlock);
    });
    it('Successfully finds all Blocks', async () => {
        await Promise.all([
            BlockTable.create(constants_1.defaultBlock),
            BlockTable.create(constants_1.defaultBlock2),
        ]);
        const blocks = await BlockTable.findAll({}, [], { readReplica: true });
        expect(blocks.length).toEqual(2);
        expect(blocks[0]).toEqual(expect.objectContaining(constants_1.defaultBlock));
        expect(blocks[1]).toEqual(expect.objectContaining(constants_1.defaultBlock2));
    });
    it('Successfully finds Block with block height', async () => {
        await Promise.all([
            BlockTable.create(constants_1.defaultBlock),
            BlockTable.create(constants_1.defaultBlock2),
        ]);
        const blocks = await BlockTable.findAll({
            blockHeight: ['1'],
        }, [], { readReplica: true });
        expect(blocks.length).toEqual(1);
        expect(blocks[0]).toEqual(expect.objectContaining(constants_1.defaultBlock));
    });
    it('Successfully finds a Block', async () => {
        await BlockTable.create(constants_1.defaultBlock);
        const block = await BlockTable.findByBlockHeight(constants_1.defaultBlock.blockHeight);
        expect(block).toEqual(expect.objectContaining(constants_1.defaultBlock));
    });
    it('Unable finds a Block', async () => {
        const block = await BlockTable.findByBlockHeight(constants_1.defaultBlock.blockHeight);
        expect(block).toEqual(undefined);
    });
    it('Successfully gets latest Block', async () => {
        await Promise.all([
            BlockTable.create(constants_1.defaultBlock),
            BlockTable.create(constants_1.defaultBlock2),
        ]);
        const block = await BlockTable.getLatest();
        expect(block).toEqual(expect.objectContaining(constants_1.defaultBlock2));
    });
    it('Unable to find latest Block', async () => {
        await expect(BlockTable.getLatest()).rejects.toEqual(new Error('Unable to find latest block'));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdGFibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL19fdGVzdHNfXy9zdG9yZXMvYmxvY2stdGFibGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EseUVBQTJEO0FBQzNELDZEQUlzQztBQUN0QyxvREFBbUU7QUFFbkUsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7SUFDM0IsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxvQkFBTyxHQUFFLENBQUM7SUFDbEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLHNCQUFTLEdBQUUsQ0FBQztJQUNwQixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUEscUJBQVEsR0FBRSxDQUFDO0lBQ25CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzVDLE1BQU0sVUFBVSxDQUFDLE1BQU0sQ0FBQyx3QkFBWSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0MsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLFVBQVUsQ0FBQyxNQUFNLENBQUMsd0JBQVksQ0FBQztZQUMvQixVQUFVLENBQUMsTUFBTSxDQUFDLHlCQUFhLENBQUM7U0FDakMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLEdBQXdCLE1BQU0sVUFBVSxDQUFDLE9BQU8sQ0FDMUQsRUFBRSxFQUNGLEVBQUUsRUFDRixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FDdEIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFD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