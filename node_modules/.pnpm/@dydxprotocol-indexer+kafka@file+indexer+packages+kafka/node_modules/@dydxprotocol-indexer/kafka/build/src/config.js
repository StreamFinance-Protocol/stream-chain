"use strict";
/**
 * Environment variables required for Kafka.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.kafkaConfigSchema = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
exports.kafkaConfigSchema = {
    // Required to set groupId and clientId for kafka.
    SERVICE_NAME: (0, base_1.parseString)(),
    KAFKA_BROKER_URLS: (0, base_1.parseString)({
        default: 'localhost:9092',
        requireInEnv: [base_1.NodeEnv.PRODUCTION, base_1.NodeEnv.STAGING],
    }),
    KAFKA_CONNECTION_TIMEOUT_MS: (0, base_1.parseInteger)({ default: 5000 }),
    KAFKA_SESSION_TIMEOUT_MS: (0, base_1.parseInteger)({ default: 60000 }),
    KAFKA_REBALANCE_TIMEOUT_MS: (0, base_1.parseInteger)({ default: 50000 }),
    KAFKA_HEARTBEAT_INTERVAL_MS: (0, base_1.parseInteger)({ default: 5000 }),
    KAFKA_CONCURRENT_PARTITIONS: (0, base_1.parseInteger)({ default: 1 }),
    // If true, consumers will have unique group ids, and SERVICE_NAME will be a common prefix for
    // the consumer group ids.
    KAFKA_ENABLE_UNIQUE_CONSUMER_GROUP_IDS: (0, base_1.parseBoolean)({ default: false }),
    // Set to a number smaller than the max message size for the Kafka broker
    KAFKA_MAX_BATCH_WEBSOCKET_MESSAGE_SIZE_BYTES: (0, base_1.parseInteger)({
        default: 900000, // ~900 kB, 100 kB smaller than the 1 MB default max size of messages in Kafka
    }),
};
exports.default = (0, base_1.parseSchema)(exports.kafkaConfigSchema);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILHFEQU1vQztBQUV2QixRQUFBLGlCQUFpQixHQUFHO0lBQy9CLGtEQUFrRDtJQUNsRCxZQUFZLEVBQUUsSUFBQSxrQkFBVyxHQUFFO0lBRTNCLGlCQUFpQixFQUFFLElBQUEsa0JBQVcsRUFBQztRQUM3QixPQUFPLEVBQUUsZ0JBQWdCO1FBQ3pCLFlBQVksRUFBRSxDQUFDLGNBQU8sQ0FBQyxVQUFVLEVBQUUsY0FBTyxDQUFDLE9BQU8sQ0FBQztLQUNwRCxDQUFDO0lBQ0YsMkJBQTJCLEVBQUUsSUFBQSxtQkFBWSxFQUFDLEVBQUUsT0FBTyxFQUFFLElBQUssRUFBRSxDQUFDO0lBQzdELHdCQUF3QixFQUFFLElBQUEsbUJBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxLQUFNLEVBQUUsQ0FBQztJQUMzRCwwQkFBMEIsRUFBRSxJQUFBLG1CQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUsS0FBTSxFQUFFLENBQUM7SUFDN0QsMkJBQTJCLEVBQUUsSUFBQSxtQkFBWSxFQUFDLEVBQUUsT0FBTyxFQUFFLElBQUssRUFBRSxDQUFDO0lBQzdELDJCQUEyQixFQUFFLElBQUEsbUJBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN6RCw4RkFBOEY7SUFDOUYsMEJBQTBCO0lBQzFCLHNDQUFzQyxFQUFFLElBQUEsbUJBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztJQUN4RSx5RUFBeUU7SUFDekUsNENBQTRDLEVBQUUsSUFBQSxtQkFBWSxFQUFDO1FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsOEVBQThFO0tBQ2hHLENBQUM7Q0FDSCxDQUFDO0FBRUYsa0JBQWUsSUFBQSxrQkFBVyxFQUFDLHlCQUFpQixDQUFDLENBQUMifQ==