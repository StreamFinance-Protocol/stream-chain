"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const AssetTable = __importStar(require("../../src/stores/asset-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const objection_1 = require("objection");
const constants_1 = require("../helpers/constants");
const MarketTable = __importStar(require("../../src/stores/market-table"));
describe('Asset store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    beforeEach(async () => {
        await Promise.all([
            MarketTable.create(constants_1.defaultMarket),
            MarketTable.create(constants_1.defaultMarket2),
        ]);
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
        jest.resetAllMocks();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
        jest.clearAllMocks();
    });
    it('Successfully creates a Asset', async () => {
        await AssetTable.create(constants_1.defaultAsset);
    });
    it('Fails to create second asset with the same ID', async () => {
        try {
            await Promise.all([
                AssetTable.create(constants_1.defaultAsset),
                AssetTable.create(constants_1.defaultAsset),
            ]);
        }
        catch (e) {
            expect(e).toBeInstanceOf(objection_1.UniqueViolationError);
        }
    });
    it('Successfully finds all Assets', async () => {
        await Promise.all([
            AssetTable.create(constants_1.defaultAsset),
            AssetTable.create(constants_1.defaultAsset2),
        ]);
        const assets = await AssetTable.findAll({}, [], { readReplica: true });
        expect(assets.length).toEqual(2);
        expect(assets[0]).toEqual(expect.objectContaining(constants_1.defaultAsset2));
        expect(assets[1]).toEqual(expect.objectContaining(constants_1.defaultAsset));
    });
    it('Successfully finds Asset with symbol', async () => {
        await Promise.all([
            AssetTable.create(constants_1.defaultAsset),
            AssetTable.create(constants_1.defaultAsset2),
        ]);
        const assets = await AssetTable.findAll({
            symbol: constants_1.defaultAsset.symbol,
        }, [], { readReplica: true });
        expect(assets.length).toEqual(1);
        expect(assets[0]).toEqual(expect.objectContaining(constants_1.defaultAsset));
    });
    it('Successfully finds a Asset', async () => {
        await AssetTable.create(constants_1.defaultAsset);
        const asset = await AssetTable.findById(constants_1.defaultAsset.id);
        expect(asset).toEqual(expect.objectContaining(constants_1.defaultAsset));
    });
    it('Unable finds a Asset', async () => {
        const asset = await AssetTable.findById(constants_1.defaultAsset.id);
        expect(asset).toEqual(undefined);
    });
    it('Successfully updates a asset', async () => {
        await AssetTable.create(constants_1.defaultAsset);
        const asset = await AssetTable.update({
            id: constants_1.defaultAsset.id,
            symbol: 'ETH',
        });
        expect(asset).toEqual(expect.objectContaining({
            ...constants_1.defaultAsset,
            symbol: 'ETH',
        }));
    });
    it('Fails to update asset to have same symbol as existing asset', async () => {
        try {
            await AssetTable.create(constants_1.defaultAsset);
            await AssetTable.create({
                id: '1', symbol: 'ETH', atomicResolution: -10, hasMarket: true,
            });
            await AssetTable.update({
                id: constants_1.defaultAsset.id,
                symbol: 'ETH',
            });
        }
        catch (e) {
            expect(e).toBeInstanceOf(objection_1.UniqueViolationError);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtdGFibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL19fdGVzdHNfXy9zdG9yZXMvYXNzZXQtdGFibGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EseUVBQTJEO0FBQzNELDZEQUlzQztBQUN0Qyx5Q0FBaUQ7QUFDakQsb0RBSzhCO0FBQzlCLDJFQUE2RDtBQUU3RCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLG9CQUFPLEdBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDaEIsV0FBVyxDQUFDLE1BQU0sQ0FBQyx5QkFBYSxDQUFDO1lBQ2pDLFdBQVcsQ0FBQyxNQUFNLENBQUMsMEJBQWMsQ0FBQztTQUNuQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsc0JBQVMsR0FBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUEscUJBQVEsR0FBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1QyxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsd0JBQVksQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFF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