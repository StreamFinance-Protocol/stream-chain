"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const batch_kafka_producer_1 = require("../src/batch-kafka-producer");
const producer_1 = require("../src/producer");
const lodash_1 = __importDefault(require("lodash"));
function testMessage2ProducerMessage(data) {
    const key = data.key === undefined ? undefined : Buffer.from(data.key);
    return { key, value: Buffer.from(data.value) };
}
function testMessage2ProducerMessages(data) {
    return lodash_1.default.map(data, (d) => testMessage2ProducerMessage(d));
}
describe('batch-kafka-producer', () => {
    let producerSendMock;
    beforeAll(() => {
        producerSendMock = jest.spyOn(producer_1.producer, 'send');
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    afterAll(() => {
        jest.resetAllMocks();
    });
    it.each([
        [
            'will send key if key is not undefined',
            5,
            [{ key: '1', value: 'a' }, { key: '2', value: 'b' }, { key: '3', value: 'c' }],
            [[{ key: '1', value: 'a' }, { key: '2', value: 'b' }]],
            [{ key: '3', value: 'c' }],
        ],
        [
            'will not send message until the batch size is reached',
            5,
            [{ value: 'a' }, { value: 'b' }, { value: 'c' }, { value: 'd' }],
            [],
            [{ value: 'a' }, { value: 'b' }, { value: 'c' }, { value: 'd' }],
        ],
        [
            'will send message when new message would surpass buffer size',
            5,
            [{ value: 'a' }, { value: 'b' }, { value: 'c' }, { value: 'd' }, { value: 'e' }, { value: 'f' }],
            [[{ value: 'a' }, { value: 'b' }, { value: 'c' }, { value: 'd' }, { value: 'e' }]],
            [{ value: 'f' }],
        ],
        [
            'maxBatchSize uses bytelength of input message to determine current batch fill size',
            5,
            [{ value: 'hiya' }, { value: 'there' }, { value: 'how' }, { value: 'are' }, { value: 'you' }],
            [
                [{ value: 'hiya' }],
                [{ value: 'there' }],
                [{ value: 'how' }],
                [{ value: 'are' }],
            ],
            [{ value: 'you' }],
        ],
        [
            'will batch messages that fit within maxBatchSize',
            6,
            [
                { value: 'hiya' },
                { value: 'a' },
                { value: 'b' },
                { value: 'there' },
                { value: 'c' },
                { value: 'd' },
                { value: 'how' },
                { value: 'e' },
                { value: 'f' },
                { value: 'are' },
                { value: 'g' },
                { value: 'h' },
                { value: 'you' },
                { value: 'i' },
            ],
            [
                [{ value: 'hiya' }, { value: 'a' }, { value: 'b' }],
                [{ value: 'there' }, { value: 'c' }],
                [{ value: 'd' }, { value: 'how' }, { value: 'e' }, { value: 'f' }],
                [{ value: 'are' }, { value: 'g' }, { value: 'h' }],
            ],
            [{ value: 'you' }, { value: 'i' }],
        ],
    ])('%s', async (_name, batchSize, messages, expectedMessagesPerCall, expectedMessagesOnFlush) => {
        const topic = src_1.KafkaTopics.TO_VULCAN;
        const batchProducer = new batch_kafka_producer_1.BatchKafkaProducer(topic, producer_1.producer, batchSize);
        for (const msg of messages) {
            const key = msg.key === undefined ? undefined : Buffer.from(msg.key);
            batchProducer.addMessageAndMaybeFlush({ value: Buffer.from(msg.value), key });
        }
        expect(producerSendMock.mock.calls).toHaveLength(expectedMessagesPerCall.length);
        for (const [index, expectedMessages] of expectedMessagesPerCall.entries()) {
            expect(producerSendMock.mock.calls[index]).toEqual([
                { topic, messages: testMessage2ProducerMessages(expectedMessages) },
            ]);
        }
        await batchProducer.flush();
        expect(producerSendMock.mock.lastCall).toEqual([
            { topic, messages: testMessage2ProducerMessages(expectedMessagesOnFlush) },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gta2Fma2EtcHJvZHVjZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL19fdGVzdHNfXy9iYXRjaC1rYWZrYS1wcm9kdWNlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0NBQXFDO0FBQ3JDLHNFQUFrRjtBQUNsRiw4Q0FBMkM7QUFDM0Msb0RBQXVCO0FBT3ZCLFNBQVMsMkJBQTJCLENBQUMsSUFBaUI7SUFDcEQsTUFBTSxHQUFHLEdBQXVCLElBQUksQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNGLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDakQsQ0FBQztBQUVELFNBQVMsNEJBQTRCLENBQUMsSUFBbUI7SUFDdkQsT0FBTyxnQkFBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUVELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsSUFBSSxnQkFBa0MsQ0FBQztJQUN2QyxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxHQUFHLEVBQUU7UUFDWixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQ047WUFDRSx1Q0FBdUM7WUFDdkMsQ0FBQztZQUNELENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDOUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztTQUMzQjtRQUNEO1lBQ0UsdURBQXVEO1lBQ3ZELENBQUM7WUFDRCxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2hFLEVBQUU7WUFDRixDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDO1NBQ2pFO1FBQ0Q7WUFDRSw4REFBOEQ7WUFDOUQsQ0FBQztZQUNELENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDaEcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFDbEYsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztTQUNqQjtRQUNEO1lBQ0Usb0ZBQW9GO1lBQ3BGLENBQUM7WUFDRCxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQzdGO2dCQUNFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUM7Z0JBQ25CLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUM7Z0JBQ3BCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7Z0JBQ2xCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDbkI7WUFDRCxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO1NBQ25CO1FBQ0Q7WUFDRSxrREFBa0Q7WUFDbEQsQ0FBQztZQUNEO2dCQUNFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTtnQkFDakIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNkLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7Z0JBQ2xCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO2dCQUNoQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNkLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtnQkFDaEIsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO2dCQUNkLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtnQkFDZCxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7Z0JBQ2hCLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTthQUNmO1lBQ0Q7Z0JBQ0UsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbkQsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDcEMsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztnQkFDbEUsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQzthQUNuRDtZQUNELENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDbkM7S0FDRixDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFDWixLQUFhLEVBQ2IsU0FBaUIsRUFDakIsUUFBdUIsRUFDdkIsdUJBQXdDLEVBQ3hDLHVCQUFzQyxFQUN0QyxFQUFFO1FBQ0YsTUFBTSxLQUFLLEdBQWdCLGlCQUFXLENBQUMsU0FBUyxDQUFDO1FBQ2pELE1BQU0sYUFBYSxHQUF1QixJQUFJLHlDQUFrQixDQUFDLEtBQUssRUFBRSxtQkFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTdGLEtBQUssTUFBTSxHQUFHLElBQUksUUFBUSxFQUFFO1lBQzFCLE1BQU0sR0FBRyxHQUF1QixHQUFHLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN6RixhQUFhLENBQUMsdUJBQXVCLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUMvRTtRQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pGLEtBQUssTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxJQUFJLHVCQUF1QixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3pFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNqRCxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsNEJBQTRCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTthQUNwRSxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO1lBQzdDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSw0QkFBNEIsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFO1NBQzNFLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==