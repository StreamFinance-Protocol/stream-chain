// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	abcitypes "github.com/cometbft/cometbft/abci/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ProcessProposalPriceApplier is an autogenerated mock type for the ProcessProposalPriceApplier type
type ProcessProposalPriceApplier struct {
	mock.Mock
}

// ApplyPricesFromVE provides a mock function with given fields: ctx, req
func (_m *ProcessProposalPriceApplier) ApplyPricesFromVE(ctx types.Context, req *abcitypes.RequestFinalizeBlock) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *abcitypes.RequestFinalizeBlock) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProcessProposalPriceApplier interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessProposalPriceApplier creates a new instance of ProcessProposalPriceApplier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessProposalPriceApplier(t mockConstructorTestingTNewProcessProposalPriceApplier) *ProcessProposalPriceApplier {
	mock := &ProcessProposalPriceApplier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
