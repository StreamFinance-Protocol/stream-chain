import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import * as t from '@babel/types';
import { identifier, tsPropertySignature, functionDeclaration, makeCommentBlock } from '../../../utils';
import { getBaseCreateTypeFuncName, getFieldOptionality, getOneOfs } from '../types';
import { createProtoTypeOptionsDefaults, getDefaultTSTypeFromProtoType, getFieldTypeReference, getMessageName, getTSType } from '../../types';

const getProtoField = (context, field, options = createProtoTypeOptionsDefaults) => {
  let ast = null;
  ast = getFieldTypeReference(context, field, options);

  if (field.rule === 'repeated') {
    ast = t.tsArrayType(ast);
  }

  if (field.keyType) {
    ast = t.tsUnionType([t.tsTypeLiteral([t.tsIndexSignature([identifier('key', t.tsTypeAnnotation(getTSType(context, field.keyType)))], t.tsTypeAnnotation(ast))])]);
  }

  return ast;
};

export const createProtoType = (context, name, proto, options = createProtoTypeOptionsDefaults) => {
  const oneOfs = getOneOfs(proto); // MARKED AS COSMOS SDK specific code

  const optionalityMap = {}; // if a param is found to be a route parameter, we assume it's required
  // if a param is found to be a query parameter, we assume it's optional

  if (context.pluginValue('prototypes.optionalQueryParams') && context.store.requests[name]) {
    const svc = context.store.requests[name];

    if (svc.info) {
      svc.info.queryParams.map(param => {
        optionalityMap[param] = true;
      });
    }
  } // hard-code optionality for pagination


  if (context.pluginValue('prototypes.optionalPageRequests')) {
    if (context.ref.proto.package === 'cosmos.base.query.v1beta1') {
      if (name === 'PageRequest') {
        optionalityMap['key'] = true;
        optionalityMap['offset'] = true;
        optionalityMap['limit'] = true;
        optionalityMap['count_total'] = true;
        optionalityMap['countTotal'] = true;
        optionalityMap['reverse'] = true;
      }

      if (name === 'PageResponse') {
        optionalityMap['next_key'] = true;
        optionalityMap['nextKey'] = true;
      }
    }
  }

  const MsgName = getMessageName(name, options); // declaration

  const declaration = t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(MsgName), null, [], t.tsInterfaceBody(Object.keys(proto.fields).reduce((m, fieldName) => {
    const isOneOf = oneOfs.includes(fieldName);
    const field = proto.fields[fieldName]; // optionalityMap is coupled to API requests

    const orig = field.options?.['(telescope:orig)'] ?? fieldName;
    let optional = false;

    if (optionalityMap[orig]) {
      optional = true;
    }

    const fieldNameWithCase = options.useOriginalCase ? orig : fieldName;
    const propSig = tsPropertySignature(t.identifier(fieldNameWithCase), t.tsTypeAnnotation(getProtoField(context, field, options)), optional || getFieldOptionality(context, field, isOneOf));
    const comments = [];

    if (field.comment) {
      comments.push(makeCommentBlock(field.comment));
    }

    if (field.options?.deprecated) {
      comments.push(makeCommentBlock('@deprecated'));
    }

    if (comments.length) {
      propSig.leadingComments = comments;
    }

    m.push(propSig);
    return m;
  }, []))));
  const comments = [];

  if (proto.comment) {
    comments.push(makeCommentBlock(proto.comment));
  }

  if (proto.options?.deprecated) {
    comments.push(makeCommentBlock('@deprecated'));
  }

  if (comments.length) {
    declaration.leadingComments = comments;
  }

  return declaration;
};
export const createCreateProtoType = (context, name, proto) => {
  const oneOfs = getOneOfs(proto);
  const fields = Object.keys(proto.fields).map(key => {
    const isOneOf = oneOfs.includes(key);
    const isOptional = getFieldOptionality(context, proto.fields[key], isOneOf);
    return _objectSpread(_objectSpread({
      name: key
    }, proto.fields[key]), {}, {
      isOneOf,
      isOptional
    });
  }).map(field => {
    return t.objectProperty(t.identifier(field.name), getDefaultTSTypeFromProtoType(context, field, field.isOneOf));
  });
  return functionDeclaration(t.identifier(getBaseCreateTypeFuncName(name)), [], t.blockStatement([t.returnStatement(t.objectExpression([...fields]))]), false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))));
};