// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	api "github.com/StreamFinance-Protocol/stream-chain/protocol/daemons/sdaioracle/api"
	mock "github.com/stretchr/testify/mock"
)

// SDAIEventManager is an autogenerated mock type for the SDAIEventManager type
type SDAIEventManager struct {
	mock.Mock
}

// AddsDAIEvent provides a mock function with given fields: event
func (_m *SDAIEventManager) AddsDAIEvent(event *api.AddsDAIEventsRequest) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for AddsDAIEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.AddsDAIEventsRequest) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSDaiPrice provides a mock function with given fields:
func (_m *SDAIEventManager) GetSDaiPrice() api.AddsDAIEventsRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSDaiPrice")
	}

	var r0 api.AddsDAIEventsRequest
	if rf, ok := ret.Get(0).(func() api.AddsDAIEventsRequest); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(api.AddsDAIEventsRequest)
	}

	return r0
}

// NewSDAIEventManager creates a new instance of SDAIEventManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSDAIEventManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SDAIEventManager {
	mock := &SDAIEventManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
