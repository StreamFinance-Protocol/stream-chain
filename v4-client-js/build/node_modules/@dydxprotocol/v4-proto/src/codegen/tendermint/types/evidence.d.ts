/// <reference types="long" />
import { Vote, VoteSDKType, LightBlock, LightBlockSDKType } from "./types";
import { Validator, ValidatorSDKType } from "./validator";
import * as _m0 from "protobufjs/minimal";
import { Long } from "../../helpers";
export interface Evidence {
    duplicateVoteEvidence?: DuplicateVoteEvidence;
    lightClientAttackEvidence?: LightClientAttackEvidence;
}
export interface EvidenceSDKType {
    duplicate_vote_evidence?: DuplicateVoteEvidenceSDKType;
    light_client_attack_evidence?: LightClientAttackEvidenceSDKType;
}
/** DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes. */
export interface DuplicateVoteEvidence {
    voteA?: Vote;
    voteB?: Vote;
    totalVotingPower: Long;
    validatorPower: Long;
    timestamp?: Date;
}
/** DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes. */
export interface DuplicateVoteEvidenceSDKType {
    vote_a?: VoteSDKType;
    vote_b?: VoteSDKType;
    total_voting_power: Long;
    validator_power: Long;
    timestamp?: Date;
}
/** LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client. */
export interface LightClientAttackEvidence {
    conflictingBlock?: LightBlock;
    commonHeight: Long;
    byzantineValidators: Validator[];
    totalVotingPower: Long;
    timestamp?: Date;
}
/** LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client. */
export interface LightClientAttackEvidenceSDKType {
    conflicting_block?: LightBlockSDKType;
    common_height: Long;
    byzantine_validators: ValidatorSDKType[];
    total_voting_power: Long;
    timestamp?: Date;
}
export interface EvidenceList {
    evidence: Evidence[];
}
export interface EvidenceListSDKType {
    evidence: EvidenceSDKType[];
}
export declare const Evidence: {
    encode(message: Evidence, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Evidence;
    fromPartial(object: {
        duplicateVoteEvidence?: {
            voteA?: {
                type?: import("./types").SignedMsgType | undefined;
                height?: string | number | Long.Long | undefined;
                round?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: Date | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
                extension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
            } | undefined;
            voteB?: {
                type?: import("./types").SignedMsgType | undefined;
                height?: string | number | Long.Long | undefined;
                round?: number | undefined;
                blockId?: {
                    hash?: Uint8Array | undefined;
                    partSetHeader?: {
                        total?: number | undefined;
                        hash?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                timestamp?: Date | undefined;
                validatorAddress?: Uint8Array | undefined;
                validatorIndex?: number | undefined;
                signature?: Uint8Array | undefined;
                extension?: Uint8Array | undefined;
                extensionSignature?: Uint8Array | undefined;
            } | undefined;
            totalVotingPower?: string | number | Long.Long | undefined;
            validatorPower?: string | number | Long.Long | undefined;
            timestamp?: Date | undefined;
        } | undefined;
        lightClientAttackEvidence?: {
            conflictingBlock?: {
                signedHeader?: {
                    header?: {
                        version?: {
                            block?: string | number | Long.Long | undefined;
                            app?: string | number | Long.Long | undefined;
                        } | undefined;
                        chainId?: string | undefined;
                        height?: string | number | Long.Long | undefined;
                        time?: Date | undefined;
                        lastBlockId?: {
                            hash?: Uint8Array | undefined;
                            partSetHeader?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        lastCommitHash?: Uint8Array | undefined;
                        dataHash?: Uint8Array | undefined;
                        validatorsHash?: Uint8Array | undefined;
                        nextValidatorsHash?: Uint8Array | undefined;
                        consensusHash?: Uint8Array | undefined;
                        appHash?: Uint8Array | undefined;
                        lastResultsHash?: Uint8Array | undefined;
                        evidenceHash?: Uint8Array | undefined;
                        proposerAddress?: Uint8Array | undefined;
                    } | undefined;
                    commit?: {
                        height?: string | number | Long.Long | undefined;
                        round?: number | undefined;
                        blockId?: {
                            hash?: Uint8Array | undefined;
                            partSetHeader?: {
                                total?: number | undefined;
                                hash?: Uint8Array | undefined;
                            } | undefined;
                        } | undefined;
                        signatures?: {
                            blockIdFlag?: import("./validator").BlockIDFlag | undefined;
                            validatorAddress?: Uint8Array | undefined;
                            timestamp?: Date | undefined;
                            signature?: Uint8Array | undefined;
                        }[] | undefined;
                    } | undefined;
                } | undefined;
                validatorSet?: {
                    validators?: {
                        address?: Uint8Array | undefined;
                        pubKey?: {
                            ed25519?: Uint8Array | undefined;
                            secp256k1?: Uint8Array | undefined;
                        } | undefined;
                        votingPower?: string | number | Long.Long | undefined;
                        proposerPriority?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    proposer?: {
                        address?: Uint8Array | undefined;
                        pubKey?: {
                            ed25519?: Uint8Array | undefined;
                            secp256k1?: Uint8Array | undefined;
                        } | undefined;
                        votingPower?: string | number | Long.Long | undefined;
                        proposerPriority?: string | number | Long.Long | undefined;
                    } | undefined;
                    totalVotingPower?: string | number | Long.Long | undefined;
                } | undefined;
            } | undefined;
            commonHeight?: string | number | Long.Long | undefined;
            byzantineValidators?: {
                address?: Uint8Array | undefined;
                pubKey?: {
                    ed25519?: Uint8Array | undefined;
                    secp256k1?: Uint8Array | undefined;
                } | undefined;
                votingPower?: string | number | Long.Long | undefined;
                proposerPriority?: string | number | Long.Long | undefined;
            }[] | undefined;
            totalVotingPower?: string | number | Long.Long | undefined;
            timestamp?: Date | undefined;
        } | undefined;
    }): Evidence;
};
export declare const DuplicateVoteEvidence: {
    encode(message: DuplicateVoteEvidence, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): DuplicateVoteEvidence;
    fromPartial(object: {
        voteA?: {
            type?: import("./types").SignedMsgType | undefined;
            height?: string | number | Long.Long | undefined;
            round?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: Date | undefined;
            validatorAddress?: Uint8Array | undefined;
            validatorIndex?: number | undefined;
            signature?: Uint8Array | undefined;
            extension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
        } | undefined;
        voteB?: {
            type?: import("./types").SignedMsgType | undefined;
            height?: string | number | Long.Long | undefined;
            round?: number | undefined;
            blockId?: {
                hash?: Uint8Array | undefined;
                partSetHeader?: {
                    total?: number | undefined;
                    hash?: Uint8Array | undefined;
                } | undefined;
            } | undefined;
            timestamp?: Date | undefined;
            validatorAddress?: Uint8Array | undefined;
            validatorIndex?: number | undefined;
            signature?: Uint8Array | undefined;
            extension?: Uint8Array | undefined;
            extensionSignature?: Uint8Array | undefined;
        } | undefined;
        totalVotingPower?: string | number | Long.Long | undefined;
        validatorPower?: string | number | Long.Long | undefined;
        timestamp?: Date | undefined;
    }): DuplicateVoteEvidence;
};
export declare const LightClientAttackEvidence: {
    encode(message: LightClientAttackEvidence, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LightClientAttackEvidence;
    fromPartial(object: {
        conflictingBlock?: {
            signedHeader?: {
                header?: {
                    version?: {
                        block?: string | number | Long.Long | undefined;
                        app?: string | number | Long.Long | undefined;
                    } | undefined;
                    chainId?: string | undefined;
                    height?: string | number | Long.Long | undefined;
                    time?: Date | undefined;
                    lastBlockId?: {
                        hash?: Uint8Array | undefined;
                        partSetHeader?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    lastCommitHash?: Uint8Array | undefined;
                    dataHash?: Uint8Array | undefined;
                    validatorsHash?: Uint8Array | undefined;
                    nextValidatorsHash?: Uint8Array | undefined;
                    consensusHash?: Uint8Array | undefined;
                    appHash?: Uint8Array | undefined;
                    lastResultsHash?: Uint8Array | undefined;
                    evidenceHash?: Uint8Array | undefined;
                    proposerAddress?: Uint8Array | undefined;
                } | undefined;
                commit?: {
                    height?: string | number | Long.Long | undefined;
                    round?: number | undefined;
                    blockId?: {
                        hash?: Uint8Array | undefined;
                        partSetHeader?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    signatures?: {
                        blockIdFlag?: import("./validator").BlockIDFlag | undefined;
                        validatorAddress?: Uint8Array | undefined;
                        timestamp?: Date | undefined;
                        signature?: Uint8Array | undefined;
                    }[] | undefined;
                } | undefined;
            } | undefined;
            validatorSet?: {
                validators?: {
                    address?: Uint8Array | undefined;
                    pubKey?: {
                        ed25519?: Uint8Array | undefined;
                        secp256k1?: Uint8Array | undefined;
                    } | undefined;
                    votingPower?: string | number | Long.Long | undefined;
                    proposerPriority?: string | number | Long.Long | undefined;
                }[] | undefined;
                proposer?: {
                    address?: Uint8Array | undefined;
                    pubKey?: {
                        ed25519?: Uint8Array | undefined;
                        secp256k1?: Uint8Array | undefined;
                    } | undefined;
                    votingPower?: string | number | Long.Long | undefined;
                    proposerPriority?: string | number | Long.Long | undefined;
                } | undefined;
                totalVotingPower?: string | number | Long.Long | undefined;
            } | undefined;
        } | undefined;
        commonHeight?: string | number | Long.Long | undefined;
        byzantineValidators?: {
            address?: Uint8Array | undefined;
            pubKey?: {
                ed25519?: Uint8Array | undefined;
                secp256k1?: Uint8Array | undefined;
            } | undefined;
            votingPower?: string | number | Long.Long | undefined;
            proposerPriority?: string | number | Long.Long | undefined;
        }[] | undefined;
        totalVotingPower?: string | number | Long.Long | undefined;
        timestamp?: Date | undefined;
    }): LightClientAttackEvidence;
};
export declare const EvidenceList: {
    encode(message: EvidenceList, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): EvidenceList;
    fromPartial(object: {
        evidence?: {
            duplicateVoteEvidence?: {
                voteA?: {
                    type?: import("./types").SignedMsgType | undefined;
                    height?: string | number | Long.Long | undefined;
                    round?: number | undefined;
                    blockId?: {
                        hash?: Uint8Array | undefined;
                        partSetHeader?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    timestamp?: Date | undefined;
                    validatorAddress?: Uint8Array | undefined;
                    validatorIndex?: number | undefined;
                    signature?: Uint8Array | undefined;
                    extension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                } | undefined;
                voteB?: {
                    type?: import("./types").SignedMsgType | undefined;
                    height?: string | number | Long.Long | undefined;
                    round?: number | undefined;
                    blockId?: {
                        hash?: Uint8Array | undefined;
                        partSetHeader?: {
                            total?: number | undefined;
                            hash?: Uint8Array | undefined;
                        } | undefined;
                    } | undefined;
                    timestamp?: Date | undefined;
                    validatorAddress?: Uint8Array | undefined;
                    validatorIndex?: number | undefined;
                    signature?: Uint8Array | undefined;
                    extension?: Uint8Array | undefined;
                    extensionSignature?: Uint8Array | undefined;
                } | undefined;
                totalVotingPower?: string | number | Long.Long | undefined;
                validatorPower?: string | number | Long.Long | undefined;
                timestamp?: Date | undefined;
            } | undefined;
            lightClientAttackEvidence?: {
                conflictingBlock?: {
                    signedHeader?: {
                        header?: {
                            version?: {
                                block?: string | number | Long.Long | undefined;
                                app?: string | number | Long.Long | undefined;
                            } | undefined;
                            chainId?: string | undefined;
                            height?: string | number | Long.Long | undefined;
                            time?: Date | undefined;
                            lastBlockId?: {
                                hash?: Uint8Array | undefined;
                                partSetHeader?: {
                                    total?: number | undefined;
                                    hash?: Uint8Array | undefined;
                                } | undefined;
                            } | undefined;
                            lastCommitHash?: Uint8Array | undefined;
                            dataHash?: Uint8Array | undefined;
                            validatorsHash?: Uint8Array | undefined;
                            nextValidatorsHash?: Uint8Array | undefined;
                            consensusHash?: Uint8Array | undefined;
                            appHash?: Uint8Array | undefined;
                            lastResultsHash?: Uint8Array | undefined;
                            evidenceHash?: Uint8Array | undefined;
                            proposerAddress?: Uint8Array | undefined;
                        } | undefined;
                        commit?: {
                            height?: string | number | Long.Long | undefined;
                            round?: number | undefined;
                            blockId?: {
                                hash?: Uint8Array | undefined;
                                partSetHeader?: {
                                    total?: number | undefined;
                                    hash?: Uint8Array | undefined;
                                } | undefined;
                            } | undefined;
                            signatures?: {
                                blockIdFlag?: import("./validator").BlockIDFlag | undefined;
                                validatorAddress?: Uint8Array | undefined;
                                timestamp?: Date | undefined;
                                signature?: Uint8Array | undefined;
                            }[] | undefined;
                        } | undefined;
                    } | undefined;
                    validatorSet?: {
                        validators?: {
                            address?: Uint8Array | undefined;
                            pubKey?: {
                                ed25519?: Uint8Array | undefined;
                                secp256k1?: Uint8Array | undefined;
                            } | undefined;
                            votingPower?: string | number | Long.Long | undefined;
                            proposerPriority?: string | number | Long.Long | undefined;
                        }[] | undefined;
                        proposer?: {
                            address?: Uint8Array | undefined;
                            pubKey?: {
                                ed25519?: Uint8Array | undefined;
                                secp256k1?: Uint8Array | undefined;
                            } | undefined;
                            votingPower?: string | number | Long.Long | undefined;
                            proposerPriority?: string | number | Long.Long | undefined;
                        } | undefined;
                        totalVotingPower?: string | number | Long.Long | undefined;
                    } | undefined;
                } | undefined;
                commonHeight?: string | number | Long.Long | undefined;
                byzantineValidators?: {
                    address?: Uint8Array | undefined;
                    pubKey?: {
                        ed25519?: Uint8Array | undefined;
                        secp256k1?: Uint8Array | undefined;
                    } | undefined;
                    votingPower?: string | number | Long.Long | undefined;
                    proposerPriority?: string | number | Long.Long | undefined;
                }[] | undefined;
                totalVotingPower?: string | number | Long.Long | undefined;
                timestamp?: Date | undefined;
            } | undefined;
        }[] | undefined;
    }): EvidenceList;
};
