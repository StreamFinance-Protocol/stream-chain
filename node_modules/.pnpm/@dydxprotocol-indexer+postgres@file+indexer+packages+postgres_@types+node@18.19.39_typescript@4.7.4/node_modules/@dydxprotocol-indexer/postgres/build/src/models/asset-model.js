"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
class AssetModel extends objection_1.Model {
    static get tableName() {
        return 'assets';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'symbol',
                'atomicResolution',
                'hasMarket',
            ],
            properties: {
                id: { type: 'string', pattern: validators_1.IntegerPattern },
                symbol: { type: 'string' },
                atomicResolution: { type: 'integer' },
                hasMarket: { type: 'boolean', default: false },
                marketId: { type: ['integer', 'null'] },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            symbol: 'string',
            atomicResolution: 'integer',
            hasMarket: 'boolean',
            marketId: 'integer',
        };
    }
}
exports.default = AssetModel;
AssetModel.relationMappings = {
    assetPosition: {
        relation: objection_1.Model.HasManyRelation,
        modelClass: path_1.default.join(__dirname, 'asset-position-model'),
        join: {
            from: 'assets.id',
            to: 'asset_positions.assetId',
        },
    },
    transfers: {
        relation: objection_1.Model.HasManyRelation,
        modelClass: path_1.default.join(__dirname, 'transfer-model'),
        join: {
            from: 'assets.id',
            to: 'transfers.assetId',
        },
    },
    markets: {
        relation: objection_1.Model.HasOneRelation,
        modelClass: path_1.default.join(__dirname, 'market-model'),
        join: {
            from: 'assets.marketId',
            to: 'markets.id',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL2Fzc2V0LW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHlDQUFrQztBQUVsQyxrREFBbUQ7QUFFbkQsTUFBcUIsVUFBVyxTQUFRLGlCQUFLO0lBQzNDLE1BQU0sS0FBSyxTQUFTO1FBQ2xCLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUE2QkQsTUFBTSxLQUFLLFVBQVU7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFO2dCQUNSLElBQUk7Z0JBQ0osUUFBUTtnQkFDUixrQkFBa0I7Z0JBQ2xCLFdBQVc7YUFDWjtZQUNELFVBQVUsRUFBRTtnQkFDVixFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2dCQUMvQyxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUMxQixnQkFBZ0IsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQ3JDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtnQkFDOUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxFQUFFO2FBQ3hDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxvQkFBb0I7UUFDN0IsT0FBTztZQUNMLEVBQUUsRUFBRSxRQUFRO1lBQ1osTUFBTSxFQUFFLFFBQVE7WUFDaEIsZ0JBQWdCLEVBQUUsU0FBUztZQUMzQixTQUFTLEVBQUUsU0FBUztZQUNwQixRQUFRLEVBQUUsU0FBUztTQUNwQixDQUFDO0lBQ0osQ0FBQzs7QUFyRUgsNkJBZ0ZDO0FBdkVRLDJCQUFnQixHQUFHO0lBQ3hCLGFBQWEsRUFBRTtRQUNiLFFBQVEsRUFBRSxpQkFBSyxDQUFDLGVBQWU7UUFDL0IsVUFBVSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLHNCQUFzQixDQUFDO1FBQ3hELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxXQUFXO1lBQ2pCLEVBQUUsRUFBRSx5QkFBeUI7U0FDOUI7S0FDRjtJQUNELFNBQVMsRUFBRTtRQUNULFFBQVEsRUFBRSxpQkFBSyxDQUFDLGVBQWU7UUFDL0IsVUFBVSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGdCQUFnQixDQUFDO1FBQ2xELElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxXQUFXO1lBQ2pCLEVBQUUsRUFBRSxtQkFBbUI7U0FDeEI7S0FDRjtJQUNELE9BQU8sRUFBRTtRQUNQLFFBQVEsRUFBRSxpQkFBSyxDQUFDLGNBQWM7UUFDOUIsVUFBVSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQztRQUNoRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsaUJBQWlCO1lBQ3ZCLEVBQUUsRUFBRSxZQUFZO1NBQ2pCO0tBQ0Y7Q0FDRixDQUFDIn0=