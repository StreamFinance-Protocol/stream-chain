import Knex from 'knex';
import { Options, OraclePriceCreateObject, OraclePriceFromDatabase, OraclePriceQueryConfig, PriceMap, QueryableField } from '../types';
export declare function uuid(marketId: number, height: string): string;
export declare function findAll({ limit, id, marketId, price, effectiveAt, effectiveAtHeight, effectiveBeforeOrAt, effectiveBeforeOrAtHeight, }: OraclePriceQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<OraclePriceFromDatabase[]>;
export declare function create(oraclePriceToCreate: OraclePriceCreateObject, options?: Options): Promise<OraclePriceFromDatabase>;
export declare function findById(id: string, options?: Options): Promise<OraclePriceFromDatabase | undefined>;
export declare function findOraclePricesInReverseChronologicalOrder(marketId: number, options?: Options): Promise<OraclePriceFromDatabase[] | undefined>;
export declare function findMostRecentMarketOraclePrice(marketId: number, options?: Options): Promise<OraclePriceFromDatabase | undefined>;
export declare function getPricesFrom24hAgo(): Promise<PriceMap>;
export declare function getLatestPrices(): Promise<PriceMap>;
export declare function findLatestPrices(effectiveBeforeOrAtHeight: string, transaction?: Knex.Transaction): Promise<PriceMap>;
