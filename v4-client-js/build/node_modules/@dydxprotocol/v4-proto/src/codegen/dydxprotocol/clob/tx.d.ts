/// <reference types="long" />
import { Order, OrderSDKType, OrderId, OrderIdSDKType } from "./order";
import { ClobPair, ClobPairSDKType } from "./clob_pair";
import { EquityTierLimitConfiguration, EquityTierLimitConfigurationSDKType } from "./equity_tier_limit_config";
import { BlockRateLimitConfiguration, BlockRateLimitConfigurationSDKType } from "./block_rate_limit_config";
import { LiquidationsConfig, LiquidationsConfigSDKType } from "./liquidations_config";
import { ClobMatch, ClobMatchSDKType } from "./matches";
import { OrderRemoval, OrderRemovalSDKType } from "./order_removals";
import * as _m0 from "protobufjs/minimal";
/** MsgCreateClobPair is a message used by x/gov for creating a new clob pair. */
export interface MsgCreateClobPair {
    /** The address that controls the module. */
    authority: string;
    /** `clob_pair` defines parameters for the new clob pair. */
    clobPair?: ClobPair;
}
/** MsgCreateClobPair is a message used by x/gov for creating a new clob pair. */
export interface MsgCreateClobPairSDKType {
    authority: string;
    clob_pair?: ClobPairSDKType;
}
/** MsgCreateClobPairResponse defines the CreateClobPair response type. */
export interface MsgCreateClobPairResponse {
}
/** MsgCreateClobPairResponse defines the CreateClobPair response type. */
export interface MsgCreateClobPairResponseSDKType {
}
/**
 * MsgProposedOperations is a message injected by block proposers to
 * specify the operations that occurred in a block.
 */
export interface MsgProposedOperations {
    /** The list of operations proposed by the block proposer. */
    operationsQueue: OperationRaw[];
}
/**
 * MsgProposedOperations is a message injected by block proposers to
 * specify the operations that occurred in a block.
 */
export interface MsgProposedOperationsSDKType {
    operations_queue: OperationRawSDKType[];
}
/**
 * MsgProposedOperationsResponse is the response type of the message injected
 * by block proposers to specify the operations that occurred in a block.
 */
export interface MsgProposedOperationsResponse {
}
/**
 * MsgProposedOperationsResponse is the response type of the message injected
 * by block proposers to specify the operations that occurred in a block.
 */
export interface MsgProposedOperationsResponseSDKType {
}
/** MsgPlaceOrder is a request type used for placing orders. */
export interface MsgPlaceOrder {
    /** MsgPlaceOrder is a request type used for placing orders. */
    order?: Order;
}
/** MsgPlaceOrder is a request type used for placing orders. */
export interface MsgPlaceOrderSDKType {
    order?: OrderSDKType;
}
/** MsgPlaceOrderResponse is a response type used for placing orders. */
export interface MsgPlaceOrderResponse {
}
/** MsgPlaceOrderResponse is a response type used for placing orders. */
export interface MsgPlaceOrderResponseSDKType {
}
/** MsgCancelOrder is a request type used for canceling orders. */
export interface MsgCancelOrder {
    orderId?: OrderId;
    /**
     * The last block this order cancellation can be executed at.
     * Used only for Short-Term orders and must be zero for stateful orders.
     */
    goodTilBlock?: number;
    /**
     * good_til_block_time represents the unix timestamp (in seconds) at which a
     * stateful order cancellation will be considered expired. The
     * good_til_block_time is always evaluated against the previous block's
     * `BlockTime` instead of the block in which the order is committed.
     * This value must be zero for Short-Term orders.
     */
    goodTilBlockTime?: number;
}
/** MsgCancelOrder is a request type used for canceling orders. */
export interface MsgCancelOrderSDKType {
    order_id?: OrderIdSDKType;
    good_til_block?: number;
    good_til_block_time?: number;
}
/** MsgCancelOrderResponse is a response type used for canceling orders. */
export interface MsgCancelOrderResponse {
}
/** MsgCancelOrderResponse is a response type used for canceling orders. */
export interface MsgCancelOrderResponseSDKType {
}
/** MsgUpdateClobPair is a request type used for updating a ClobPair in state. */
export interface MsgUpdateClobPair {
    /** Authority is the address that may send this message. */
    authority: string;
    /** `clob_pair` is the ClobPair to write to state. */
    clobPair?: ClobPair;
}
/** MsgUpdateClobPair is a request type used for updating a ClobPair in state. */
export interface MsgUpdateClobPairSDKType {
    authority: string;
    clob_pair?: ClobPairSDKType;
}
/**
 * MsgUpdateClobPairResponse is a response type used for setting a ClobPair's
 * status.
 */
export interface MsgUpdateClobPairResponse {
}
/**
 * MsgUpdateClobPairResponse is a response type used for setting a ClobPair's
 * status.
 */
export interface MsgUpdateClobPairResponseSDKType {
}
/**
 * OperationRaw represents an operation in the proposed operations.
 * Note that the `order_placement` operation is a signed message.
 */
export interface OperationRaw {
    match?: ClobMatch;
    shortTermOrderPlacement?: Uint8Array;
    orderRemoval?: OrderRemoval;
}
/**
 * OperationRaw represents an operation in the proposed operations.
 * Note that the `order_placement` operation is a signed message.
 */
export interface OperationRawSDKType {
    match?: ClobMatchSDKType;
    short_term_order_placement?: Uint8Array;
    order_removal?: OrderRemovalSDKType;
}
/**
 * MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
 * request type.
 */
export interface MsgUpdateEquityTierLimitConfiguration {
    authority: string;
    /**
     * Defines the equity tier limit configuration to update to. All fields must
     * be set.
     */
    equityTierLimitConfig?: EquityTierLimitConfiguration;
}
/**
 * MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
 * request type.
 */
export interface MsgUpdateEquityTierLimitConfigurationSDKType {
    authority: string;
    equity_tier_limit_config?: EquityTierLimitConfigurationSDKType;
}
/**
 * MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
 * response type.
 */
export interface MsgUpdateEquityTierLimitConfigurationResponse {
}
/**
 * MsgUpdateEquityTierLimitConfiguration is the Msg/EquityTierLimitConfiguration
 * response type.
 */
export interface MsgUpdateEquityTierLimitConfigurationResponseSDKType {
}
/**
 * MsgUpdateBlockRateLimitConfiguration is the Msg/BlockRateLimitConfiguration
 * request type.
 */
export interface MsgUpdateBlockRateLimitConfiguration {
    authority: string;
    /**
     * Defines the block rate limit configuration to update to. All fields must be
     * set.
     */
    blockRateLimitConfig?: BlockRateLimitConfiguration;
}
/**
 * MsgUpdateBlockRateLimitConfiguration is the Msg/BlockRateLimitConfiguration
 * request type.
 */
export interface MsgUpdateBlockRateLimitConfigurationSDKType {
    authority: string;
    block_rate_limit_config?: BlockRateLimitConfigurationSDKType;
}
/**
 * MsgUpdateBlockRateLimitConfiguration is a response type for updating the
 * liquidations config.
 */
export interface MsgUpdateBlockRateLimitConfigurationResponse {
}
/**
 * MsgUpdateBlockRateLimitConfiguration is a response type for updating the
 * liquidations config.
 */
export interface MsgUpdateBlockRateLimitConfigurationResponseSDKType {
}
/**
 * MsgUpdateLiquidationsConfig is a request type for updating the liquidations
 * config.
 */
export interface MsgUpdateLiquidationsConfig {
    /** Authority is the address that may send this message. */
    authority: string;
    /**
     * Defines the liquidations configuration to update to. All fields must
     * be set.
     */
    liquidationsConfig?: LiquidationsConfig;
}
/**
 * MsgUpdateLiquidationsConfig is a request type for updating the liquidations
 * config.
 */
export interface MsgUpdateLiquidationsConfigSDKType {
    authority: string;
    liquidations_config?: LiquidationsConfigSDKType;
}
/** MsgUpdateLiquidationsConfig is the Msg/LiquidationsConfig response type. */
export interface MsgUpdateLiquidationsConfigResponse {
}
/** MsgUpdateLiquidationsConfig is the Msg/LiquidationsConfig response type. */
export interface MsgUpdateLiquidationsConfigResponseSDKType {
}
export declare const MsgCreateClobPair: {
    encode(message: MsgCreateClobPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgCreateClobPair;
    fromPartial(object: {
        authority?: string | undefined;
        clobPair?: {
            id?: number | undefined;
            perpetualClobMetadata?: {
                perpetualId?: number | undefined;
            } | undefined;
            spotClobMetadata?: {
                baseAssetId?: number | undefined;
                quoteAssetId?: number | undefined;
            } | undefined;
            stepBaseQuantums?: string | number | import("long").Long | undefined;
            subticksPerTick?: number | undefined;
            quantumConversionExponent?: number | undefined;
            status?: import("./clob_pair").ClobPair_Status | undefined;
        } | undefined;
    }): MsgCreateClobPair;
};
export declare const MsgCreateClobPairResponse: {
    encode(_: MsgCreateClobPairResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgCreateClobPairResponse;
    fromPartial(_: {}): MsgCreateClobPairResponse;
};
export declare const MsgProposedOperations: {
    encode(message: MsgProposedOperations, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgProposedOperations;
    fromPartial(object: {
        operationsQueue?: {
            match?: {
                matchOrders?: {
                    takerOrderId?: {
                        subaccountId?: {
                            owner?: string | undefined;
                            number?: number | undefined;
                        } | undefined;
                        clientId?: number | undefined;
                        orderFlags?: number | undefined;
                        clobPairId?: number | undefined;
                    } | undefined;
                    fills?: {
                        fillAmount?: string | number | import("long").Long | undefined;
                        makerOrderId?: {
                            subaccountId?: {
                                owner?: string | undefined;
                                number?: number | undefined;
                            } | undefined;
                            clientId?: number | undefined;
                            orderFlags?: number | undefined;
                            clobPairId?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
                matchPerpetualLiquidation?: {
                    liquidated?: {
                        owner?: string | undefined;
                        number?: number | undefined;
                    } | undefined;
                    clobPairId?: number | undefined;
                    perpetualId?: number | undefined;
                    totalSize?: string | number | import("long").Long | undefined;
                    isBuy?: boolean | undefined;
                    fills?: {
                        fillAmount?: string | number | import("long").Long | undefined;
                        makerOrderId?: {
                            subaccountId?: {
                                owner?: string | undefined;
                                number?: number | undefined;
                            } | undefined;
                            clientId?: number | undefined;
                            orderFlags?: number | undefined;
                            clobPairId?: number | undefined;
                        } | undefined;
                    }[] | undefined;
                } | undefined;
                matchPerpetualDeleveraging?: {
                    liquidated?: {
                        owner?: string | undefined;
                        number?: number | undefined;
                    } | undefined;
                    perpetualId?: number | undefined;
                    fills?: {
                        offsettingSubaccountId?: {
                            owner?: string | undefined;
                            number?: number | undefined;
                        } | undefined;
                        fillAmount?: string | number | import("long").Long | undefined;
                    }[] | undefined;
                    isFinalSettlement?: boolean | undefined;
                } | undefined;
            } | undefined;
            shortTermOrderPlacement?: Uint8Array | undefined;
            orderRemoval?: {
                orderId?: {
                    subaccountId?: {
                        owner?: string | undefined;
                        number?: number | undefined;
                    } | undefined;
                    clientId?: number | undefined;
                    orderFlags?: number | undefined;
                    clobPairId?: number | undefined;
                } | undefined;
                removalReason?: import("./order_removals").OrderRemoval_RemovalReason | undefined;
            } | undefined;
        }[] | undefined;
    }): MsgProposedOperations;
};
export declare const MsgProposedOperationsResponse: {
    encode(_: MsgProposedOperationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgProposedOperationsResponse;
    fromPartial(_: {}): MsgProposedOperationsResponse;
};
export declare const MsgPlaceOrder: {
    encode(message: MsgPlaceOrder, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgPlaceOrder;
    fromPartial(object: {
        order?: {
            orderId?: {
                subaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                clientId?: number | undefined;
                orderFlags?: number | undefined;
                clobPairId?: number | undefined;
            } | undefined;
            side?: import("./order").Order_Side | undefined;
            quantums?: string | number | import("long").Long | undefined;
            subticks?: string | number | import("long").Long | undefined;
            goodTilBlock?: number | undefined;
            goodTilBlockTime?: number | undefined;
            timeInForce?: import("./order").Order_TimeInForce | undefined;
            reduceOnly?: boolean | undefined;
            clientMetadata?: number | undefined;
            conditionType?: import("./order").Order_ConditionType | undefined;
            conditionalOrderTriggerSubticks?: string | number | import("long").Long | undefined;
        } | undefined;
    }): MsgPlaceOrder;
};
export declare const MsgPlaceOrderResponse: {
    encode(_: MsgPlaceOrderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgPlaceOrderResponse;
    fromPartial(_: {}): MsgPlaceOrderResponse;
};
export declare const MsgCancelOrder: {
    encode(message: MsgCancelOrder, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgCancelOrder;
    fromPartial(object: {
        orderId?: {
            subaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            clientId?: number | undefined;
            orderFlags?: number | undefined;
            clobPairId?: number | undefined;
        } | undefined;
        goodTilBlock?: number | undefined;
        goodTilBlockTime?: number | undefined;
    }): MsgCancelOrder;
};
export declare const MsgCancelOrderResponse: {
    encode(_: MsgCancelOrderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgCancelOrderResponse;
    fromPartial(_: {}): MsgCancelOrderResponse;
};
export declare const MsgUpdateClobPair: {
    encode(message: MsgUpdateClobPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateClobPair;
    fromPartial(object: {
        authority?: string | undefined;
        clobPair?: {
            id?: number | undefined;
            perpetualClobMetadata?: {
                perpetualId?: number | undefined;
            } | undefined;
            spotClobMetadata?: {
                baseAssetId?: number | undefined;
                quoteAssetId?: number | undefined;
            } | undefined;
            stepBaseQuantums?: string | number | import("long").Long | undefined;
            subticksPerTick?: number | undefined;
            quantumConversionExponent?: number | undefined;
            status?: import("./clob_pair").ClobPair_Status | undefined;
        } | undefined;
    }): MsgUpdateClobPair;
};
export declare const MsgUpdateClobPairResponse: {
    encode(_: MsgUpdateClobPairResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateClobPairResponse;
    fromPartial(_: {}): MsgUpdateClobPairResponse;
};
export declare const OperationRaw: {
    encode(message: OperationRaw, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): OperationRaw;
    fromPartial(object: {
        match?: {
            matchOrders?: {
                takerOrderId?: {
                    subaccountId?: {
                        owner?: string | undefined;
                        number?: number | undefined;
                    } | undefined;
                    clientId?: number | undefined;
                    orderFlags?: number | undefined;
                    clobPairId?: number | undefined;
                } | undefined;
                fills?: {
                    fillAmount?: string | number | import("long").Long | undefined;
                    makerOrderId?: {
                        subaccountId?: {
                            owner?: string | undefined;
                            number?: number | undefined;
                        } | undefined;
                        clientId?: number | undefined;
                        orderFlags?: number | undefined;
                        clobPairId?: number | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            matchPerpetualLiquidation?: {
                liquidated?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                clobPairId?: number | undefined;
                perpetualId?: number | undefined;
                totalSize?: string | number | import("long").Long | undefined;
                isBuy?: boolean | undefined;
                fills?: {
                    fillAmount?: string | number | import("long").Long | undefined;
                    makerOrderId?: {
                        subaccountId?: {
                            owner?: string | undefined;
                            number?: number | undefined;
                        } | undefined;
                        clientId?: number | undefined;
                        orderFlags?: number | undefined;
                        clobPairId?: number | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            matchPerpetualDeleveraging?: {
                liquidated?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                perpetualId?: number | undefined;
                fills?: {
                    offsettingSubaccountId?: {
                        owner?: string | undefined;
                        number?: number | undefined;
                    } | undefined;
                    fillAmount?: string | number | import("long").Long | undefined;
                }[] | undefined;
                isFinalSettlement?: boolean | undefined;
            } | undefined;
        } | undefined;
        shortTermOrderPlacement?: Uint8Array | undefined;
        orderRemoval?: {
            orderId?: {
                subaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                clientId?: number | undefined;
                orderFlags?: number | undefined;
                clobPairId?: number | undefined;
            } | undefined;
            removalReason?: import("./order_removals").OrderRemoval_RemovalReason | undefined;
        } | undefined;
    }): OperationRaw;
};
export declare const MsgUpdateEquityTierLimitConfiguration: {
    encode(message: MsgUpdateEquityTierLimitConfiguration, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateEquityTierLimitConfiguration;
    fromPartial(object: {
        authority?: string | undefined;
        equityTierLimitConfig?: {
            shortTermOrderEquityTiers?: {
                usdTncRequired?: Uint8Array | undefined;
                limit?: number | undefined;
            }[] | undefined;
            statefulOrderEquityTiers?: {
                usdTncRequired?: Uint8Array | undefined;
                limit?: number | undefined;
            }[] | undefined;
        } | undefined;
    }): MsgUpdateEquityTierLimitConfiguration;
};
export declare const MsgUpdateEquityTierLimitConfigurationResponse: {
    encode(_: MsgUpdateEquityTierLimitConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateEquityTierLimitConfigurationResponse;
    fromPartial(_: {}): MsgUpdateEquityTierLimitConfigurationResponse;
};
export declare const MsgUpdateBlockRateLimitConfiguration: {
    encode(message: MsgUpdateBlockRateLimitConfiguration, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateBlockRateLimitConfiguration;
    fromPartial(object: {
        authority?: string | undefined;
        blockRateLimitConfig?: {
            maxShortTermOrdersPerNBlocks?: {
                numBlocks?: number | undefined;
                limit?: number | undefined;
            }[] | undefined;
            maxStatefulOrdersPerNBlocks?: {
                numBlocks?: number | undefined;
                limit?: number | undefined;
            }[] | undefined;
            maxShortTermOrderCancellationsPerNBlocks?: {
                numBlocks?: number | undefined;
                limit?: number | undefined;
            }[] | undefined;
        } | undefined;
    }): MsgUpdateBlockRateLimitConfiguration;
};
export declare const MsgUpdateBlockRateLimitConfigurationResponse: {
    encode(_: MsgUpdateBlockRateLimitConfigurationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateBlockRateLimitConfigurationResponse;
    fromPartial(_: {}): MsgUpdateBlockRateLimitConfigurationResponse;
};
export declare const MsgUpdateLiquidationsConfig: {
    encode(message: MsgUpdateLiquidationsConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateLiquidationsConfig;
    fromPartial(object: {
        authority?: string | undefined;
        liquidationsConfig?: {
            maxLiquidationFeePpm?: number | undefined;
            positionBlockLimits?: {
                minPositionNotionalLiquidated?: string | number | import("long").Long | undefined;
                maxPositionPortionLiquidatedPpm?: number | undefined;
            } | undefined;
            subaccountBlockLimits?: {
                maxNotionalLiquidated?: string | number | import("long").Long | undefined;
                maxQuantumsInsuranceLost?: string | number | import("long").Long | undefined;
            } | undefined;
            fillablePriceConfig?: {
                bankruptcyAdjustmentPpm?: number | undefined;
                spreadToMaintenanceMarginRatioPpm?: number | undefined;
            } | undefined;
        } | undefined;
    }): MsgUpdateLiquidationsConfig;
};
export declare const MsgUpdateLiquidationsConfigResponse: {
    encode(_: MsgUpdateLiquidationsConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MsgUpdateLiquidationsConfigResponse;
    fromPartial(_: {}): MsgUpdateLiquidationsConfigResponse;
};
