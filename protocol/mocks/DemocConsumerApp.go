// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	baseapp "github.com/cosmos/cosmos-sdk/baseapp"
	capabilitykeeper "github.com/cosmos/ibc-go/modules/capability/keeper"

	client "github.com/cosmos/cosmos-sdk/client"

	codec "github.com/cosmos/cosmos-sdk/codec"

	context "context"

	corekeeper "github.com/cosmos/ibc-go/v8/modules/core/keeper"

	evidencekeeper "cosmossdk.io/x/evidence/keeper"

	govkeeper "github.com/cosmos/cosmos-sdk/x/gov/keeper"

	integration "command-line-arguments"

	keeper "github.com/ethos-works/ethos/ethos-chain/x/ccv/consumer/keeper"

	mintkeeper "github.com/cosmos/cosmos-sdk/x/mint/keeper"

	mock "github.com/stretchr/testify/mock"

	paramstypes "github.com/cosmos/cosmos-sdk/x/params/types"

	storetypes "cosmossdk.io/store/types"

	testingtypes "github.com/cosmos/ibc-go/v8/testing/types"

	types "github.com/cometbft/cometbft/abci/types"
)

// DemocConsumerApp is an autogenerated mock type for the DemocConsumerApp type
type DemocConsumerApp struct {
	mock.Mock
}

// AppCodec provides a mock function with given fields:
func (_m *DemocConsumerApp) AppCodec() codec.Codec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AppCodec")
	}

	var r0 codec.Codec
	if rf, ok := ret.Get(0).(func() codec.Codec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(codec.Codec)
		}
	}

	return r0
}

// ApplySnapshotChunk provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) ApplySnapshotChunk(_a0 *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ApplySnapshotChunk")
	}

	var r0 *types.ResponseApplySnapshotChunk
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestApplySnapshotChunk) *types.ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseApplySnapshotChunk)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestApplySnapshotChunk) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTx provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) CheckTx(_a0 *types.RequestCheckTx) (*types.ResponseCheckTx, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckTx")
	}

	var r0 *types.ResponseCheckTx
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestCheckTx) (*types.ResponseCheckTx, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestCheckTx) *types.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseCheckTx)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestCheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields:
func (_m *DemocConsumerApp) Commit() (*types.ResponseCommit, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *types.ResponseCommit
	var r1 error
	if rf, ok := ret.Get(0).(func() (*types.ResponseCommit, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *types.ResponseCommit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseCommit)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtendVote provides a mock function with given fields: _a0, _a1
func (_m *DemocConsumerApp) ExtendVote(_a0 context.Context, _a1 *types.RequestExtendVote) (*types.ResponseExtendVote, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExtendVote")
	}

	var r0 *types.ResponseExtendVote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) (*types.ResponseExtendVote, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RequestExtendVote) *types.ResponseExtendVote); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseExtendVote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RequestExtendVote) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeBlock provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) FinalizeBlock(_a0 *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeBlock")
	}

	var r0 *types.ResponseFinalizeBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestFinalizeBlock) *types.ResponseFinalizeBlock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseFinalizeBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestFinalizeBlock) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaseApp provides a mock function with given fields:
func (_m *DemocConsumerApp) GetBaseApp() *baseapp.BaseApp {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBaseApp")
	}

	var r0 *baseapp.BaseApp
	if rf, ok := ret.Get(0).(func() *baseapp.BaseApp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*baseapp.BaseApp)
		}
	}

	return r0
}

// GetConsumerKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetConsumerKeeper() keeper.Keeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConsumerKeeper")
	}

	var r0 keeper.Keeper
	if rf, ok := ret.Get(0).(func() keeper.Keeper); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(keeper.Keeper)
	}

	return r0
}

// GetIBCKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetIBCKeeper() *corekeeper.Keeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIBCKeeper")
	}

	var r0 *corekeeper.Keeper
	if rf, ok := ret.Get(0).(func() *corekeeper.Keeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corekeeper.Keeper)
		}
	}

	return r0
}

// GetScopedIBCKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetScopedIBCKeeper() capabilitykeeper.ScopedKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopedIBCKeeper")
	}

	var r0 capabilitykeeper.ScopedKeeper
	if rf, ok := ret.Get(0).(func() capabilitykeeper.ScopedKeeper); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(capabilitykeeper.ScopedKeeper)
	}

	return r0
}

// GetStakingKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetStakingKeeper() testingtypes.StakingKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStakingKeeper")
	}

	var r0 testingtypes.StakingKeeper
	if rf, ok := ret.Get(0).(func() testingtypes.StakingKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(testingtypes.StakingKeeper)
		}
	}

	return r0
}

// GetSubspace provides a mock function with given fields: moduleName
func (_m *DemocConsumerApp) GetSubspace(moduleName string) paramstypes.Subspace {
	ret := _m.Called(moduleName)

	if len(ret) == 0 {
		panic("no return value specified for GetSubspace")
	}

	var r0 paramstypes.Subspace
	if rf, ok := ret.Get(0).(func(string) paramstypes.Subspace); ok {
		r0 = rf(moduleName)
	} else {
		r0 = ret.Get(0).(paramstypes.Subspace)
	}

	return r0
}

// GetTestAccountKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestAccountKeeper() integration.TestAccountKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestAccountKeeper")
	}

	var r0 integration.TestAccountKeeper
	if rf, ok := ret.Get(0).(func() integration.TestAccountKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integration.TestAccountKeeper)
		}
	}

	return r0
}

// GetTestBankKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestBankKeeper() integration.TestBankKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestBankKeeper")
	}

	var r0 integration.TestBankKeeper
	if rf, ok := ret.Get(0).(func() integration.TestBankKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integration.TestBankKeeper)
		}
	}

	return r0
}

// GetTestDistributionKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestDistributionKeeper() integration.TestDistributionKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestDistributionKeeper")
	}

	var r0 integration.TestDistributionKeeper
	if rf, ok := ret.Get(0).(func() integration.TestDistributionKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integration.TestDistributionKeeper)
		}
	}

	return r0
}

// GetTestEvidenceKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestEvidenceKeeper() evidencekeeper.Keeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestEvidenceKeeper")
	}

	var r0 evidencekeeper.Keeper
	if rf, ok := ret.Get(0).(func() evidencekeeper.Keeper); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(evidencekeeper.Keeper)
	}

	return r0
}

// GetTestGovKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestGovKeeper() govkeeper.Keeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestGovKeeper")
	}

	var r0 govkeeper.Keeper
	if rf, ok := ret.Get(0).(func() govkeeper.Keeper); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(govkeeper.Keeper)
	}

	return r0
}

// GetTestMintKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestMintKeeper() mintkeeper.Keeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestMintKeeper")
	}

	var r0 mintkeeper.Keeper
	if rf, ok := ret.Get(0).(func() mintkeeper.Keeper); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mintkeeper.Keeper)
	}

	return r0
}

// GetTestSlashingKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestSlashingKeeper() integration.TestSlashingKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestSlashingKeeper")
	}

	var r0 integration.TestSlashingKeeper
	if rf, ok := ret.Get(0).(func() integration.TestSlashingKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integration.TestSlashingKeeper)
		}
	}

	return r0
}

// GetTestStakingKeeper provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTestStakingKeeper() integration.TestStakingKeeper {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTestStakingKeeper")
	}

	var r0 integration.TestStakingKeeper
	if rf, ok := ret.Get(0).(func() integration.TestStakingKeeper); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(integration.TestStakingKeeper)
		}
	}

	return r0
}

// GetTxConfig provides a mock function with given fields:
func (_m *DemocConsumerApp) GetTxConfig() client.TxConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTxConfig")
	}

	var r0 client.TxConfig
	if rf, ok := ret.Get(0).(func() client.TxConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.TxConfig)
		}
	}

	return r0
}

// Info provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) Info(_a0 *types.RequestInfo) (*types.ResponseInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 *types.ResponseInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestInfo) (*types.ResponseInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestInfo) *types.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChain provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) InitChain(_a0 *types.RequestInitChain) (*types.ResponseInitChain, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitChain")
	}

	var r0 *types.ResponseInitChain
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestInitChain) (*types.ResponseInitChain, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestInitChain) *types.ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseInitChain)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestInitChain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastBlockHeight provides a mock function with given fields:
func (_m *DemocConsumerApp) LastBlockHeight() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastBlockHeight")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LastCommitID provides a mock function with given fields:
func (_m *DemocConsumerApp) LastCommitID() storetypes.CommitID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastCommitID")
	}

	var r0 storetypes.CommitID
	if rf, ok := ret.Get(0).(func() storetypes.CommitID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storetypes.CommitID)
	}

	return r0
}

// ListSnapshots provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) ListSnapshots(_a0 *types.RequestListSnapshots) (*types.ResponseListSnapshots, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *types.ResponseListSnapshots
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestListSnapshots) (*types.ResponseListSnapshots, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestListSnapshots) *types.ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseListSnapshots)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestListSnapshots) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshotChunk provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) LoadSnapshotChunk(_a0 *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoadSnapshotChunk")
	}

	var r0 *types.ResponseLoadSnapshotChunk
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestLoadSnapshotChunk) *types.ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseLoadSnapshotChunk)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestLoadSnapshotChunk) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferSnapshot provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) OfferSnapshot(_a0 *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OfferSnapshot")
	}

	var r0 *types.ResponseOfferSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestOfferSnapshot) *types.ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseOfferSnapshot)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestOfferSnapshot) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareProposal provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) PrepareProposal(_a0 *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PrepareProposal")
	}

	var r0 *types.ResponsePrepareProposal
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestPrepareProposal) *types.ResponsePrepareProposal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponsePrepareProposal)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestPrepareProposal) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessProposal provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) ProcessProposal(_a0 *types.RequestProcessProposal) (*types.ResponseProcessProposal, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ProcessProposal")
	}

	var r0 *types.ResponseProcessProposal
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestProcessProposal) (*types.ResponseProcessProposal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestProcessProposal) *types.ResponseProcessProposal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseProcessProposal)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestProcessProposal) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *DemocConsumerApp) Query(_a0 context.Context, _a1 *types.RequestQuery) (*types.ResponseQuery, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *types.ResponseQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) (*types.ResponseQuery, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *types.RequestQuery) *types.ResponseQuery); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *types.RequestQuery) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyVoteExtension provides a mock function with given fields: _a0
func (_m *DemocConsumerApp) VerifyVoteExtension(_a0 *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyVoteExtension")
	}

	var r0 *types.ResponseVerifyVoteExtension
	var r1 error
	if rf, ok := ret.Get(0).(func(*types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*types.RequestVerifyVoteExtension) *types.ResponseVerifyVoteExtension); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ResponseVerifyVoteExtension)
		}
	}

	if rf, ok := ret.Get(1).(func(*types.RequestVerifyVoteExtension) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDemocConsumerApp creates a new instance of DemocConsumerApp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDemocConsumerApp(t interface {
	mock.TestingT
	Cleanup(func())
}) *DemocConsumerApp {
	mock := &DemocConsumerApp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
