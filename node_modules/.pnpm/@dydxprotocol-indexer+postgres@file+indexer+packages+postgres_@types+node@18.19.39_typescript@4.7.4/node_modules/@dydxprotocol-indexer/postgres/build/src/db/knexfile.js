"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.knexReadReplicaConfigForEnv = exports.knexPrimaryConfigForEnv = exports.getConfigForHost = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const config_1 = __importDefault(require("../config"));
require("./pg-config");
const SUPPORTED_ENVIRONMENTS = Object.values(base_1.NodeEnv);
const environment = config_1.default.NODE_ENV || base_1.NodeEnv.DEVELOPMENT;
if (!SUPPORTED_ENVIRONMENTS.includes(environment)) {
    throw new Error(`Unknown node environment ${environment}`);
}
function getConfigForHost(host) {
    return {
        client: 'pg',
        connection: {
            host,
            port: config_1.default.DB_PORT,
            database: config_1.default.DB_NAME,
            user: config_1.default.DB_USERNAME,
            password: config_1.default.DB_PASSWORD,
        },
        pool: {
            min: config_1.default.PG_POOL_MIN,
            max: config_1.default.PG_POOL_MAX,
            acquireTimeoutMillis: config_1.default.PG_ACQUIRE_CONNECTION_TIMEOUT_MS,
            createTimeoutMillis: config_1.default.PG_ACQUIRE_CONNECTION_TIMEOUT_MS,
        },
        acquireConnectionTimeout: config_1.default.PG_ACQUIRE_CONNECTION_TIMEOUT_MS,
        migrations: {
            directory: `${__dirname}/migrations/migration_files/`,
        },
    };
}
exports.getConfigForHost = getConfigForHost;
exports.knexPrimaryConfigForEnv = getConfigForHost(config_1.default.DB_HOSTNAME);
exports.knexReadReplicaConfigForEnv = getConfigForHost(config_1.default.DB_READONLY_HOSTNAME);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia25leGZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGIva25leGZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBRW9DO0FBR3BDLHVEQUErQjtBQUMvQix1QkFBcUI7QUFFckIsTUFBTSxzQkFBc0IsR0FBYSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQU8sQ0FBQyxDQUFDO0FBQ2hFLE1BQU0sV0FBVyxHQUFXLGdCQUFNLENBQUMsUUFBUSxJQUFJLGNBQU8sQ0FBQyxXQUFXLENBQUM7QUFFbkUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsRUFBRTtJQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixXQUFXLEVBQUUsQ0FBQyxDQUFDO0NBQzVEO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsSUFBWTtJQUMzQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLElBQUk7UUFDWixVQUFVLEVBQUU7WUFDVixJQUFJO1lBQ0osSUFBSSxFQUFFLGdCQUFNLENBQUMsT0FBTztZQUNwQixRQUFRLEVBQUUsZ0JBQU0sQ0FBQyxPQUFPO1lBQ3hCLElBQUksRUFBRSxnQkFBTSxDQUFDLFdBQVc7WUFDeEIsUUFBUSxFQUFFLGdCQUFNLENBQUMsV0FBVztTQUM3QjtRQUNELElBQUksRUFBRTtZQUNKLEdBQUcsRUFBRSxnQkFBTSxDQUFDLFdBQVc7WUFDdkIsR0FBRyxFQUFFLGdCQUFNLENBQUMsV0FBVztZQUN2QixvQkFBb0IsRUFBRSxnQkFBTSxDQUFDLGdDQUFnQztZQUM3RCxtQkFBbUIsRUFBRSxnQkFBTSxDQUFDLGdDQUFnQztTQUM3RDtRQUNELHdCQUF3QixFQUFFLGdCQUFNLENBQUMsZ0NBQWdDO1FBQ2pFLFVBQVUsRUFBRTtZQUNWLFNBQVMsRUFBRSxHQUFHLFNBQVMsOEJBQThCO1NBQ3REO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFyQkQsNENBcUJDO0FBRVksUUFBQSx1QkFBdUIsR0FBZ0IsZ0JBQWdCLENBQUMsZ0JBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUU1RSxRQUFBLDJCQUEyQixHQUMxQixnQkFBZ0IsQ0FBQyxnQkFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUMifQ==