"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBulkUpsertString = exports.generateBulkUpdateString = exports.setBulkRowsForUpdate = exports.rawQuery = exports.setupBaseQuery = exports.verifyAllInjectableVariables = exports.verifyAllRequiredFields = void 0;
const lodash_1 = __importDefault(require("lodash"));
const errors_1 = require("../lib/errors");
const knex_1 = require("./knex");
const transaction_1 = __importDefault(require("./transaction"));
function verifyAllRequiredFields(query, requiredFields) {
    const queryKeys = Object.keys(lodash_1.default.omitBy(query, lodash_1.default.isNil));
    requiredFields.forEach((field) => {
        if (!queryKeys.includes(field)) {
            throw new errors_1.RequiredFieldMissing(field);
        }
    });
}
exports.verifyAllRequiredFields = verifyAllRequiredFields;
function verifyAllInjectableVariables(vals) {
    vals.forEach((val) => {
        // Numbers and undefined are okay.
        if (val === undefined ||
            val === null ||
            typeof val === 'number') {
            return;
        }
        // Prevent possible query injections.
        if (typeof val === 'string' &&
            val.split(' ').length > 1) {
            throw Error(`Invalid value: ${val} could be a malicious query injection`);
        }
    });
}
exports.verifyAllInjectableVariables = verifyAllInjectableVariables;
function setupBaseQuery(model, options) {
    if (options.readReplica) {
        return model.bindKnex(knex_1.knexReadReplica.getConnection()).query(transaction_1.default.get(options.txId));
    }
    else {
        return model.query(transaction_1.default.get(options.txId));
    }
}
exports.setupBaseQuery = setupBaseQuery;
async function rawQuery(queryString, options) {
    const connection = options.readReplica ? knex_1.knexReadReplica.getConnection() : knex_1.knexPrimary;
    let queryBuilder = options.bindings === undefined
        ? connection.raw(queryString) : connection.raw(queryString, options.bindings);
    if (options.txId) {
        queryBuilder = queryBuilder.transacting(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        transaction_1.default.get(options.txId));
    }
    if (options.sqlOptions) {
        queryBuilder = queryBuilder.options(options.sqlOptions);
    }
    return queryBuilder;
}
exports.rawQuery = rawQuery;
/* ------- Bulk Helpers ------- */
function setBulkRowsForUpdate({ objectArray, columns, stringColumns, numericColumns, bigintColumns, timestampColumns, uuidColumns, booleanColumns, binaryColumns, }) {
    return objectArray.map((object) => columns.map((col) => {
        if (stringColumns && stringColumns.includes(col)) {
            return `'${castNull(object[col])}'`;
        }
        if (numericColumns && numericColumns.includes(col)) {
            return `${castNull(lodash_1.default.get(object, col))}`;
        }
        if (bigintColumns && bigintColumns.includes(col)) {
            return castValue(object[col], 'bigint');
        }
        if (timestampColumns && timestampColumns.includes(col)) {
            return castValue(object[col], 'timestamp');
        }
        if (uuidColumns && uuidColumns.includes(col)) {
            return castValue(object[col], 'uuid');
        }
        if (binaryColumns && binaryColumns.includes(col)) {
            return castBinaryValue(object[col]);
        }
        if (booleanColumns && booleanColumns.includes(col)) {
            return `${castNull(object[col])}`;
        }
        throw new Error(`Unsupported column for bulk update: ${col}`);
    }).join(', '));
}
exports.setBulkRowsForUpdate = setBulkRowsForUpdate;
/**
 * If the value is null || undefined, return 'NULL'
 */
function castNull(value) {
    if (value === null || value === undefined) {
        return 'NULL';
    }
    return `${value}`;
}
/**
 * If the value is null || undefined, return 'NULL' casted with typesuffix, otherwise return
 * the stringified value in quotes casted with typesuffix.
 */
function castValue(value, typeSuffix) {
    if (value === null || value === undefined) {
        return `NULL::${typeSuffix}`;
    }
    return `'${value}'::${typeSuffix}`;
}
function castBinaryValue(value) {
    const typeSuffix = 'bytea';
    if (value === null || value === undefined) {
        return `NULL::${typeSuffix}`;
    }
    return `'\\x${value.toString('hex')}'::${typeSuffix}`;
}
function generateBulkUpdateString({ table, objectRows, columns, isUuid, uniqueIdentifier = 'id', setFieldsToAppend, }) {
    const columnsToUpdate = lodash_1.default.without(columns, uniqueIdentifier);
    const setFields = columnsToUpdate.map((col) => {
        return `"${col}" = c."${col}"`;
    }).concat(setFieldsToAppend || []);
    return `
  UPDATE "${table}" SET
    ${setFields.join(',')}
  FROM (VALUES
    ${objectRows.map((object) => `(${object})`).join(', ')}
  ) AS c(${columns.map((c) => `"${c}"`).join(', ')})
  WHERE c."${uniqueIdentifier}"${isUuid ? '::uuid' : ''} = "${table}"."${uniqueIdentifier}";
`;
}
exports.generateBulkUpdateString = generateBulkUpdateString;
function generateBulkUpsertString({ table, objectRows, columns, uniqueIdentifiers = ['id'], }) {
    const columnsToUpdate = lodash_1.default.without(columns, ...uniqueIdentifiers);
    const idFields = uniqueIdentifiers.map((id) => { return `"${id}"`; }).join(',');
    const insertFields = columns.map((column) => { return `"${column}"`; }).join(',');
    const setFields = columnsToUpdate.map((col) => {
        return `"${col}" = excluded."${col}"`;
    });
    return `
  INSERT INTO "${table}" (${insertFields}) VALUES
    ${objectRows.map((object) => `(${object})`).join(',')}
  ON CONFLICT (${idFields}) DO UPDATE SET ${setFields.join(',')};
  `;
}
exports.generateBulkUpsertString = generateBulkUpsertString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVzLWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9zdG9yZXMtaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxvREFBdUI7QUFHdkIsMENBQXFEO0FBTXJELGlDQUFzRDtBQUN0RCxnRUFBd0M7QUFFeEMsU0FBZ0IsdUJBQXVCLENBQ3JDLEtBQWtCLEVBQ2xCLGNBQWdDO0lBRWhDLE1BQU0sU0FBUyxHQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGdCQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRSxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUIsTUFBTSxJQUFJLDZCQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBVkQsMERBVUM7QUFFRCxTQUFnQiw0QkFBNEIsQ0FBQyxJQUE0QztJQUN2RixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDbkIsa0NBQWtDO1FBQ2xDLElBQ0UsR0FBRyxLQUFLLFNBQVM7WUFDakIsR0FBRyxLQUFLLElBQUk7WUFDWixPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQ3ZCO1lBQ0EsT0FBTztTQUNSO1FBRUQscUNBQXFDO1FBQ3JDLElBQ0UsT0FBTyxHQUFHLEtBQUssUUFBUTtZQUN2QixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3pCO1lBQ0EsTUFBTSxLQUFLLENBQUMsa0JBQWtCLEdBQUcsdUNBQXVDLENBQUMsQ0FBQztTQUMzRTtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQW5CRCxv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