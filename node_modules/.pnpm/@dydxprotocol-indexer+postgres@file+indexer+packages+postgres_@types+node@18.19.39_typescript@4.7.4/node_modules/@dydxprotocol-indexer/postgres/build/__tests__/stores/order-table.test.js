"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const OrderTable = __importStar(require("../../src/stores/order-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const objection_1 = require("objection");
const v4_proto_parser_1 = require("@dydxprotocol-indexer/v4-proto-parser");
const transaction_1 = __importDefault(require("../../src/helpers/transaction"));
describe('Order store', () => {
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('isLongTermOrConditionalOrder', () => {
        expect(OrderTable.isLongTermOrConditionalOrder('64')).toEqual(true);
        expect(OrderTable.isLongTermOrConditionalOrder('65')).toEqual(true);
        expect(OrderTable.isLongTermOrConditionalOrder('32')).toEqual(true);
        expect(OrderTable.isLongTermOrConditionalOrder('33')).toEqual(true);
        expect(OrderTable.isLongTermOrConditionalOrder('128')).toEqual(false);
        expect(OrderTable.isLongTermOrConditionalOrder('0')).toEqual(false);
        expect(OrderTable.isLongTermOrConditionalOrder('191')).toEqual(true);
        expect(OrderTable.isLongTermOrConditionalOrder('159')).toEqual(false);
    });
    it('Successfully creates a Order', async () => {
        await OrderTable.create(constants_1.defaultOrder);
    });
    it('Successfully creates an Order with goodTilBlockTime', async () => {
        await OrderTable.create(constants_1.defaultOrderGoodTilBlockTime);
        const orders = await OrderTable.findAll({}, [], {});
        expect(orders).toHaveLength(1);
        expect(orders[0]).toEqual(expect.objectContaining({
            ...constants_1.defaultOrderGoodTilBlockTime,
            goodTilBlock: null,
        }));
    });
    it('Successfully finds all Orders', async () => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '2',
            }),
        ]);
        const orders = await OrderTable.findAll({}, [], {
            orderBy: [[types_1.OrderColumns.clientId, types_1.Ordering.ASC]],
        });
        expect(orders.length).toEqual(2);
        expect(orders[0]).toEqual(expect.objectContaining(constants_1.defaultOrder));
        expect(orders[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultOrder,
            clientId: '2',
        }));
    });
    it('findOpenLongTermOrConditionalOrders', async () => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create({
                ...constants_1.defaultOrder,
                orderFlags: v4_proto_parser_1.ORDER_FLAG_LONG_TERM.toString(),
            }),
            OrderTable.create({
                ...constants_1.defaultOrder,
                orderFlags: v4_proto_parser_1.ORDER_FLAG_CONDITIONAL.toString(),
            }),
        ]);
        const orders = await OrderTable.findOpenLongTermOrConditionalOrders();
        expect(orders.length).toEqual(2);
    });
    // TODO: Add a bunch of tests for different search parameters
    it('Successfully finds Order with clientId', async () => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '2',
            }),
        ]);
        const orders = await OrderTable.findAll({
            clientId: '1',
        }, [], { readReplica: true });
        expect(orders.length).toEqual(1);
        expect(orders[0]).toEqual(expect.objectContaining(constants_1.defaultOrder));
    });
    it('Successfully finds a Order', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const order = await OrderTable.findById(OrderTable.uuid(constants_1.defaultOrder.subaccountId, constants_1.defaultOrder.clientId, constants_1.defaultOrder.clobPairId, constants_1.defaultOrder.orderFlags));
        expect(order).toEqual(expect.objectContaining(constants_1.defaultOrder));
    });
    it('Successfully finds all orders by subaccount/clob pair id', async () => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '2',
            }),
        ]);
        const orders = await OrderTable.findBySubaccountIdAndClobPair(constants_1.defaultOrder.subaccountId, constants_1.defaultOrder.clobPairId);
        expect(orders).toHaveLength(2);
    });
    it('Successfully finds all orders by subaccount/clob pair id after height', async () => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '2',
                createdAtHeight: '5',
            }),
        ]);
        const orders = await OrderTable.findBySubaccountIdAndClobPairAfterHeight(constants_1.defaultOrder.subaccountId, constants_1.defaultOrder.clobPairId, 4);
        expect(orders).toHaveLength(1);
    });
    it.each([
        [
            'goodTilBlockBeforeOrAt',
            'goodTilBlock',
            {
                goodTilBlockBeforeOrAt: '101',
            },
            {
                ...constants_1.defaultOrder,
                goodTilBlockTime: null,
            },
        ],
        [
            'goodTilBlockTimeBeforeOrAt',
            'goodTilBlockTime',
            {
                goodTilBlockTimeBeforeOrAt: '2023-01-23T00:00:00.000Z',
            },
            {
                ...constants_1.defaultOrderGoodTilBlockTime,
                goodTilBlock: null,
            },
        ],
    ])('Successfully finds all orders by %s, excludes orders with null %s', async (_filterParam, _nullColumn, filter, expectedOrder) => {
        await Promise.all([
            OrderTable.create(constants_1.defaultOrder),
            OrderTable.create(constants_1.defaultOrderGoodTilBlockTime),
        ]);
        const orders = await OrderTable.findAll(filter, [], { readReplica: true });
        expect(orders).toHaveLength(1);
        expect(orders[0]).toEqual(expect.objectContaining(expectedOrder));
    });
    it('Successfully updates an Order', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const order = await OrderTable.update({
            id: constants_1.defaultOrderId,
            size: '32.50',
        });
        expect(order).toEqual(expect.objectContaining({
            ...constants_1.defaultOrder,
            size: '32.50',
        }));
    });
    it('Successfully upserts a new Order', async () => {
        const createOrder = {
            ...constants_1.defaultOrder,
            createdAtHeight: '2',
        };
        const order = await OrderTable.upsert(createOrder);
        expect(order).toEqual(expect.objectContaining(createOrder));
    });
    it('Successfully upserts a new Order with UNTRIGGERED', async () => {
        const createOrder = {
            ...constants_1.defaultOrder,
            status: types_1.OrderStatus.UNTRIGGERED,
            createdAtHeight: '2',
        };
        const order = await OrderTable.upsert(createOrder);
        expect(order).toEqual(expect.objectContaining(createOrder));
    });
    it('Successfully upserts a new Order and updates status', async () => {
        const createOrder = {
            ...constants_1.defaultOrder,
            createdAtHeight: '2',
            totalFilled: '50',
        };
        const order = await OrderTable.upsert(createOrder);
        expect(order).toEqual(expect.objectContaining({
            ...createOrder,
            status: types_1.OrderStatus.FILLED,
        }));
    });
    it('Successfully upserts an existing Order, changing status to filled', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: constants_1.defaultOrder.size,
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
            status: types_1.OrderStatus.FILLED,
        }));
    });
    it('Successfully upserts an existing Order', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: '10.65',
            timeInForce: types_1.TimeInForce.FOK,
            reduceOnly: true,
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining(upsertOrder));
    });
    it('Successfully upserts an existing Order multiple times', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: '10.65',
        };
        let order = await OrderTable.upsert(upsertOrder);
        order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining(upsertOrder));
    });
    it('Successfully upserts an existing Order with OPEN status', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: '1',
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
            status: types_1.OrderStatus.OPEN,
        }));
    });
    it('Successfully upserts an existing Order, created within the same transaction', async () => {
        const txId = await transaction_1.default.start();
        await OrderTable.create(constants_1.defaultOrder, { txId });
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: '10.65',
        };
        await OrderTable.upsert(upsertOrder, { txId });
        await transaction_1.default.commit(txId);
        // Find order after committing transaction
        const order = await OrderTable.findById(OrderTable.uuid(constants_1.defaultOrder.subaccountId, constants_1.defaultOrder.clientId, constants_1.defaultOrder.clobPairId, constants_1.defaultOrder.orderFlags));
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
        }));
    });
    it('Successfully upserts an existing Order, respects existing BEST_EFFORT_CANCELED status', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: constants_1.defaultOrder.size,
            status: types_1.OrderStatus.BEST_EFFORT_CANCELED,
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
            status: types_1.OrderStatus.BEST_EFFORT_CANCELED,
        }));
    });
    it('Successfully upserts an existing Order with UNTRIGGRERED status', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            status: types_1.OrderStatus.UNTRIGGERED,
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
            status: types_1.OrderStatus.UNTRIGGERED,
        }));
    });
    it('Successfully upserts an existing Order, with fixed-decimal notation', async () => {
        await OrderTable.create(constants_1.defaultOrder);
        const upsertOrder = {
            ...constants_1.defaultOrder,
            totalFilled: '0.00000001', // should not be converted to exponential notation
        };
        const order = await OrderTable.upsert(upsertOrder);
        expect(order).toEqual(expect.objectContaining({
            ...upsertOrder,
        }));
    });
    it('Fails to create invalid order with both goodTilBlock and goodTilBlockTime set', async () => {
        const invalidOrder = {
            ...constants_1.defaultOrder,
            goodTilBlockTime: constants_1.defaultOrderGoodTilBlockTime.goodTilBlockTime,
        };
        await expect(OrderTable.create(invalidOrder)).rejects.toBeInstanceOf(objection_1.CheckViolationError);
    });
    it('Successfully updates stale order status by id', async () => {
        const createdOrders = await Promise.all([
            // will be updated
            OrderTable.create(constants_1.defaultOrder),
            // will not be updated as status doesn't match old status in update
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '2',
                totalFilled: constants_1.defaultOrder.size,
                status: types_1.OrderStatus.FILLED,
            }),
            // will be updated
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '3',
                goodTilBlock: '120',
            }),
            // will not be updated as goodTilBlock >= latestBlock in update
            OrderTable.create({
                ...constants_1.defaultOrder,
                clientId: '4',
                goodTilBlock: '150',
            }),
            // will not be updated as goodTilBlock is null
            OrderTable.create(constants_1.defaultOrderGoodTilBlockTime),
        ]);
        const updatedOrders = await OrderTable.updateStaleOrderStatusByIds(types_1.OrderStatus.OPEN, types_1.OrderStatus.CANCELED, '135', createdOrders.map((order) => order.id));
        const expectedOrders = [createdOrders[0], createdOrders[2]].map((order) => {
            return {
                ...order,
                status: types_1.OrderStatus.CANCELED,
            };
        });
        expect(updatedOrders).toEqual(expect.arrayContaining(expectedOrders));
    });
});
//# sourceMappingURL=data:application/json;base64,