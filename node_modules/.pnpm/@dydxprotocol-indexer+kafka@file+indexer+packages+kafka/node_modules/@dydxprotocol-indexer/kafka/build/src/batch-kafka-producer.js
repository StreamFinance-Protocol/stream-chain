"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchKafkaProducer = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const lodash_1 = __importDefault(require("lodash"));
/**
 * Groups messages for a single kafka topic into batches to send fewer ProducerRecords.
 */
class BatchKafkaProducer {
    constructor(topic, producer, 
    // Note that default parameters are bound during module load time making it difficult
    // to modify the parameter during a test so we explicitly require callers to pass in
    // config.KAFKA_MAX_BATCH_WEBSOCKET_MESSAGE_SIZE_BYTES.
    maxBatchSizeBytes) {
        this.maxBatchSizeBytes = maxBatchSizeBytes;
        this.producer = producer;
        this.topic = topic;
        this.producerMessages = [];
        this.producerPromises = [];
        this.currentSize = 0;
    }
    /**
     * Add a message to the current batch. If the message size would push the current batch size over
     * the maxBatchSizeBytes, the current batch (without this message) is flushed first, then the
     * message is added to a new batch.
     */
    addMessageAndMaybeFlush(message) {
        const keyByteLength = message.key === undefined ? 0 : message.key.byteLength;
        const msgBuffer = message.value;
        if (this.currentSize + msgBuffer.byteLength + keyByteLength > this.maxBatchSizeBytes) {
            this.sendBatch();
        }
        this.producerMessages.push({ key: message.key, value: msgBuffer });
        this.currentSize += msgBuffer.byteLength;
        this.currentSize += keyByteLength;
    }
    async flush() {
        this.sendBatch();
        // TODO(IND-198): Log an error when kafka producer fails
        return Promise.all(this.producerPromises);
    }
    sendBatch() {
        if (!lodash_1.default.isEmpty(this.producerMessages)) {
            this.producerPromises.push(this.producer.send({ topic: this.topic, messages: this.producerMessages }));
        }
        base_1.logger.info({
            at: 'BatchMessenger#sendBatch',
            message: 'Produced kafka batch',
            currentSize: this.currentSize,
            producerMessages: JSON.stringify(this.producerMessages),
            recalculatedCurrentSize: this.producerMessages.reduce((acc, msg) => acc + msg.value.byteLength, 0),
            topic: this.topic,
        });
        this.producerMessages = [];
        this.currentSize = 0;
    }
}
exports.BatchKafkaProducer = BatchKafkaProducer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gta2Fma2EtcHJvZHVjZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYmF0Y2gta2Fma2EtcHJvZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBQW9EO0FBRXBELG9EQUF1QjtBQVl2Qjs7R0FFRztBQUNILE1BQWEsa0JBQWtCO0lBUzdCLFlBQ0UsS0FBa0IsRUFDbEIsUUFBa0I7SUFDbEIscUZBQXFGO0lBQ3JGLG9GQUFvRjtJQUNwRix1REFBdUQ7SUFDdkQsaUJBQXlCO1FBRXpCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSx1QkFBdUIsQ0FBQyxPQUF3QjtRQUNyRCxNQUFNLGFBQWEsR0FBVyxPQUFPLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUNyRixNQUFNLFNBQVMsR0FBVyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3hDLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsVUFBVSxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDcEYsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1NBQ2xCO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxXQUFXLElBQUksU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUN6QyxJQUFJLENBQUMsV0FBVyxJQUFJLGFBQWEsQ0FBQztJQUNwQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLHdEQUF3RDtRQUN4RCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLFNBQVM7UUFDZixJQUFJLENBQUMsZ0JBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUU7WUFDckMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FDM0UsQ0FBQztTQUNIO1FBQ0QsYUFBTSxDQUFDLElBQUksQ0FBQztZQUNWLEVBQUUsRUFBRSwwQkFBMEI7WUFDOUIsT0FBTyxFQUFFLHNCQUFzQjtZQUMvQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7WUFDdkQsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FDbkQsQ0FBQyxHQUFXLEVBQUUsR0FBb0IsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUNqRSxDQUFDLENBQ0Y7WUFDRCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFwRUQsZ0RBb0VDIn0=