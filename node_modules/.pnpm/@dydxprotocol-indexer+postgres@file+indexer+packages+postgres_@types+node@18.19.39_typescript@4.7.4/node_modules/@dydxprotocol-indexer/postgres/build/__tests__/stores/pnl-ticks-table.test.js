"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const PnlTicksTable = __importStar(require("../../src/stores/pnl-ticks-table"));
const BlockTable = __importStar(require("../../src/stores/block-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const luxon_1 = require("luxon");
const constants_2 = require("../../src/constants");
describe('PnlTicks store', () => {
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a Pnl Tick', async () => {
        await PnlTicksTable.create(constants_1.defaultPnlTick);
    });
    it('Successfully creates multiple Pnl Ticks', async () => {
        await BlockTable.create({
            ...constants_1.defaultBlock,
            blockHeight: '5',
        });
        const pnlTick2 = {
            subaccountId: constants_1.defaultSubaccountId,
            equity: '5',
            totalPnl: '5',
            netTransfers: '5',
            createdAt: '2020-01-01T00:00:00.000Z',
            blockHeight: '5',
            blockTime: constants_1.defaultBlock.time,
        };
        await Promise.all([
            PnlTicksTable.create(constants_1.defaultPnlTick),
            PnlTicksTable.create(pnlTick2),
        ]);
        const pnlTicks = await PnlTicksTable.findAll({}, [], {
            orderBy: [[types_1.PnlTicksColumns.blockHeight, types_1.Ordering.ASC]],
        });
        expect(pnlTicks.length).toEqual(2);
        expect(pnlTicks[0]).toEqual(expect.objectContaining(constants_1.defaultPnlTick));
        expect(pnlTicks[1]).toEqual(expect.objectContaining(pnlTick2));
    });
    it('createMany Pnl Ticks', async () => {
        const pnlTick2 = {
            subaccountId: constants_1.defaultSubaccountId,
            equity: '5',
            totalPnl: '5',
            netTransfers: '5',
            createdAt: '2020-01-01T00:00:00.000Z',
            blockHeight: '5',
            blockTime: constants_1.defaultBlock.time,
        };
        await PnlTicksTable.createMany([constants_1.defaultPnlTick, pnlTick2]);
        const pnlTicks = await PnlTicksTable.findAll({}, [], {
            orderBy: [[types_1.PnlTicksColumns.blockHeight, types_1.Ordering.ASC]],
        });
        expect(pnlTicks.length).toEqual(2);
        expect(pnlTicks[0]).toEqual(expect.objectContaining(constants_1.defaultPnlTick));
        expect(pnlTicks[1]).toEqual(expect.objectContaining(pnlTick2));
    });
    it('Successfully finds PnlTicks with subaccountId', async () => {
        await Promise.all([
            PnlTicksTable.create(constants_1.defaultPnlTick),
            PnlTicksTable.create({
                ...constants_1.defaultPnlTick,
                createdAt: '2020-01-01T00:00:00.000Z',
            }),
            PnlTicksTable.create({
                ...constants_1.defaultPnlTick,
                subaccountId: constants_1.defaultSubaccountId2,
                createdAt: '2020-01-01T00:00:00.000Z',
            }),
        ]);
        const pnlTicks = await PnlTicksTable.findAll({
            subaccountId: [constants_1.defaultSubaccountId],
        }, [], { readReplica: true });
        expect(pnlTicks.length).toEqual(2);
    });
    it('Successfully finds latest block time', async () => {
        const blockTime = '2023-01-01T00:00:00.000Z';
        await Promise.all([
            PnlTicksTable.create(constants_1.defaultPnlTick),
            PnlTicksTable.create({
                ...constants_1.defaultPnlTick,
                createdAt: '2020-01-01T00:00:00.000Z',
                blockHeight: '1000',
                blockTime,
            }),
        ]);
        const latestBlocktime = await PnlTicksTable.findLatestProcessedBlocktime();
        expect(latestBlocktime).toEqual(blockTime);
    });
    it('Successfully finds latest block time without any pnl ticks', async () => {
        const latestBlocktime = await PnlTicksTable.findLatestProcessedBlocktime();
        expect(latestBlocktime).toEqual(constants_2.ZERO_TIME_ISO_8601);
    });
    it('createMany PnlTicks, find most recent pnl ticks for each account', async () => {
        await Promise.all([
            BlockTable.create({
                blockHeight: '3',
                time: constants_1.defaultBlock.time,
            }),
            BlockTable.create({
                blockHeight: '5',
                time: constants_1.defaultBlock.time,
            }),
        ]);
        await PnlTicksTable.createMany([
            {
                subaccountId: constants_1.defaultSubaccountId,
                equity: '1092',
                createdAt: luxon_1.DateTime.utc().minus({ hours: 1 }).toISO(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: constants_1.defaultBlock.blockHeight,
                blockTime: constants_1.defaultBlock.time,
            },
            {
                subaccountId: constants_1.defaultSubaccountId,
                equity: '1097',
                createdAt: luxon_1.DateTime.utc().minus({ hours: 3 }).toISO(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: '3',
                blockTime: constants_1.defaultBlock.time,
            },
            {
                subaccountId: constants_1.defaultSubaccountId,
                equity: '1011',
                createdAt: luxon_1.DateTime.utc().minus({ hours: 11 }).toISO(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: '5',
                blockTime: constants_1.defaultBlock.time,
            },
            {
                subaccountId: constants_1.defaultSubaccountId,
                equity: '1014',
                createdAt: luxon_1.DateTime.utc().minus({ hours: 9 }).toISO(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: '5',
                blockTime: constants_1.defaultBlock.time,
            },
            {
                subaccountId: constants_1.defaultSubaccountId2,
                equity: '100',
                createdAt: new Date().toISOString(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: '2',
                blockTime: constants_1.defaultBlock2.time,
            },
            {
                subaccountId: constants_1.defaultSubaccountId2,
                equity: '200',
                createdAt: luxon_1.DateTime.utc().minus({ hours: 9 }).toISO(),
                totalPnl: '1000',
                netTransfers: '50',
                blockHeight: '5',
                blockTime: constants_1.defaultBlock.time,
            },
        ]);
        const mostRecent = await PnlTicksTable.findMostRecentPnlTickForEachAccount('3');
        expect(mostRecent[constants_1.defaultSubaccountId].equity).toEqual('1014');
        expect(mostRecent[constants_1.defaultSubaccountId2].equity).toEqual('200');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5sLXRpY2tzLXRhYmxlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc3RvcmVzL3BubC10aWNrcy10YWJsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FNeUI7QUFDekIsZ0ZBQWtFO0FBQ2xFLHlFQUEyRDtBQUMzRCw2REFBNEU7QUFDNUUsZ0VBQXNEO0FBQ3RELG9EQUs4QjtBQUM5QixpQ0FBaUM7QUFDakMsbURBQXlEO0FBRXpELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sSUFBQSwwQkFBUSxHQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLG9CQUFPLEdBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsc0JBQVMsR0FBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sSUFBQSxxQkFBUSxHQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxhQUFhLENBQUMsTUFBTSxDQUFDLDBCQUFjLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RCxNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDdEIsR0FBRyx3QkFBWTtZQUNmLFdBQVcsRUFBRSxHQUFHO1NBQ2pCLENBQUMsQ0FBQztRQUNILE1BQU0sUUFBUSxH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