// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/lending/lendingAccount.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Represents an individual account position. User's can lend and not borrow or lend and borrow on their position
// AccruedBorrowedAsset: separate from og borrow quantity to not have it appear like the user has more to borrow with than intended
type AccountPosition struct {
	ID                   string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	LendingAssets        []*types.Coin `protobuf:"bytes,2,rep,name=LendingAssets,proto3" json:"LendingAssets,omitempty"`
	BorrowedAsset        *types.Coin   `protobuf:"bytes,3,opt,name=BorrowedAsset,proto3" json:"BorrowedAsset,omitempty"`
	AccruedBorrowedAsset *types.Coin   `protobuf:"bytes,4,opt,name=AccruedBorrowedAsset,proto3" json:"AccruedBorrowedAsset,omitempty"`
	Balance              []*types.Coin `protobuf:"bytes,5,rep,name=Balance,proto3" json:"Balance,omitempty"`
}

func (m *AccountPosition) Reset()         { *m = AccountPosition{} }
func (m *AccountPosition) String() string { return proto.CompactTextString(m) }
func (*AccountPosition) ProtoMessage()    {}
func (*AccountPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_d80ea318668d41d6, []int{0}
}
func (m *AccountPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountPosition.Merge(m, src)
}
func (m *AccountPosition) XXX_Size() int {
	return m.Size()
}
func (m *AccountPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountPosition.DiscardUnknown(m)
}

var xxx_messageInfo_AccountPosition proto.InternalMessageInfo

func (m *AccountPosition) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AccountPosition) GetLendingAssets() []*types.Coin {
	if m != nil {
		return m.LendingAssets
	}
	return nil
}

func (m *AccountPosition) GetBorrowedAsset() *types.Coin {
	if m != nil {
		return m.BorrowedAsset
	}
	return nil
}

func (m *AccountPosition) GetAccruedBorrowedAsset() *types.Coin {
	if m != nil {
		return m.AccruedBorrowedAsset
	}
	return nil
}

func (m *AccountPosition) GetBalance() []*types.Coin {
	if m != nil {
		return m.Balance
	}
	return nil
}

// Account structure for user deposits.
type LendingAccount struct {
	Address          string             `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Nonce            uint64             `protobuf:"varint,2,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	AccountPositions []*AccountPosition `protobuf:"bytes,3,rep,name=AccountPositions,proto3" json:"AccountPositions,omitempty"`
}

func (m *LendingAccount) Reset()         { *m = LendingAccount{} }
func (m *LendingAccount) String() string { return proto.CompactTextString(m) }
func (*LendingAccount) ProtoMessage()    {}
func (*LendingAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d80ea318668d41d6, []int{1}
}
func (m *LendingAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendingAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendingAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendingAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendingAccount.Merge(m, src)
}
func (m *LendingAccount) XXX_Size() int {
	return m.Size()
}
func (m *LendingAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_LendingAccount.DiscardUnknown(m)
}

var xxx_messageInfo_LendingAccount proto.InternalMessageInfo

func (m *LendingAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *LendingAccount) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *LendingAccount) GetAccountPositions() []*AccountPosition {
	if m != nil {
		return m.AccountPositions
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountPosition)(nil), "dydxprotocol.lending.accountPosition")
	proto.RegisterType((*LendingAccount)(nil), "dydxprotocol.lending.LendingAccount")
}

func init() {
	proto.RegisterFile("dydxprotocol/lending/lendingAccount.proto", fileDescriptor_d80ea318668d41d6)
}

var fileDescriptor_d80ea318668d41d6 = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x6e, 0xd4, 0x30,
	0x14, 0xc6, 0xc7, 0x99, 0x96, 0x0a, 0x23, 0x0a, 0xb2, 0xb2, 0x48, 0x47, 0x28, 0x8a, 0x2a, 0x21,
	0x0d, 0x8b, 0xb1, 0xd5, 0xf6, 0x00, 0x28, 0xa1, 0x02, 0x55, 0x2a, 0xa8, 0xa4, 0x3b, 0x36, 0xc8,
	0x71, 0x4c, 0x6a, 0x29, 0xe3, 0x57, 0xd9, 0x0e, 0x74, 0x6e, 0xc1, 0x2d, 0x58, 0xb1, 0xe3, 0x10,
	0x2c, 0x47, 0xac, 0x58, 0xa2, 0x99, 0x8b, 0xa0, 0xfc, 0x1b, 0x11, 0x3a, 0xd2, 0xac, 0xa2, 0xe7,
	0xef, 0x7b, 0xbf, 0x3c, 0xfb, 0x7d, 0xf8, 0x45, 0xbe, 0xc8, 0xef, 0x6e, 0x0d, 0x38, 0x10, 0x50,
	0xb2, 0x52, 0xea, 0x5c, 0xe9, 0xa2, 0xff, 0xc6, 0x42, 0x40, 0xa5, 0x1d, 0x6d, 0x74, 0xe2, 0xff,
	0x6b, 0xa5, 0x9d, 0x65, 0x72, 0x24, 0xc0, 0xce, 0xc1, 0x7e, 0x6c, 0x04, 0xd6, 0x16, 0x6d, 0xc3,
	0xe4, 0x59, 0x01, 0x50, 0x94, 0x92, 0x35, 0x55, 0x56, 0x7d, 0x62, 0xd6, 0x99, 0x4a, 0x74, 0xb8,
	0x49, 0xd8, 0x7a, 0x59, 0xc6, 0xad, 0x64, 0x9f, 0x4f, 0x32, 0xe9, 0xf8, 0x09, 0x13, 0xa0, 0x74,
	0xab, 0x1f, 0x7f, 0xf3, 0xf0, 0x13, 0xde, 0x0e, 0x70, 0x05, 0x56, 0x39, 0x05, 0x9a, 0x1c, 0x62,
	0xef, 0xe2, 0x3c, 0x40, 0x11, 0x9a, 0x3e, 0x4c, 0xbd, 0x8b, 0x73, 0xf2, 0x12, 0x3f, 0xbe, 0xec,
	0x46, 0xb5, 0x56, 0x3a, 0x1b, 0x78, 0xd1, 0x78, 0xfa, 0xe8, 0xf4, 0x88, 0x76, 0x73, 0xd4, 0x6c,
	0xda, 0xb1, 0xe9, 0x2b, 0x50, 0x3a, 0x1d, 0xfa, 0x6b, 0x40, 0x02, 0xc6, 0xc0, 0x17, 0x99, 0x37,
	0x27, 0xc1, 0x38, 0x42, 0x3b, 0x00, 0x03, 0x3f, 0x79, 0x8b, 0xfd, 0x58, 0x08, 0x53, 0xc9, 0x7c,
	0xc8, 0xd9, 0xdb, 0xc5, 0xd9, 0xda, 0x46, 0xce, 0xf0, 0x41, 0xc2, 0x4b, 0xae, 0x85, 0x0c, 0xf6,
	0x77, 0x5d, 0xa5, 0x77, 0x1e, 0x7f, 0x47, 0xf8, 0xf0, 0x72, 0xb0, 0x31, 0x72, 0x8a, 0x0f, 0xe2,
	0x3c, 0x37, 0xd2, 0xda, 0xf6, 0xb5, 0x92, 0xe0, 0xd7, 0x8f, 0x99, 0xdf, 0xa1, 0x3a, 0xe5, 0xda,
	0x19, 0xa5, 0x8b, 0xb4, 0x37, 0x12, 0x1f, 0xef, 0xbf, 0x83, 0xfa, 0xcf, 0x5e, 0x84, 0xa6, 0x7b,
	0x69, 0x5b, 0x90, 0xf7, 0xf8, 0x69, 0x3c, 0xdc, 0x82, 0x0d, 0xc6, 0xcd, 0x68, 0xcf, 0xe9, 0xb6,
	0x40, 0xd0, 0xff, 0x76, 0x96, 0xde, 0x6b, 0x4f, 0xf8, 0xcf, 0x55, 0x88, 0x96, 0xab, 0x10, 0xfd,
	0x59, 0x85, 0xe8, 0xeb, 0x3a, 0x1c, 0x2d, 0xd7, 0xe1, 0xe8, 0xf7, 0x3a, 0x1c, 0x7d, 0x78, 0x53,
	0x28, 0x77, 0x53, 0x65, 0x54, 0xc0, 0x9c, 0x5d, 0x3b, 0x23, 0xf9, 0xfc, 0xb5, 0xd2, 0xf5, 0x1d,
	0x67, 0x57, 0x7d, 0x44, 0x6d, 0x73, 0x3c, 0x13, 0x37, 0x5c, 0x69, 0xb6, 0x09, 0xee, 0xdd, 0x26,
	0xba, 0x6e, 0x71, 0x2b, 0x6d, 0xf6, 0xa0, 0x51, 0xce, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x44,
	0xba, 0xc5, 0xe2, 0xdf, 0x02, 0x00, 0x00,
}

func (m *AccountPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.AccruedBorrowedAsset != nil {
		{
			size, err := m.AccruedBorrowedAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BorrowedAsset != nil {
		{
			size, err := m.BorrowedAsset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingAccount(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LendingAssets) > 0 {
		for iNdEx := len(m.LendingAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LendingAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintLendingAccount(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LendingAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendingAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendingAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountPositions) > 0 {
		for iNdEx := len(m.AccountPositions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccountPositions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Nonce != 0 {
		i = encodeVarintLendingAccount(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLendingAccount(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLendingAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovLendingAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovLendingAccount(uint64(l))
	}
	if len(m.LendingAssets) > 0 {
		for _, e := range m.LendingAssets {
			l = e.Size()
			n += 1 + l + sovLendingAccount(uint64(l))
		}
	}
	if m.BorrowedAsset != nil {
		l = m.BorrowedAsset.Size()
		n += 1 + l + sovLendingAccount(uint64(l))
	}
	if m.AccruedBorrowedAsset != nil {
		l = m.AccruedBorrowedAsset.Size()
		n += 1 + l + sovLendingAccount(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovLendingAccount(uint64(l))
		}
	}
	return n
}

func (m *LendingAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLendingAccount(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovLendingAccount(uint64(m.Nonce))
	}
	if len(m.AccountPositions) > 0 {
		for _, e := range m.AccountPositions {
			l = e.Size()
			n += 1 + l + sovLendingAccount(uint64(l))
		}
	}
	return n
}

func sovLendingAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLendingAccount(x uint64) (n int) {
	return sovLendingAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: accountPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: accountPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LendingAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LendingAssets = append(m.LendingAssets, &types.Coin{})
			if err := m.LendingAssets[len(m.LendingAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BorrowedAsset == nil {
				m.BorrowedAsset = &types.Coin{}
			}
			if err := m.BorrowedAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedBorrowedAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccruedBorrowedAsset == nil {
				m.AccruedBorrowedAsset = &types.Coin{}
			}
			if err := m.AccruedBorrowedAsset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, &types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LendingAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendingAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendingAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPositions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPositions = append(m.AccountPositions, &AccountPosition{})
			if err := m.AccountPositions[len(m.AccountPositions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLendingAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLendingAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLendingAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLendingAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLendingAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLendingAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLendingAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLendingAccount = fmt.Errorf("proto: unexpected end of group")
)
