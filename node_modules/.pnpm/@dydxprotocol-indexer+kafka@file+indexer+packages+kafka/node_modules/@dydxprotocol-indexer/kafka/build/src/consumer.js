"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startConsumer = exports.stopConsumer = exports.updateOnBatchFunction = exports.updateOnMessageFunction = exports.consumer = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const uuid_1 = require("uuid");
const config_1 = __importDefault(require("./config"));
const kafka_1 = require("./kafka");
const groupIdPrefix = config_1.default.SERVICE_NAME;
const groupIdSuffix = config_1.default.KAFKA_ENABLE_UNIQUE_CONSUMER_GROUP_IDS ? `_${(0, uuid_1.v4)()}` : '';
const groupId = `${groupIdPrefix}${groupIdSuffix}`;
exports.consumer = kafka_1.kafka.consumer({
    groupId,
    sessionTimeout: config_1.default.KAFKA_SESSION_TIMEOUT_MS,
    rebalanceTimeout: config_1.default.KAFKA_REBALANCE_TIMEOUT_MS,
    heartbeatInterval: config_1.default.KAFKA_HEARTBEAT_INTERVAL_MS,
    readUncommitted: false,
    maxBytes: 4194304, // 4MB
});
// List of functions to run per message consumed.
let onMessageFunction;
// List of function to be run per batch consumed.
let onBatchFunction;
/**
 * Overwrite function to be run on each kafka message
 * @param onMessage
 */
function updateOnMessageFunction(onMessage) {
    onMessageFunction = onMessage;
}
exports.updateOnMessageFunction = updateOnMessageFunction;
/**
 * Overwrite function to be run on each kafka batch
 */
function updateOnBatchFunction(onBatch) {
    onBatchFunction = onBatch;
}
exports.updateOnBatchFunction = updateOnBatchFunction;
// Whether the consumer is stopped.
let stopped = false;
exports.consumer.on('consumer.disconnect', async () => {
    base_1.logger.info({
        at: 'consumers#disconnect',
        message: 'Kafka consumer disconnected',
        groupId,
    });
    if (!stopped) {
        await exports.consumer.connect();
        base_1.logger.info({
            at: 'kafka-consumer#disconnect',
            message: 'Kafka consumer reconnected',
            groupId,
        });
    }
    else {
        base_1.logger.info({
            at: 'kafka-consumer#disconnect',
            message: 'Not reconnecting since task is shutting down',
            groupId,
        });
    }
});
async function stopConsumer() {
    base_1.logger.info({
        at: 'kafka-consumer#stop',
        message: 'Stopping kafka consumer',
        groupId,
    });
    stopped = true;
    await exports.consumer.disconnect();
}
exports.stopConsumer = stopConsumer;
async function startConsumer(batchProcessing = false) {
    const consumerRunConfig = {
        // The last offset of each batch will be committed if processing does not error.
        // The commit will still happen if the number of messages in the batch < autoCommitThreshold.
        eachBatchAutoResolve: true,
        partitionsConsumedConcurrently: config_1.default.KAFKA_CONCURRENT_PARTITIONS,
        autoCommit: true,
    };
    if (batchProcessing) {
        consumerRunConfig.eachBatch = onBatchFunction;
    }
    else {
        consumerRunConfig.eachMessage = async ({ topic, message }) => {
            await onMessageFunction(topic, message);
        };
    }
    await exports.consumer.run(consumerRunConfig);
    base_1.logger.info({
        at: 'consumers#connect',
        message: 'Started kafka consumer',
        groupId,
    });
}
exports.startConsumer = startConsumer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uc3VtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEscURBRW9DO0FBSXBDLCtCQUFvQztBQUVwQyxzREFBOEI7QUFDOUIsbUNBQWdDO0FBRWhDLE1BQU0sYUFBYSxHQUFXLGdCQUFNLENBQUMsWUFBWSxDQUFDO0FBQ2xELE1BQU0sYUFBYSxHQUFXLGdCQUFNLENBQUMsc0NBQXNDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBQSxTQUFNLEdBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDbEcsTUFBTSxPQUFPLEdBQVcsR0FBRyxhQUFhLEdBQUcsYUFBYSxFQUFFLENBQUM7QUFFOUMsUUFBQSxRQUFRLEdBQWEsYUFBSyxDQUFDLFFBQVEsQ0FBQztJQUMvQyxPQUFPO0lBQ1AsY0FBYyxFQUFFLGdCQUFNLENBQUMsd0JBQXdCO0lBQy9DLGdCQUFnQixFQUFFLGdCQUFNLENBQUMsMEJBQTBCO0lBQ25ELGlCQUFpQixFQUFFLGdCQUFNLENBQUMsMkJBQTJCO0lBQ3JELGVBQWUsRUFBRSxLQUFLO0lBQ3RCLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTTtDQUMxQixDQUFDLENBQUM7QUFFSCxpREFBaUQ7QUFDakQsSUFBSSxpQkFBMEUsQ0FBQztBQUUvRSxpREFBaUQ7QUFDakQsSUFBSSxlQUE2RCxDQUFDO0FBRWxFOzs7R0FHRztBQUNILFNBQWdCLHVCQUF1QixDQUNyQyxTQUFrRTtJQUVsRSxpQkFBaUIsR0FBRyxTQUFTLENBQUM7QUFDaEMsQ0FBQztBQUpELDBEQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDbkMsT0FBcUQ7SUFFckQsZUFBZSxHQUFHLE9BQU8sQ0FBQztBQUM1QixDQUFDO0FBSkQsc0RBSUM7QUFFRCxtQ0FBbUM7QUFDbkMsSUFBSSxPQUFPLEdBQVksS0FBSyxDQUFDO0FBRTdCLGdCQUFRLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzVDLGFBQU0sQ0FBQyxJQUFJLENBQUM7UUFDVixFQUFFLEVBQUUsc0JBQXNCO1FBQzFCLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsT0FBTztLQUNSLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxPQUFPLEVBQUU7UUFDWixNQUFNLGdCQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekIsYUFBTSxDQUFDLElBQUksQ0FBQztZQUNWLEVBQUUsRUFBRSwyQkFBMkI7WUFDL0IsT0FBTyxFQUFFLDRCQUE0QjtZQUNyQyxPQUFPO1NBQ1IsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLGFBQU0sQ0FBQyxJQUFJLENBQUM7WUFDVixFQUFFLEVBQUUsMkJBQTJCO1lBQy9CLE9BQU8sRUFBRSw4Q0FBOEM7WUFDdkQsT0FBTztTQUNSLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQyxDQUFDLENBQUM7QUFFSSxLQUFLLFVBQVUsWUFBWTtJQUNoQyxhQUFNLENBQUMsSUFBSSxDQUFDO1FBQ1YsRUFBRSxFQUFFLHFCQUFxQjtRQUN6QixPQUFPLEVBQUUseUJBQXlCO1FBQ2xDLE9BQU87S0FDUixDQUFDLENBQUM7SUFFSCxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2YsTUFBTSxnQkFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzlCLENBQUM7QUFURCxvQ0FTQztBQUVNLEtBQUssVUFBVSxhQUFhLENBQUMsa0JBQTJCLEtBQUs7SUFDbEUsTUFBTSxpQkFBaUIsR0FBc0I7UUFDM0MsZ0ZBQWdGO1FBQ2hGLDZGQUE2RjtRQUM3RixvQkFBb0IsRUFBRSxJQUFJO1FBQzFCLDhCQUE4QixFQUFFLGdCQUFNLENBQUMsMkJBQTJCO1FBQ2xFLFVBQVUsRUFBRSxJQUFJO0tBQ2pCLENBQUM7SUFFRixJQUFJLGVBQWUsRUFBRTtRQUNuQixpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsZUFBZSxDQUFDO0tBQy9DO1NBQU07UUFDTCxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7WUFDM0QsTUFBTSxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDO0tBQ0g7SUFFRCxNQUFNLGdCQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFdEMsYUFBTSxDQUFDLElBQUksQ0FBQztRQUNWLEVBQUUsRUFBRSxtQkFBbUI7UUFDdkIsT0FBTyxFQUFFLHdCQUF3QjtRQUNqQyxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQXhCRCxzQ0F3QkMifQ==