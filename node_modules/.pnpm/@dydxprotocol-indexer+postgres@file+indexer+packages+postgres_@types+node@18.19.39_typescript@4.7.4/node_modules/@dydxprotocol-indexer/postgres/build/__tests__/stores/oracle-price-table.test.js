"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const OraclePriceTable = __importStar(require("../../src/stores/oracle-price-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const BlockTable = __importStar(require("../../src/stores/block-table"));
const luxon_1 = require("luxon");
describe('Oracle price store', () => {
    const updatedHeight = '5';
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
        await BlockTable.create({
            ...constants_1.defaultBlock,
            blockHeight: updatedHeight,
        });
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates an oracle price', async () => {
        await OraclePriceTable.create(constants_1.defaultOraclePrice);
    });
    it('Successfully creates multiple oracle prices', async () => {
        const oraclePrice2 = {
            marketId: constants_1.defaultMarket.id,
            price: '10000.05',
            effectiveAt: constants_1.createdDateTime.toISO(),
            effectiveAtHeight: updatedHeight,
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
        ]);
        const oraclePrices = await OraclePriceTable.findAll({
            marketId: [constants_1.defaultMarket.id],
        }, [], {
            orderBy: [[types_1.OraclePriceColumns.effectiveAtHeight, types_1.Ordering.ASC]],
        });
        expect(oraclePrices.length).toEqual(2);
        expect(oraclePrices[0]).toEqual(expect.objectContaining(constants_1.defaultOraclePrice));
        expect(oraclePrices[1]).toEqual(expect.objectContaining(oraclePrice2));
    });
    it('Successfully finds all OraclePrices', async () => {
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create({
                ...constants_1.defaultOraclePrice,
                effectiveAtHeight: updatedHeight,
            }),
        ]);
        const oraclePrices = await OraclePriceTable.findAll({
            marketId: [constants_1.defaultMarket.id],
        }, [], {
            orderBy: [[types_1.OraclePriceColumns.effectiveAtHeight, types_1.Ordering.ASC]],
        });
        expect(oraclePrices.length).toEqual(2);
        expect(oraclePrices[0]).toEqual(expect.objectContaining(constants_1.defaultOraclePrice));
        expect(oraclePrices[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultOraclePrice,
            effectiveAtHeight: updatedHeight,
        }));
    });
    it('Successfully finds OraclePrice with effectiveAtHeight', async () => {
        await OraclePriceTable.create(constants_1.defaultOraclePrice);
        const oraclePrices = await OraclePriceTable.findAll({
            effectiveAtHeight: constants_1.defaultOraclePrice.effectiveAtHeight,
        }, [], { readReplica: true });
        expect(oraclePrices.length).toEqual(1);
        expect(oraclePrices[0]).toEqual(expect.objectContaining({
            ...constants_1.defaultOraclePrice,
        }));
    });
    it('Successfully finds all OraclePrices effective before or after the height', async () => {
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create({
                ...constants_1.defaultOraclePrice,
                effectiveAtHeight: updatedHeight,
            }),
        ]);
        const oraclePrices = await OraclePriceTable.findAll({
            marketId: [constants_1.defaultMarket.id],
            effectiveBeforeOrAtHeight: constants_1.defaultOraclePrice.effectiveAtHeight,
        }, [], {});
        expect(oraclePrices.length).toEqual(1);
        expect(oraclePrices[0]).toEqual(expect.objectContaining(constants_1.defaultOraclePrice));
    });
    it('Successfully finds all OraclePrices effective before or after time', async () => {
        const oraclePrice2 = {
            ...constants_1.defaultOraclePrice,
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
        ]);
        const oraclePrices = await OraclePriceTable.findAll({
            marketId: [constants_1.defaultMarket.id],
            effectiveBeforeOrAt: '2000-05-25T00:00:00.000Z',
        }, [], {});
        expect(oraclePrices.length).toEqual(1);
        expect(oraclePrices[0]).toEqual(expect.objectContaining(oraclePrice2));
    });
    it('Successfully finds an OraclePrice', async () => {
        await OraclePriceTable.create(constants_1.defaultOraclePrice);
        const oraclePrice = await OraclePriceTable.findById(constants_1.defaultOraclePriceId);
        expect(oraclePrice).toEqual(expect.objectContaining(constants_1.defaultOraclePrice));
    });
    it('Successfully finds oracle prices in reverse chronological order by market id', async () => {
        const oraclePrice2 = {
            ...constants_1.defaultOraclePrice,
            effectiveAtHeight: updatedHeight,
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
        ]);
        const oraclePrices = await OraclePriceTable
            .findOraclePricesInReverseChronologicalOrder(constants_1.defaultMarket.id);
        expect(oraclePrices.length).toEqual(2);
        expect(oraclePrices[0]).toEqual(expect.objectContaining(oraclePrice2));
        expect(oraclePrices[1]).toEqual(expect.objectContaining(constants_1.defaultOraclePrice));
    });
    it('Successfully finds latest oracle price for market id', async () => {
        const oraclePrice2 = {
            ...constants_1.defaultOraclePrice,
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
        ]);
        const oraclePrice = await OraclePriceTable
            .findMostRecentMarketOraclePrice(constants_1.defaultMarket.id);
        expect(oraclePrice).toEqual(expect.objectContaining(oraclePrice2));
    });
    it('Successfully finds latest prices by effectiveAtHeight', async () => {
        const oraclePrice2 = {
            ...constants_1.defaultOraclePrice,
            price: '10000.05',
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
            OraclePriceTable.create(constants_1.defaultOraclePrice2),
        ]);
        const oraclePrices = await OraclePriceTable
            .findLatestPrices(updatedHeight);
        expect(oraclePrices).toEqual(expect.objectContaining({
            [constants_1.defaultOraclePrice.marketId]: oraclePrice2.price,
            [constants_1.defaultOraclePrice2.marketId]: constants_1.defaultOraclePrice2.price,
        }));
    });
    it('Successfully finds the latest price and the price 24h ago', async () => {
        const now = luxon_1.DateTime.local().toISO();
        const lessThan24HAgo = luxon_1.DateTime.local().minus({ hour: 23 }).toISO();
        const moreThan24HAgo = luxon_1.DateTime.local().minus({ hour: 24, minute: 5 }).toISO();
        const wayMoreThan24HAgo = luxon_1.DateTime.local().minus({ hour: 25 }).toISO();
        const oraclePrice3 = {
            ...constants_1.defaultOraclePrice,
            price: '3',
            effectiveAtHeight: '3',
            effectiveAt: lessThan24HAgo,
        };
        const oraclePrice4 = {
            ...constants_1.defaultOraclePrice,
            price: '4',
            effectiveAtHeight: '4',
            effectiveAt: moreThan24HAgo,
        };
        const oraclePrice5 = {
            ...constants_1.defaultOraclePrice,
            price: '5',
            effectiveAtHeight: '5',
            effectiveAt: wayMoreThan24HAgo,
        };
        const oraclePrice6 = {
            ...constants_1.defaultOraclePrice,
            price: '6',
            effectiveAtHeight: '6',
            effectiveAt: now,
        };
        const oraclePrice7 = {
            ...constants_1.defaultOraclePrice,
            marketId: constants_1.defaultMarket2.id,
            price: '7',
            effectiveAtHeight: '7',
            effectiveAt: lessThan24HAgo,
        };
        const blockHeights = ['3', '4', '6', '7'];
        const blockPromises = blockHeights.map((height) => BlockTable.create({
            ...constants_1.defaultBlock,
            blockHeight: height,
        }));
        await Promise.all(blockPromises);
        await Promise.all([
            OraclePriceTable.create(oraclePrice3),
            OraclePriceTable.create(oraclePrice4),
            OraclePriceTable.create(oraclePrice5),
            OraclePriceTable.create(oraclePrice6),
            OraclePriceTable.create(oraclePrice7),
        ]);
        const oraclePricesFrom24hAgo = await OraclePriceTable
            .getPricesFrom24hAgo();
        expect(oraclePricesFrom24hAgo).toEqual(expect.objectContaining({
            [constants_1.defaultOraclePrice.marketId]: oraclePrice4.price,
        }));
        const latestPrices = await OraclePriceTable
            .getLatestPrices();
        expect(latestPrices).toEqual(expect.objectContaining({
            [constants_1.defaultOraclePrice.marketId]: oraclePrice6.price,
            [constants_1.defaultMarket2.id]: oraclePrice7.price,
        }));
    });
    it('Successfully finds latest prices respecting effectiveAtHeight', async () => {
        const oraclePrice2 = {
            ...constants_1.defaultOraclePrice,
            price: '10000.05',
            effectiveAtHeight: updatedHeight,
            effectiveAt: '1982-05-25T00:00:00.000Z',
        };
        await Promise.all([
            OraclePriceTable.create(constants_1.defaultOraclePrice),
            OraclePriceTable.create(oraclePrice2),
        ]);
        const oraclePrices = await OraclePriceTable
            .findLatestPrices(constants_1.defaultOraclePrice.effectiveAtHeight);
        expect(oraclePrices).toEqual(expect.objectContaining({
            [constants_1.defaultOraclePrice.marketId]: constants_1.defaultOraclePrice.price,
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JhY2xlLXByaWNlLXRhYmxlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc3RvcmVzL29yYWNsZS1wcmljZS10YWJsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FNeUI7QUFDekIsc0ZBQXdFO0FBQ3hFLDZEQUE0RTtBQUM1RSxnRUFBc0Q7QUFDdEQsb0RBUThCO0FBQzlCLHlFQUEyRDtBQUMzRCxpQ0FBaUM7QUFFakMsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxNQUFNLGFBQWEsR0FBVyxHQUFHLENBQUM7SUFFbEMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sSUFBQSwwQkFBUSxHQUFFLENBQUM7UUFDakIsTUFBTSxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3RCLEdBQUcsd0JBQVk7WUFDZixXQUFXLEVBQUUsYUFBYTtTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsb0JBQU8sR0FBRSxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxzQkFBUyxHQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxJQUFBLHFCQUFRLEdBQUUsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNwRCxNQUFNLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyw4QkFBa0IsQ0FBQyxDQUFDO0lBQ3BELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUss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