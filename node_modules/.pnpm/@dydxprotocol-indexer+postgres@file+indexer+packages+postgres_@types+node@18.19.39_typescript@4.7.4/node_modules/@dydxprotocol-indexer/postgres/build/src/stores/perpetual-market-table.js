"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateMarketCheckerFields = exports.findByTicker = exports.findByMarketId = exports.findByClobPairId = exports.findById = exports.updateByMarketId = exports.update = exports.create = exports.findAll = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const perpetual_market_model_1 = __importDefault(require("../models/perpetual-market-model"));
const types_1 = require("../types");
async function findAll({ id, marketId, liquidityTierId, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        marketId,
        liquidityTierId,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualMarketColumns.id, id);
    }
    if (marketId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualMarketColumns.marketId, marketId);
    }
    if (liquidityTierId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.PerpetualMarketColumns.liquidityTierId, liquidityTierId);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.PerpetualMarketColumns.id, types_1.Ordering.ASC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(perpetualMarketToCreate, options = { txId: undefined }) {
    return perpetual_market_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        ...perpetualMarketToCreate,
    }).returning('*');
}
exports.create = create;
async function update({ ...fields }, options = { txId: undefined }) {
    const perpetualMarket = await perpetual_market_model_1.default.query(transaction_1.default.get(options.txId)).findById(fields.id).patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of perpetualMarkets.
    return perpetualMarket;
}
exports.update = update;
async function updateByMarketId({ ...fields }, options = { txId: undefined }) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    const perpetualMarkets = await baseQuery
        .where(types_1.PerpetualMarketColumns.marketId, fields.marketId)
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        .patch(fields)
        .returning('*');
    if (perpetualMarkets.length === 0) {
        return undefined;
    }
    return perpetualMarkets[0];
}
exports.updateByMarketId = updateByMarketId;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findByClobPairId(clobPairId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    const perpetualMarkets = await baseQuery
        .where(types_1.PerpetualMarketColumns.clobPairId, clobPairId)
        .returning('*');
    if (perpetualMarkets.length === 0) {
        return undefined;
    }
    return perpetualMarkets[0];
}
exports.findByClobPairId = findByClobPairId;
async function findByMarketId(marketId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    const perpetualMarkets = await baseQuery
        .where(types_1.PerpetualMarketColumns.marketId, marketId)
        .returning('*');
    if (perpetualMarkets.length === 0) {
        return undefined;
    }
    return perpetualMarkets[0];
}
exports.findByMarketId = findByMarketId;
async function findByTicker(ticker, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(perpetual_market_model_1.default, options);
    const perpetualMarkets = await baseQuery
        .where(types_1.PerpetualMarketColumns.ticker, ticker)
        .returning('*');
    if (perpetualMarkets.length === 0) {
        return undefined;
    }
    if (perpetualMarkets.length > 1) {
        base_1.logger.error({
            at: 'perpetualMarketTable#findByTicker',
            message: 'More than one market with ticker',
            ticker,
        });
    }
    return perpetualMarkets[0];
}
exports.findByTicker = findByTicker;
async function updateMarketCheckerFields(markets, transaction) {
    if (markets.length === 0) {
        return;
    }
    markets.forEach((market) => (0, stores_helpers_1.verifyAllInjectableVariables)(Object.values(market)));
    const columns = lodash_1.default.keys(markets[0]);
    const marketRows = (0, stores_helpers_1.setBulkRowsForUpdate)({
        objectArray: markets,
        columns,
        stringColumns: [
            types_1.PerpetualMarketColumns.status,
            types_1.PerpetualMarketColumns.ticker,
        ],
        numericColumns: [
            types_1.PerpetualMarketColumns.id,
            types_1.PerpetualMarketColumns.volume24H,
            types_1.PerpetualMarketColumns.trades24H,
            types_1.PerpetualMarketColumns.priceChange24H,
            types_1.PerpetualMarketColumns.openInterest,
            types_1.PerpetualMarketColumns.nextFundingRate,
        ],
    });
    const query = (0, stores_helpers_1.generateBulkUpdateString)({
        table: 'perpetual_markets',
        objectRows: marketRows,
        columns,
        isUuid: false,
        uniqueIdentifier: types_1.PerpetualMarketColumns.id,
    });
    if (transaction) {
        await knex_1.knexPrimary.raw(query).transacting(transaction);
    }
    else {
        await knex_1.knexPrimary.raw(query);
    }
}
exports.updateMarketCheckerFields = updateMarketCheckerFields;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVycGV0dWFsLW1hcmtldC10YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvcGVycGV0dWFsLW1hcmtldC10YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxREFBb0Q7QUFFcEQsb0RBQXVCO0FBR3ZCLDRDQUF3RDtBQUN4RCwwQ0FBOEM7QUFDOUMsOERBTW1DO0FBQ25DLHlFQUFpRDtBQUNqRCw4RkFBb0U7QUFDcEUsb0NBVWtCO0FBRVgsS0FBSyxVQUFVLE9BQU8sQ0FDM0IsRUFDRSxFQUFFLEVBQ0YsUUFBUSxFQUNSLGVBQWUsRUFDZixLQUFLLEdBQ3NCLEVBQzdCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEVBQUU7UUFDRixRQUFRO1FBQ1IsZUFBZTtRQUNmLEtBQUs7S0FDUyxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUF1QyxJQUFBLCtCQUFjLEVBQ2hFLGdDQUFvQixFQUNwQixPQUFPLENBQ1IsQ0FBQztJQUVGLElBQUksRUFBRSxLQUFLLFNBQVMsRUFBRTtRQUNwQixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyw4QkFBc0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDMUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsOEJBQXNCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzFFO0lBRUQsSUFBSSxlQUFlLEtBQUssU0FBUyxFQUFFO1FBQ2pDLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLDhCQUFzQixDQUFDLGVBQWUsRUFBRSxlQUFlLENBQUMsQ0FBQztLQUN4RjtJQUVELElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDakMsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDN0MsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLE1BQU0sRUFDTixLQUFLLENBQ04sQ0FBQztTQUNIO0tBQ0Y7U0FBTTtRQUNMLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQiw4QkFBc0IsQ0FBQyxFQUFFLEVBQ3pCLGdCQUFRLENBQUMsR0FBRyxDQUNiLENBQUM7S0FDSDtJQUVELElBQUksS0FBSyxFQUFFO1FBQ1QsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDcEM7SUFFRCxPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEMsQ0FBQztBQXhERCwwQkF3REM7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQix1QkFBb0QsRUFDcEQsVUFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0lBRXRDLE9BQU8sZ0NBQW9CLENBQUMsS0FBSyxDQUMvQixxQkFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQzlCLENBQUMsTUFBTSxDQUFDO1FBQ1AsR0FBRyx1QkFBdUI7S0FDM0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBVEQsd0JBU0M7QUFFTSxLQUFLLFVBQVUsTUFBTSxDQUMxQixFQUNFLEdBQUcsTUFBTSxFQUNtQixFQUM5QixVQUFtQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7SUFFdEMsTUFBTSxlQUFlLEdBQUcsTUFBTSxnQ0FBb0IsQ0FBQyxLQUFLLENBQ3RELHFCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FHOUIsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0QsdUZBQXVGO0lBQ3ZGLE9BQU8sZUFBdUUsQ0FBQztBQUNqRixDQUFDO0FBYkQsd0JBYUM7QUFFTSxLQUFLLFVBQVUsZ0JBQWdCLENBQ3BDLEVBQ0UsR0FBRyxNQUFNLEVBQ21CLEVBQzlCLFVBQW1CLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtJQUV0QyxNQUFNLFNBQVMsR0FBdUMsSUFBQSwrQkFBYyxFQUNsRSxnQ0FBb0IsRUFDcEIsT0FBTyxDQUNSLENBQUM7SUFFRixNQUFNLGdCQUFnQixHQUFrQyxNQUFNLFNBQVM7U0FDcEUsS0FBSyxDQUFDLDhCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUyxDQUFDO1FBQ3pELDhEQUE4RDtTQUM3RCxLQUFLLENBQUMsTUFBYSxDQUFDO1NBQ3BCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVsQixJQUFJLGdCQUFnQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDakMsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxPQUFPLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCLENBQUM7QUFyQkQsNENBcUJDO0FBRU0sS0FBSyxVQUFVLFFBQVEsQ0FDNUIsRUFBVSxFQUNWLFVBQW1CLG9DQUF3QjtJQUUzQyxNQUFNLFNBQVMsR0FBdUMsSUFBQSwrQkFBYyxFQUNsRSxnQ0FBb0IsRUFDcEIsT0FBTyxDQUNSLENBQUM7SUFDRixPQUFPLFNBQVM7U0FDYixRQUFRLENBQUMsRUFBRSxDQUFDO1NBQ1osU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFYRCw0QkFXQztBQUVNLEtBQUssVUFBVSxnQkFBZ0IsQ0FDcEMsVUFBa0IsRUFDbEIsVUFBbUIsb0NBQXdCO0lBRTNDLE1BQU0sU0FBUyxHQUF1QyxJQUFBLCtCQUFjLEVBQ2xFLGdDQUFvQixFQUNwQixPQUFPLENBQ1IsQ0FBQztJQUVGLE1BQU0sZ0JBQWdCLEdBQWtDLE1BQU0sU0FBUztTQUNwRSxLQUFLLENBQUMsOEJBQXNCLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztTQUNwRCxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBQ0QsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBakJELDRDQWlCQztBQUVNLEtBQUssVUFBVSxjQUFjLENBQ2xDLFFBQWdCLEVBQ2hCLFVBQW1CLG9DQUF3QjtJQUUzQyxNQUFNLFNBQVMsR0FBdUMsSUFBQSwrQkFBYyxFQUNsRSxnQ0FBb0IsRUFDcEIsT0FBTyxDQUNSLENBQUM7SUFFRixNQUFNLGdCQUFnQixHQUFrQyxNQUFNLFNBQVM7U0FDcEUsS0FBSyxDQUFDLDhCQUFzQixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7U0FDaEQsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWxCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUNqQyxPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUNELE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsQ0FBQztBQWpCRCx3Q0FpQkM7QUFFTSxLQUFLLFVBQVUsWUFBWSxDQUNoQyxNQUFjLEVBQ2QsVUFBbUIsb0NBQXdCO0lBRTNDLE1BQU0sU0FBUyxHQUF1QyxJQUFBLCtCQUFjLEVBQ2xFLGdDQUFvQixFQUNwQixPQUFPLENBQ1IsQ0FBQztJQUVGLE1BQU0sZ0JBQWdCLEdBQWtDLE1BQU0sU0FBUztTQUNwRSxLQUFLLENBQUMsOEJBQXNCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztTQUM1QyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2pDLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLGFBQU0sQ0FBQyxLQUFLLENBQUM7WUFDWCxFQUFFLEVBQUUsbUNBQW1DO1lBQ3ZDLE9BQU8sRUFBRSxrQ0FBa0M7WUFDM0MsTUFBTTtTQUNQLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QixDQUFDO0FBMUJELG9DQTBCQztBQUVNLEtBQUssVUFBVSx5QkFBeUIsQ0FDN0MsT0FPRyxFQUNILFdBQThCO0lBRTlCLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDeEIsT0FBTztLQUNSO0lBRUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsSUFBQSw2Q0FBNEIsRUFBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVqRixNQUFNLE9BQU8sR0FBRyxnQkFBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQTZCLENBQUM7SUFDL0QsTUFBTSxVQUFVLEdBQWEsSUFBQSxxQ0FBb0IsRUFBeUI7UUFDeEUsV0FBVyxFQUFFLE9BQU87UUFDcEIsT0FBTztRQUNQLGFBQWEsRUFBRTtZQUNiLDhCQUFzQixDQUFDLE1BQU07WUFDN0IsOEJBQXNCLENBQUMsTUFBTTtTQUM5QjtRQUNELGNBQWMsRUFBRTtZQUNkLDhCQUFzQixDQUFDLEVBQUU7WUFDekIsOEJBQXNCLENBQUMsU0FBUztZQUNoQyw4QkFBc0IsQ0FBQyxTQUFTO1lBQ2hDLDhCQUFzQixDQUFDLGNBQWM7WUFDckMsOEJBQXNCLENBQUMsWUFBWTtZQUNuQyw4QkFBc0IsQ0FBQyxlQUFlO1NBQ3ZDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxLQUFLLEdBQVcsSUFBQSx5Q0FBd0IsRUFBQztRQUM3QyxLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLE9BQU87UUFDUCxNQUFNLEVBQUUsS0FBSztRQUNiLGdCQUFnQixFQUFFLDhCQUFzQixDQUFDLEVBQUU7S0FDNUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxXQUFXLEVBQUU7UUFDZixNQUFNLGtCQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUN2RDtTQUFNO1FBQ0wsTUFBTSxrQkFBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM5QjtBQUNILENBQUM7QUFoREQsOERBZ0RDIn0=