"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToIndexerOrder = exports.convertToIndexerOrderWithSubaccount = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const v4_protos_1 = require("@dydxprotocol-indexer/v4-protos");
const long_1 = __importDefault(require("long"));
const OrderTable = __importStar(require("../stores/order-table"));
const SubaccountTable = __importStar(require("../stores/subaccount-table"));
const types_1 = require("../types");
const helpers_1 = require("./helpers");
const protocol_translations_1 = require("./protocol-translations");
/**
 * Converts an order from the database to an IndexerOrder proto.
 * This is used to resend open stateful orders to Vulcan during Indexer fast sync
 * to uncross the orderbook.
 *
 * @param order
 */
function convertToIndexerOrderWithSubaccount(order, perpetualMarket, subaccount) {
    if (!OrderTable.isLongTermOrConditionalOrder(order.orderFlags)) {
        base_1.logger.error({
            at: 'protocol-translations#convertToIndexerOrder',
            message: 'Order is not a long-term or conditional order',
            order,
        });
        throw new Error(`Order with flags ${order.orderFlags} is not a long-term or conditional order`);
    }
    if (!subaccount === undefined) {
        base_1.logger.error({
            at: 'protocol-translations#convertToIndexerOrder',
            message: 'Subaccount for order not found',
            order,
        });
        throw new Error(`Subaccount for order not found: ${order.subaccountId}`);
    }
    const triggerSubticks = (order.triggerPrice === undefined || order.triggerPrice === null)
        ? long_1.default.fromValue(0, true)
        : long_1.default.fromString((0, protocol_translations_1.priceToSubticks)(order.triggerPrice, perpetualMarket), true);
    const indexerOrder = {
        orderId: {
            subaccountId: {
                owner: subaccount?.address,
                number: subaccount?.subaccountNumber,
            },
            clientId: Number(order.clientId),
            clobPairId: Number(order.clobPairId),
            orderFlags: Number(order.orderFlags),
        },
        side: order.side === types_1.OrderSide.BUY ? v4_protos_1.IndexerOrder_Side.SIDE_BUY : v4_protos_1.IndexerOrder_Side.SIDE_SELL,
        quantums: long_1.default.fromString((0, protocol_translations_1.humanToQuantums)(order.size, perpetualMarket.atomicResolution).toFixed(), true),
        subticks: long_1.default.fromString((0, protocol_translations_1.priceToSubticks)(order.price, perpetualMarket), true),
        goodTilBlockTime: (0, helpers_1.blockTimeFromIsoString)(order.goodTilBlockTime),
        timeInForce: (0, protocol_translations_1.tifToProtocolOrderTIF)(order.timeInForce),
        reduceOnly: order.reduceOnly,
        clientMetadata: Number(order.clientMetadata),
        conditionType: (0, protocol_translations_1.orderTypeToProtocolConditionType)(order.type),
        conditionalOrderTriggerSubticks: triggerSubticks,
    };
    return indexerOrder;
}
exports.convertToIndexerOrderWithSubaccount = convertToIndexerOrderWithSubaccount;
/**
 * Converts an order from the database to an IndexerOrder proto.
 * This is used to resend open stateful orders to Vulcan during Indexer fast sync
 * to uncross the orderbook.
 *
 * @param order
 */
async function convertToIndexerOrder(order, perpetualMarket) {
    const subaccount = await SubaccountTable.findById(order.subaccountId);
    if (!subaccount === undefined) {
        base_1.logger.error({
            at: 'protocol-translations#convertToIndexerOrder',
            message: 'Subaccount for order not found',
            order,
        });
        throw new Error(`Subaccount for order not found: ${order.subaccountId}`);
    }
    return convertToIndexerOrderWithSubaccount(order, perpetualMarket, subaccount);
}
exports.convertToIndexerOrder = convertToIndexerOrder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItdHJhbnNsYXRpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9vcmRlci10cmFuc2xhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxREFBb0Q7QUFDcEQsK0RBQWtGO0FBQ2xGLGdEQUF3QjtBQUV4QixrRUFBb0Q7QUFDcEQsNEVBQThEO0FBQzlELG9DQUVrQjtBQUNsQix1Q0FBbUQ7QUFDbkQsbUVBS2lDO0FBRWpDOzs7Ozs7R0FNRztBQUNILFNBQWdCLG1DQUFtQyxDQUNqRCxLQUF3QixFQUN4QixlQUE0QyxFQUM1QyxVQUFrQztJQUVsQyxJQUFJLENBQUMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUM5RCxhQUFNLENBQUMsS0FBSyxDQUFDO1lBQ1gsRUFBRSxFQUFFLDZDQUE2QztZQUNqRCxPQUFPLEVBQUUsK0NBQStDO1lBQ3hELEtBQUs7U0FDTixDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixLQUFLLENBQUMsVUFBVSwwQ0FBMEMsQ0FBQyxDQUFDO0tBQ2pHO0lBQ0QsSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDN0IsYUFBTSxDQUFDLEtBQUssQ0FBQztZQUNYLEVBQUUsRUFBRSw2Q0FBNkM7WUFDakQsT0FBTyxFQUFFLGdDQUFnQztZQUN6QyxLQUFLO1NBQ04sQ0FBQyxDQUFDO1FBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7S0FDMUU7SUFDRCxNQUFNLGVBQWUsR0FBUyxDQUFDLEtBQUssQ0FBQyxZQUFZLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDO1FBQzdGLENBQUMsQ0FBQyxjQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7UUFDekIsQ0FBQyxDQUFDLGNBQUksQ0FBQyxVQUFVLENBQUMsSUFBQSx1Q0FBZSxFQUFDLEtBQUssQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDaEYsTUFBTSxZQUFZLEdBQWlCO1FBQ2pDLE9BQU8sRUFBRTtZQUNQLFlBQVksRUFBRTtnQkFDWixLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQVE7Z0JBQzNCLE1BQU0sRUFBRSxVQUFVLEVBQUUsZ0JBQWlCO2FBQ3RDO1lBQ0QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ2hDLFVBQVUsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztZQUNwQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7U0FDckM7UUFDRCxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksS0FBSyxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyw2QkFBaUIsQ0FBQyxTQUFTO1FBQzdGLFFBQVEsRUFBRSxjQUFJLENBQUMsVUFBVSxDQUFDLElBQUEsdUNBQWUsRUFDdkMsS0FBSyxDQUFDLElBQUksRUFDVixlQUFlLENBQUMsZ0JBQWdCLENBQ2pDLENBQUMsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDO1FBQ2xCLFFBQVEsRUFBRSxjQUFJLENBQUMsVUFBVSxDQUFDLElBQUEsdUNBQWUsRUFDdkMsS0FBSyxDQUFDLEtBQUssRUFDWCxlQUFlLENBQ2hCLEVBQUUsSUFBSSxDQUFDO1FBQ1IsZ0JBQWdCLEVBQUUsSUFBQSxnQ0FBc0IsRUFBQyxLQUFLLENBQUMsZ0JBQWlCLENBQUM7UUFDakUsV0FBVyxFQUFFLElBQUEsNkNBQXFCLEVBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNyRCxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7UUFDNUIsY0FBYyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO1FBQzVDLGFBQWEsRUFBRSxJQUFBLHdEQUFnQyxFQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDM0QsK0JBQStCLEVBQUUsZUFBZTtLQUNqRCxDQUFDO0lBRUYsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQztBQXBERCxrRkFvREM7QUFFRDs7Ozs7O0dBTUc7QUFDSSxLQUFLLFVBQVUscUJBQXFCLENBQ3pDLEtBQXdCLEVBQ3hCLGVBQTRDO0lBRTVDLE1BQU0sVUFBVSxHQUF1QyxNQUFNLGVBQWUsQ0FBQyxRQUFRLENBQ25GLEtBQUssQ0FBQyxZQUFZLENBQ25CLENBQUM7SUFFRixJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtRQUM3QixhQUFNLENBQUMsS0FBSyxDQUFDO1lBQ1gsRUFBRSxFQUFFLDZDQUE2QztZQUNqRCxPQUFPLEVBQUUsZ0NBQWdDO1lBQ3pDLEtBQUs7U0FDTixDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztLQUMxRTtJQUNELE9BQU8sbUNBQW1DLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxVQUFXLENBQUMsQ0FBQztBQUNsRixDQUFDO0FBakJELHNEQWlCQyJ9