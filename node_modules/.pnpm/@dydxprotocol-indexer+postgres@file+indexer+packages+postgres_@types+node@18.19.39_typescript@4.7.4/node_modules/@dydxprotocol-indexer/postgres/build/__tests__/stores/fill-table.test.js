"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const big_js_1 = require("big.js");
const types_1 = require("../../src/types");
const BlockTable = __importStar(require("../../src/stores/block-table"));
const FillTable = __importStar(require("../../src/stores/fill-table"));
const OraclePriceTable = __importStar(require("../../src/stores/oracle-price-table"));
const OrderTable = __importStar(require("../../src/stores/order-table"));
const FundingIndexUpdatesTable = __importStar(require("../../src/stores/funding-index-updates-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const helpers_1 = require("./helpers");
describe('Fill store', () => {
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
        await OrderTable.create(constants_1.defaultOrder);
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a Fill', async () => {
        await FillTable.create(constants_1.defaultFill);
    });
    it('Successfully finds all Fills, default ordered by createdAtHeight descending', async () => {
        await Promise.all([
            FillTable.create({
                ...constants_1.defaultFill,
                createdAtHeight: '1',
                eventId: constants_1.defaultTendermintEventId2,
            }),
            FillTable.create(constants_1.defaultFill),
        ]);
        const fills = await FillTable.findAll({}, [], {});
        expect(fills.length).toEqual(2);
        expect(fills[0]).toEqual(expect.objectContaining(constants_1.defaultFill));
        expect(fills[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultFill,
            createdAtHeight: '1',
            eventId: constants_1.defaultTendermintEventId2,
        }));
    });
    it('Successfully finds all Fills with given ordering', async () => {
        await Promise.all([
            FillTable.create(constants_1.defaultFill),
            FillTable.create({
                ...constants_1.defaultFill,
                eventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const fills = await FillTable.findAll({}, [], {
            orderBy: [[types_1.FillColumns.eventId, types_1.Ordering.DESC]],
        });
        expect(fills.length).toEqual(2);
        expect(fills[0]).toEqual(expect.objectContaining({
            ...constants_1.defaultFill,
            eventId: constants_1.defaultTendermintEventId2,
        }));
        expect(fills[1]).toEqual(expect.objectContaining(constants_1.defaultFill));
    });
    it('Successfully finds Fill with eventId', async () => {
        await Promise.all([
            FillTable.create(constants_1.defaultFill),
            FillTable.create({
                ...constants_1.defaultFill,
                eventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const fills = await FillTable.findAll({
            eventId: constants_1.defaultFill.eventId,
        }, [], { readReplica: true });
        expect(fills.length).toEqual(1);
        expect(fills[0]).toEqual(expect.objectContaining(constants_1.defaultFill));
    });
    it.each([
        [1, 1, constants_1.defaultFill],
        [-1, 0, undefined],
    ])('Successfuly finds Fill with createdBeforeOrAt, delta %d seconds', async (deltaSeconds, expectedLength, expectedFill) => {
        await FillTable.create(constants_1.defaultFill);
        const fills = await FillTable.findAll({
            createdBeforeOrAt: constants_1.createdDateTime.plus({ seconds: deltaSeconds }).toISO(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(fills, expectedLength, expectedFill);
    });
    it.each([
        [1, 1, constants_1.defaultFill],
        [-1, 0, undefined],
    ])('Successfuly finds Fill with createdBeforeOrAtHeight, delta %d blocks', async (deltaBlocks, expectedLength, expectedFill) => {
        await FillTable.create(constants_1.defaultFill);
        const fills = await FillTable.findAll({
            createdBeforeOrAtHeight: (0, big_js_1.Big)(constants_1.createdHeight).plus(deltaBlocks).toFixed(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(fills, expectedLength, expectedFill);
    });
    it.each([
        [1, 1, constants_1.defaultFill],
        [0, 1, constants_1.defaultFill],
        [-1, 0, undefined],
    ])('Successfuly finds Fill with createdOnOrAfter, delta %d seconds', async (deltaSeconds, expectedLength, expectedFill) => {
        await FillTable.create(constants_1.defaultFill);
        const fills = await FillTable.findAll({
            createdOnOrAfter: constants_1.createdDateTime.minus({ seconds: deltaSeconds }).toISO(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(fills, expectedLength, expectedFill);
    });
    it.each([
        [1, 1, constants_1.defaultFill],
        [0, 1, constants_1.defaultFill],
        [-1, 0, undefined],
    ])('Successfuly finds Fill with createdOnOrAfterHeight, delta %d blocks', async (deltaBlocks, expectedLength, expectedFill) => {
        await FillTable.create(constants_1.defaultFill);
        const fills = await FillTable.findAll({
            createdOnOrAfterHeight: (0, big_js_1.Big)(constants_1.createdHeight).minus(deltaBlocks).toFixed(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(fills, expectedLength, expectedFill);
    });
    it('Successfully finds a Fill', async () => {
        await FillTable.create(constants_1.defaultFill);
        const fill = await FillTable.findById(FillTable.uuid(constants_1.defaultFill.eventId, constants_1.defaultFill.liquidity));
        expect(fill).toEqual(expect.objectContaining(constants_1.defaultFill));
    });
    // TODO: Add a bunch of tests for different search parameters
    it('Successfully updates an Fill', async () => {
        await FillTable.create(constants_1.defaultFill);
        const fill = await FillTable.update({
            id: FillTable.uuid(constants_1.defaultFill.eventId, constants_1.defaultFill.liquidity),
            size: '32.50',
        });
        expect(fill).toEqual(expect.objectContaining({
            ...constants_1.defaultFill,
            size: '32.50',
        }));
    });
    describe('get24HourInformation', () => {
        it('Successfully gets 24 hour information with trades', async () => {
            await Promise.all([
                FillTable.create(constants_1.defaultFill),
                FillTable.create({
                    ...constants_1.defaultFill,
                    liquidity: types_1.Liquidity.MAKER,
                }),
            ]);
            // defaultFill.createdAt is the current time the object is created,
            // so which should be in the last 24 before this function is called
            const marketTradeVolumes = await FillTable.get24HourInformation([constants_1.defaultPerpetualMarket.clobPairId]);
            expect(marketTradeVolumes).toEqual({
                [constants_1.defaultPerpetualMarket.clobPairId]: {
                    clobPairId: constants_1.defaultPerpetualMarket.clobPairId,
                    trades24H: '1',
                    volume24H: constants_1.defaultFill.quoteAmount,
                },
            });
        });
        it('Successfully gets 24 hour information with no trades', async () => {
            const marketTradeVolumes = await FillTable.get24HourInformation([constants_1.defaultPerpetualMarket.clobPairId]);
            expect(marketTradeVolumes).toEqual({
                [constants_1.defaultPerpetualMarket.clobPairId]: {
                    clobPairId: constants_1.defaultPerpetualMarket.clobPairId,
                    trades24H: '0',
                    volume24H: '0',
                },
            });
        });
    });
    describe('getPnlOfFills/getTotalValueOfOpenPositions', () => {
        beforeEach(async () => {
            await Promise.all([
                OraclePriceTable.create(constants_1.defaultOraclePrice),
                OraclePriceTable.create(constants_1.defaultOraclePrice2),
            ]);
        });
        it('Successfully getPnlOfFills/getTotalValueOfOpenPositions', async () => {
            await Promise.all([
                FillTable.create(constants_1.defaultFill),
                FillTable.create({
                    ...constants_1.defaultFill,
                    liquidity: types_1.Liquidity.MAKER,
                }),
                FillTable.create({
                    ...constants_1.defaultFill,
                    eventId: constants_1.defaultTendermintEventId2,
                    liquidity: types_1.Liquidity.TAKER,
                    side: types_1.OrderSide.SELL,
                    size: '2',
                }),
            ]);
            const pnlOfFills = await FillTable.getCostOfFills(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(pnlOfFills).toEqual((0, big_js_1.Big)(-360000)); // -20000*10 - 20000*10 + 2*20000 = -360000
            const totalValueOfOpenPositions = await FillTable.getTotalValueOfOpenPositions(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(totalValueOfOpenPositions.eq((0, big_js_1.Big)(180000))).toBe(true); // 18 * 10000 = 180_000
        });
        it('getPnlOfFills/getTotalValueOfOpenPositions( respects height and subaccount id', async () => {
            await BlockTable.create({
                ...constants_1.defaultBlock,
                blockHeight: '5',
            });
            await Promise.all([
                FillTable.create(constants_1.defaultFill),
                FillTable.create({
                    ...constants_1.defaultFill,
                    subaccountId: constants_1.defaultSubaccountId2,
                    eventId: constants_1.defaultTendermintEventId2,
                }),
                FillTable.create({
                    ...constants_1.defaultFill,
                    liquidity: types_1.Liquidity.MAKER,
                }),
                FillTable.create({
                    ...constants_1.defaultFill,
                    eventId: constants_1.defaultTendermintEventId2,
                    liquidity: types_1.Liquidity.MAKER,
                    side: types_1.OrderSide.SELL,
                    size: '2',
                    createdAtHeight: '5',
                }),
            ]);
            const pnlOfFills = await FillTable.getCostOfFills(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(pnlOfFills).toEqual((0, big_js_1.Big)(-400000)); // -20000*10 - 20000*10 = -400000
            const totalValueOfOpenPositions = await FillTable.getTotalValueOfOpenPositions(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(totalValueOfOpenPositions).toEqual((0, big_js_1.Big)(200000)); // 20 * 10000 = 200000
        });
        it('returns 0 for missing data', async () => {
            let result = await FillTable.getCostOfFills(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(result).toEqual((0, big_js_1.Big)(0));
            result = await FillTable.getTotalValueOfOpenPositions(constants_1.defaultFill.subaccountId, constants_1.defaultFill.createdAtHeight);
            expect(result).toEqual((0, big_js_1.Big)(0));
        });
    });
    it('Successfully getClobPairs', async () => {
        await Promise.all([
            FillTable.create({
                ...constants_1.defaultFill,
                createdAtHeight: '1',
            }),
            FillTable.create({
                ...constants_1.defaultFill,
                liquidity: types_1.Liquidity.MAKER,
                size: '2',
                clobPairId: '2',
            }),
        ]);
        let clobPairs = await FillTable.getClobPairs(constants_1.defaultFill.subaccountId, '1');
        expect(clobPairs).toEqual([constants_1.defaultPerpetualMarket.clobPairId]);
        clobPairs = await FillTable.getClobPairs(constants_1.defaultFill.subaccountId, '2');
        expect(clobPairs).toEqual([constants_1.defaultPerpetualMarket.clobPairId, '2']);
    });
    it('Successfully getFeesPaid', async () => {
        await Promise.all([
            FillTable.create({
                ...constants_1.defaultFill,
                createdAtHeight: '1',
            }),
            FillTable.create({
                ...constants_1.defaultFill,
                eventId: constants_1.defaultTendermintEventId2,
                createdAtHeight: '1',
                fee: '-0.5',
            }),
            FillTable.create({
                ...constants_1.defaultFill,
                liquidity: types_1.Liquidity.MAKER,
                size: '2',
                clobPairId: '2',
            }),
        ]);
        let feesPaid = await FillTable.getFeesPaid(constants_1.defaultFill.subaccountId, '1');
        expect(feesPaid).toEqual((0, big_js_1.Big)(0.6));
        feesPaid = await FillTable.getFeesPaid(constants_1.defaultFill.subaccountId, '2');
        expect(feesPaid).toEqual((0, big_js_1.Big)(1.7));
    });
    describe('getOrderedFillsWithFundingIndices', () => {
        beforeEach(async () => {
            await Promise.all([
                OraclePriceTable.create(constants_1.defaultOraclePrice),
                OraclePriceTable.create(constants_1.defaultOraclePrice2),
            ]);
            const blockHeights = ['3', '4', '5', '6', '7'];
            await Promise.all(blockHeights.map((height) => BlockTable.create({
                ...constants_1.defaultBlock,
                blockHeight: height,
            })));
            await Promise.all([
                FundingIndexUpdatesTable.create(constants_1.defaultFundingIndexUpdate),
                FundingIndexUpdatesTable.create({
                    ...constants_1.defaultFundingIndexUpdate,
                    effectiveAtHeight: '3',
                    fundingIndex: '10100',
                }),
                FundingIndexUpdatesTable.create({
                    ...constants_1.defaultFundingIndexUpdate,
                    effectiveAtHeight: '4',
                    fundingIndex: '10150',
                }),
                FundingIndexUpdatesTable.create({
                    ...constants_1.defaultFundingIndexUpdate,
                    effectiveAtHeight: '5',
                    fundingIndex: '10200',
                }),
            ]);
        });
        it('getOrderedFillsWithFundingIndices/getOpenSizeWithFundingIndex returns empty list for no fills', async () => {
            const orderedFillsWithFundingIndices = await FillTable.getOrderedFillsWithFundingIndices(constants_1.defaultFill.clobPairId, constants_1.defaultFill.subaccountId, '7');
            expect(orderedFillsWithFundingIndices.length).toEqual(0);
            const unrealizedFunding = await FillTable.getOpenSizeWithFundingIndex(constants_1.defaultFill.subaccountId, '7');
            expect(unrealizedFunding.length).toEqual(0);
        });
        it('Successfully getOrderedFillsWithFundingIndices/getOpenSizeWithFundingIndex', async () => {
            await Promise.all([
                FillTable.create(constants_1.defaultFill),
                FillTable.create({
                    ...constants_1.defaultFill,
                    createdAtHeight: '3',
                    liquidity: types_1.Liquidity.MAKER,
                    size: '3',
                }),
                FillTable.create({
                    ...constants_1.defaultFill,
                    eventId: constants_1.defaultTendermintEventId2,
                    liquidity: types_1.Liquidity.TAKER,
                    side: types_1.OrderSide.SELL,
                    size: '4',
                    createdAtHeight: '4',
                }),
                FillTable.create({
                    ...constants_1.defaultFill,
                    eventId: constants_1.defaultTendermintEventId2,
                    liquidity: types_1.Liquidity.MAKER,
                    side: types_1.OrderSide.SELL,
                    size: '5',
                    createdAtHeight: '5',
                }),
            ]);
            const unrealizedFunding = await FillTable.getOpenSizeWithFundingIndex(constants_1.defaultFill.subaccountId, '7');
            expect(unrealizedFunding).toEqual(expect.objectContaining([{
                    clobPairId: '1',
                    fundingIndex: '10200',
                    fundingIndexHeight: '5',
                    lastFillHeight: '5',
                    openSize: '4', // 10+3-4-5 = 4
                }]));
            const orderedFillsWithFundingIndices = await FillTable.getOrderedFillsWithFundingIndices(constants_1.defaultFill.clobPairId, constants_1.defaultFill.subaccountId, '7');
            expect(orderedFillsWithFundingIndices).toEqual(expect.objectContaining([{
                    createdAtHeight: '3',
                    fundingIndex: '10100',
                    id: '898ec79f-8bbe-5bbc-8b3e-bed2a011df71',
                    lastFillCreatedAtHeight: '2',
                    lastFillFundingIndex: '10050',
                    lastFillId: '1d43057d-f67e-534b-bd86-95c16f277d39',
                    lastFillSide: 'BUY',
                    lastFillSize: '10',
                    side: 'BUY',
                    size: '3',
                    subaccountId: 'df91255d-5e17-5e2e-824a-87ddf3c5214a',
                },
                {
                    createdAtHeight: '4',
                    fundingIndex: '10150',
                    id: '12b2281e-d57f-5c3d-a52b-0144eb304230',
                    lastFillCreatedAtHeight: '3',
                    lastFillFundingIndex: '10100',
                    lastFillId: '898ec79f-8bbe-5bbc-8b3e-bed2a011df71',
                    lastFillSide: 'BUY',
                    lastFillSize: '3',
                    side: 'SELL',
                    size: '4',
                    subaccountId: 'df91255d-5e17-5e2e-824a-87ddf3c5214a',
                },
                {
                    createdAtHeight: '5',
                    fundingIndex: '10200',
                    id: 'e87bb90f-3595-5f34-9f34-1fae94cec1f0',
                    lastFillCreatedAtHeight: '4',
                    lastFillFundingIndex: '10150',
                    lastFillId: '12b2281e-d57f-5c3d-a52b-0144eb304230',
                    lastFillSide: 'SELL',
                    lastFillSize: '4',
                    side: 'SELL',
                    size: '5',
                    subaccountId: 'df91255d-5e17-5e2e-824a-87ddf3c5214a',
                },
            ]));
            const paidFunding = FillTable.getSettledFunding(orderedFillsWithFundingIndices);
            // 10 * (10100-10050) + 13 * (10150-10100) + 9 * (10200-10150) = 1600
            expect(paidFunding.eq(new big_js_1.Big(1600))).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,