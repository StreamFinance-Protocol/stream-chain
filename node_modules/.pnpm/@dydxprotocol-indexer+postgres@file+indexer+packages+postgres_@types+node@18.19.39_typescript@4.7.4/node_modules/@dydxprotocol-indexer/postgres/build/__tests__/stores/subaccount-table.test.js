"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SubaccountTable = __importStar(require("../../src/stores/subaccount-table"));
const TransferTable = __importStar(require("../../src/stores/transfer-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const constants_1 = require("../helpers/constants");
const AssetTable = __importStar(require("../../src/stores/asset-table"));
const BlockTable = __importStar(require("../../src/stores/block-table"));
const TendermintEventTable = __importStar(require("../../src/stores/tendermint-event-table"));
const transaction_1 = __importDefault(require("../../src/helpers/transaction"));
const lodash_1 = __importDefault(require("lodash"));
const luxon_1 = require("luxon");
describe('Subaccount store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a Subaccount', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount);
    });
    it('Successfully finds all Subaccounts', async () => {
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create({
                ...constants_1.defaultSubaccount,
                subaccountNumber: 1,
            }),
        ]);
        const subaccounts = await SubaccountTable.findAll({}, [], { readReplica: true });
        expect(subaccounts.length).toEqual(2);
        expect(subaccounts[0]).toEqual(expect.objectContaining(constants_1.defaultSubaccount));
        expect(subaccounts[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultSubaccount,
            subaccountNumber: 1,
        }));
    });
    it('Successfully finds Subaccount with address', async () => {
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create({
                ...constants_1.defaultSubaccount,
                address: 'fake_address',
            }),
        ]);
        const subaccounts = await SubaccountTable.findAll({
            address: constants_1.defaultSubaccount.address,
        }, [], { readReplica: true });
        expect(subaccounts.length).toEqual(1);
        expect(subaccounts[0]).toEqual(expect.objectContaining(constants_1.defaultSubaccount));
    });
    it('Successfully finds Subaccount with updatedBeforeOrAt', async () => {
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create({
                ...constants_1.defaultSubaccount,
                address: 'fake_address',
                updatedAt: luxon_1.DateTime.fromISO(constants_1.defaultSubaccount.updatedAt).plus(1).toISO(),
            }),
        ]);
        const subaccounts = await SubaccountTable.findAll({
            updatedBeforeOrAt: constants_1.defaultSubaccount.updatedAt,
        }, [], { readReplica: true });
        expect(subaccounts.length).toEqual(1);
        expect(subaccounts[0]).toEqual(expect.objectContaining(constants_1.defaultSubaccount));
    });
    it('Successfully finds Subaccount with updatedOnOrAfter', async () => {
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create({
                ...constants_1.defaultSubaccount,
                address: 'fake_address',
                updatedAt: luxon_1.DateTime.fromISO(constants_1.defaultSubaccount.updatedAt).minus(10).toISO(),
            }),
        ]);
        const subaccounts = await SubaccountTable.findAll({
            updatedOnOrAfter: constants_1.defaultSubaccount.updatedAt,
        }, [], { readReplica: true });
        expect(subaccounts.length).toEqual(1);
        expect(subaccounts[0]).toEqual(expect.objectContaining(constants_1.defaultSubaccount));
    });
    it('Successfully finds a Subaccount', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount);
        const subaccount = await SubaccountTable.findById(SubaccountTable.uuid(constants_1.defaultAddress, 0));
        expect(subaccount).toEqual(expect.objectContaining(constants_1.defaultSubaccount));
    });
    it('Successfully finds all subaccounts with transfers', async () => {
        const defaultSubaccount3 = {
            address: constants_1.defaultAddress,
            subaccountNumber: 3,
            updatedAt: constants_1.createdDateTime.toISO(),
            updatedAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create(constants_1.defaultSubaccount2),
            SubaccountTable.create(defaultSubaccount3),
            BlockTable.create(constants_1.defaultBlock),
            AssetTable.create(constants_1.defaultAsset),
        ]);
        await TendermintEventTable.create(constants_1.defaultTendermintEvent);
        await TransferTable.create(constants_1.defaultTransfer);
        const subaccounts = await SubaccountTable.getSubaccountsWithTransfers(constants_1.defaultTransfer.createdAtHeight);
        const subaccountIds = lodash_1.default.map(subaccounts, 'id');
        expect(subaccountIds).toEqual(expect.arrayContaining([constants_1.defaultSubaccountId, constants_1.defaultSubaccountId2]));
    });
    it('Successfully finds all subaccounts with transfers respects createdAtHeight', async () => {
        const defaultSubaccount3 = {
            address: constants_1.defaultAddress,
            subaccountNumber: 3,
            updatedAt: constants_1.createdDateTime.toISO(),
            updatedAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create(constants_1.defaultSubaccount2),
            SubaccountTable.create(defaultSubaccount3),
            BlockTable.create(constants_1.defaultBlock),
            AssetTable.create(constants_1.defaultAsset),
        ]);
        await TendermintEventTable.create(constants_1.defaultTendermintEvent);
        await TransferTable.create(constants_1.defaultTransfer);
        const subaccounts = await SubaccountTable.getSubaccountsWithTransfers('1');
        const subaccountIds = lodash_1.default.map(subaccounts, 'id');
        expect(subaccountIds.length).toEqual(0);
    });
    it('Successfully finds all subaccounts with transfers respects options', async () => {
        const defaultSubaccount3 = {
            address: constants_1.defaultAddress,
            subaccountNumber: 3,
            updatedAt: constants_1.createdDateTime.toISO(),
            updatedAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            SubaccountTable.create(constants_1.defaultSubaccount),
            SubaccountTable.create(constants_1.defaultSubaccount2),
            SubaccountTable.create(defaultSubaccount3),
            BlockTable.create(constants_1.defaultBlock),
            AssetTable.create(constants_1.defaultAsset),
        ]);
        await TendermintEventTable.create(constants_1.defaultTendermintEvent);
        await TransferTable.create(constants_1.defaultTransfer);
        const txId = await transaction_1.default.start();
        const subaccounts = await SubaccountTable.getSubaccountsWithTransfers(constants_1.defaultTransfer.createdAtHeight, { txId, readReplica: true });
        const subaccountIds = lodash_1.default.map(subaccounts, 'id');
        await transaction_1.default.rollback(txId);
        expect(subaccountIds).toEqual(expect.arrayContaining([constants_1.defaultSubaccountId, constants_1.defaultSubaccountId2]));
    });
    it('Unable finds a Subaccount', async () => {
        const subaccount = await SubaccountTable.findById(SubaccountTable.uuid(constants_1.defaultAddress, 0));
        expect(subaccount).toEqual(undefined);
    });
    it('Successfully creates a Subaccount with updatedAtHeight', async () => {
        await BlockTable.create(constants_1.defaultBlock);
        await SubaccountTable.create({
            ...constants_1.defaultSubaccount,
            updatedAtHeight: constants_1.defaultBlock.blockHeight,
            updatedAt: constants_1.defaultBlock.time,
        });
        const subaccount = await SubaccountTable.findById(SubaccountTable.uuid(constants_1.defaultAddress, 0));
        expect(subaccount).toEqual(expect.objectContaining({
            ...constants_1.defaultSubaccount,
            updatedAtHeight: constants_1.defaultBlock.blockHeight,
            updatedAt: constants_1.defaultBlock.time,
        }));
    });
    it('Successfully updates a Subaccount with updatedAtHeight', async () => {
        await Promise.all([
            BlockTable.create(constants_1.defaultBlock),
            BlockTable.create(constants_1.defaultBlock2),
        ]);
        await SubaccountTable.create({
            ...constants_1.defaultSubaccount,
            updatedAtHeight: constants_1.defaultBlock.blockHeight,
            updatedAt: constants_1.defaultBlock.time,
        });
        const subaccounts = await SubaccountTable.findAll({}, [], { readReplica: true });
        expect(subaccounts.length).toEqual(1);
        await SubaccountTable.update({
            id: constants_1.defaultSubaccountId,
            updatedAtHeight: constants_1.defaultBlock2.blockHeight,
            updatedAt: constants_1.defaultBlock2.time,
        });
        const subaccount = await SubaccountTable.findById(SubaccountTable.uuid(constants_1.defaultAddress, 0));
        expect(subaccount).toEqual(expect.objectContaining({
            ...constants_1.defaultSubaccount,
            updatedAtHeight: constants_1.defaultBlock2.blockHeight,
            updatedAt: constants_1.defaultBlock2.time,
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,