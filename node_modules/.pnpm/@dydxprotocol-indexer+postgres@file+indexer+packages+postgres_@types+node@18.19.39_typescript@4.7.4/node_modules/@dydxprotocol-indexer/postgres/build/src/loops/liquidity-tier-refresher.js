"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clear = exports.upsertLiquidityTier = exports.getLiquidityTiersMap = exports.getLiquidityTierFromId = exports.updateLiquidityTiers = exports.start = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const config_1 = __importDefault(require("../config"));
const LiquidityTiersTable = __importStar(require("../stores/liquidity-tiers-table"));
let idToLiquidityTier = {};
/**
 * Refresh loop to cache the list of all liquidity tiers from the database in-memory.
 */
async function start() {
    for (;;) {
        await updateLiquidityTiers();
        await (0, base_1.delay)(config_1.default.LIQUIDITY_TIER_REFRESHER_INTERVAL_MS);
    }
}
exports.start = start;
/**
 * Updates in-memory map of liquidity tiers.
 */
async function updateLiquidityTiers(options) {
    const startTime = Date.now();
    const liquidityTiers = await LiquidityTiersTable.findAll({}, [], options || { readReplica: true });
    const tmpIdToLiquidityTier = {};
    liquidityTiers.forEach((liquidityTier) => {
        tmpIdToLiquidityTier[liquidityTier.id] = liquidityTier;
    });
    idToLiquidityTier = tmpIdToLiquidityTier;
    base_1.stats.timing(`${config_1.default.SERVICE_NAME}.loops.update_liquidity_tiers`, Date.now() - startTime);
}
exports.updateLiquidityTiers = updateLiquidityTiers;
/**
 * Gets the liquidity tier for a given id.
 */
function getLiquidityTierFromId(id) {
    const tier = idToLiquidityTier[id];
    if (tier === undefined) {
        const message = `Unable to find liquidity tier with id: ${id}`;
        base_1.logger.error({
            at: 'liquidity-tier-refresher#getLiquidityTierFromId',
            message,
        });
        throw new Error(message);
    }
    return tier;
}
exports.getLiquidityTierFromId = getLiquidityTierFromId;
function getLiquidityTiersMap() {
    return idToLiquidityTier;
}
exports.getLiquidityTiersMap = getLiquidityTiersMap;
function upsertLiquidityTier(liquidityTier) {
    idToLiquidityTier[liquidityTier.id] = liquidityTier;
}
exports.upsertLiquidityTier = upsertLiquidityTier;
/**
 * Clears the in-memory map of liquidity tier ids to liquidity tiers.
 * Used for testing.
 */
function clear() {
    if (config_1.default.NODE_ENV !== base_1.NodeEnv.TEST) {
        throw new Error('clear cannot be used in non-test env');
    }
    idToLiquidityTier = {};
}
exports.clear = clear;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkaXR5LXRpZXItcmVmcmVzaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xvb3BzL2xpcXVpZGl0eS10aWVyLXJlZnJlc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHFEQUVvQztBQUVwQyx1REFBK0I7QUFDL0IscUZBQXVFO0FBR3ZFLElBQUksaUJBQWlCLEdBQXNCLEVBQUUsQ0FBQztBQUU5Qzs7R0FFRztBQUNJLEtBQUssVUFBVSxLQUFLO0lBQ3pCLFNBQVU7UUFDUixNQUFNLG9CQUFvQixFQUFFLENBQUM7UUFDN0IsTUFBTSxJQUFBLFlBQUssRUFBQyxnQkFBTSxDQUFDLG9DQUFvQyxDQUFDLENBQUM7S0FDMUQ7QUFDSCxDQUFDO0FBTEQsc0JBS0M7QUFFRDs7R0FFRztBQUNJLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxPQUFpQjtJQUMxRCxNQUFNLFNBQVMsR0FBVyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDckMsTUFBTSxjQUFjLEdBQWlDLE1BQU0sbUJBQW1CLENBQUMsT0FBTyxDQUNwRixFQUFFLEVBQ0YsRUFBRSxFQUNGLE9BQU8sSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FDakMsQ0FBQztJQUVGLE1BQU0sb0JBQW9CLEdBQStDLEVBQUUsQ0FBQztJQUM1RSxjQUFjLENBQUMsT0FBTyxDQUNwQixDQUFDLGFBQXlDLEVBQUUsRUFBRTtRQUM1QyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDO0lBQ3pELENBQUMsQ0FDRixDQUFDO0lBRUYsaUJBQWlCLEdBQUcsb0JBQW9CLENBQUM7SUFDekMsWUFBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLGdCQUFNLENBQUMsWUFBWSwrQkFBK0IsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7QUFDOUYsQ0FBQztBQWpCRCxvREFpQkM7QUFFRDs7R0FFRztBQUNILFNBQWdCLHNCQUFzQixDQUFDLEVBQVU7SUFDL0MsTUFBTSxJQUFJLEdBQTJDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtRQUN0QixNQUFNLE9BQU8sR0FBVywwQ0FBMEMsRUFBRSxFQUFFLENBQUM7UUFDdkUsYUFBTSxDQUFDLEtBQUssQ0FBQztZQUNYLEVBQUUsRUFBRSxpREFBaUQ7WUFDckQsT0FBTztTQUNSLENBQUMsQ0FBQztRQUNILE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDMUI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFYRCx3REFXQztBQUVELFNBQWdCLG9CQUFvQjtJQUNsQyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFGRCxvREFFQztBQUVELFNBQWdCLG1CQUFtQixDQUFDLGFBQXlDO0lBQzNFLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsR0FBRyxhQUFhLENBQUM7QUFDdEQsQ0FBQztBQUZELGtEQUVDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsS0FBSztJQUNuQixJQUFJLGdCQUFNLENBQUMsUUFBUSxLQUFLLGNBQU8sQ0FBQyxJQUFJLEVBQUU7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFMRCxzQkFLQyJ9