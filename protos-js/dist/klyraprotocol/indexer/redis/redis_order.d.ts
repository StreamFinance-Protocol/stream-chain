import { IndexerOrder, IndexerOrderAmino, IndexerOrderSDKType } from "../protocol/v1/clob";
import { BinaryReader, BinaryWriter } from "../../../binary";
/** Enum for the ticker type, PERPETUAL or SPOT. */
export declare enum RedisOrder_TickerType {
    /**
     * TICKER_TYPE_UNSPECIFIED - Default value for the enum. Should never be used in an initialized
     * `RedisOrder`.
     */
    TICKER_TYPE_UNSPECIFIED = 0,
    /** TICKER_TYPE_PERPETUAL - Ticker is for a perpetual pair. */
    TICKER_TYPE_PERPETUAL = 1,
    /** TICKER_TYPE_SPOT - Ticker is for a spot pair. */
    TICKER_TYPE_SPOT = 2,
    UNRECOGNIZED = -1
}
export declare const RedisOrder_TickerTypeSDKType: typeof RedisOrder_TickerType;
export declare const RedisOrder_TickerTypeAmino: typeof RedisOrder_TickerType;
export declare function redisOrder_TickerTypeFromJSON(object: any): RedisOrder_TickerType;
export declare function redisOrder_TickerTypeToJSON(object: RedisOrder_TickerType): string;
/**
 * RedisOrder is a proto for orders stored in Redis. This proto holds some
 * human-readable values such as price, size and ticker as well as the original
 * `Order` proto from the Klyra application.
 */
export interface RedisOrder {
    /** uuid of the Order generated by the Indexer based on the `OrderId`. */
    id: string;
    /** Order proto from the protocol. */
    order?: IndexerOrder;
    /** Ticker for the exchange pair for the order. */
    ticker: string;
    /** Type of the ticker, PERPETUAL or SPOT. */
    tickerType: RedisOrder_TickerType;
    /** Human-readable price of the order. */
    price: string;
    /** Human-readable size of the order. */
    size: string;
}
export interface RedisOrderProtoMsg {
    typeUrl: "/klyraprotocol.indexer.redis.RedisOrder";
    value: Uint8Array;
}
/**
 * RedisOrder is a proto for orders stored in Redis. This proto holds some
 * human-readable values such as price, size and ticker as well as the original
 * `Order` proto from the Klyra application.
 */
export interface RedisOrderAmino {
    /** uuid of the Order generated by the Indexer based on the `OrderId`. */
    id?: string;
    /** Order proto from the protocol. */
    order?: IndexerOrderAmino;
    /** Ticker for the exchange pair for the order. */
    ticker?: string;
    /** Type of the ticker, PERPETUAL or SPOT. */
    ticker_type?: RedisOrder_TickerType;
    /** Human-readable price of the order. */
    price?: string;
    /** Human-readable size of the order. */
    size?: string;
}
export interface RedisOrderAminoMsg {
    type: "/klyraprotocol.indexer.redis.RedisOrder";
    value: RedisOrderAmino;
}
/**
 * RedisOrder is a proto for orders stored in Redis. This proto holds some
 * human-readable values such as price, size and ticker as well as the original
 * `Order` proto from the Klyra application.
 */
export interface RedisOrderSDKType {
    id: string;
    order?: IndexerOrderSDKType;
    ticker: string;
    ticker_type: RedisOrder_TickerType;
    price: string;
    size: string;
}
export declare const RedisOrder: {
    typeUrl: string;
    is(o: any): o is RedisOrder;
    isSDK(o: any): o is RedisOrderSDKType;
    isAmino(o: any): o is RedisOrderAmino;
    encode(message: RedisOrder, writer?: BinaryWriter): BinaryWriter;
    decode(input: BinaryReader | Uint8Array, length?: number): RedisOrder;
    fromPartial(object: Partial<RedisOrder>): RedisOrder;
    fromAmino(object: RedisOrderAmino): RedisOrder;
    toAmino(message: RedisOrder): RedisOrderAmino;
    fromAminoMsg(object: RedisOrderAminoMsg): RedisOrder;
    fromProtoMsg(message: RedisOrderProtoMsg): RedisOrder;
    toProto(message: RedisOrder): Uint8Array;
    toProtoMsg(message: RedisOrder): RedisOrderProtoMsg;
};
