"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AssetPositionTable = __importStar(require("../../src/stores/asset-position-table"));
const asset_position_table_1 = require("../../src/stores/asset-position-table");
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const crypto_1 = require("crypto");
const constants_1 = require("../helpers/constants");
const big_js_1 = __importDefault(require("big.js"));
describe('Asset position store', () => {
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully finds all asset positions', async () => {
        await Promise.all([
            AssetPositionTable.upsert(constants_1.defaultAssetPosition),
            AssetPositionTable.upsert(constants_1.defaultAssetPosition2),
        ]);
        const assetPositions = await AssetPositionTable.findAll({}, [], { readReplica: true });
        expect(assetPositions.length).toEqual(2);
        expect(assetPositions[0]).toEqual(expect.objectContaining(constants_1.defaultAssetPosition));
        expect(assetPositions[1]).toEqual(expect.objectContaining(constants_1.defaultAssetPosition2));
    });
    it('Successfully finds Asset Position with subaccount id', async () => {
        await Promise.all([
            AssetPositionTable.upsert(constants_1.defaultAssetPosition),
            AssetPositionTable.upsert(constants_1.defaultAssetPosition2),
        ]);
        const assetPositions = await AssetPositionTable.findAll({
            subaccountId: [constants_1.defaultSubaccountId],
        }, [], { readReplica: true });
        expect(assetPositions.length).toEqual(1);
        expect(assetPositions[0]).toEqual(expect.objectContaining(constants_1.defaultAssetPosition));
    });
    it('Successfully finds an asset position with id', async () => {
        const assetPositionFromDatabase = await AssetPositionTable.upsert(constants_1.defaultAssetPosition);
        const assetPosition = await AssetPositionTable.findById(assetPositionFromDatabase.id);
        expect(assetPosition).toEqual(expect.objectContaining(constants_1.defaultAssetPosition));
    });
    it('Successfully finds USDC positions for subaccountIds', async () => {
        await Promise.all([
            AssetPositionTable.upsert(constants_1.defaultAssetPosition),
            AssetPositionTable.upsert({
                ...constants_1.defaultAssetPosition2,
                assetId: constants_1.defaultAsset.id,
            }),
        ]);
        const assetPositions = await (0, asset_position_table_1.findUsdcPositionForSubaccounts)([
            constants_1.defaultSubaccountId,
            constants_1.defaultSubaccountId2,
        ]);
        expect(assetPositions).toEqual(expect.objectContaining({
            [constants_1.defaultSubaccountId]: (0, big_js_1.default)(constants_1.defaultAssetPosition.size),
            [constants_1.defaultSubaccountId2]: (0, big_js_1.default)(0).minus(constants_1.defaultAssetPosition2.size),
        }));
    });
    it('Unable finds an asset position', async () => {
        const assetPosition = await AssetPositionTable.findById((0, crypto_1.randomUUID)());
        expect(assetPosition).toEqual(undefined);
    });
    it('Successfully upserts an asset position', async () => {
        await AssetPositionTable.upsert(constants_1.defaultAssetPosition);
        await expect(AssetPositionTable.findById(constants_1.defaultAssetPositionId)).resolves.toEqual(expect.objectContaining(constants_1.defaultAssetPosition));
    });
    it('Successfully upserts a preexisting asset position', async () => {
        await AssetPositionTable.upsert(constants_1.defaultAssetPosition);
        await AssetPositionTable.upsert({
            ...constants_1.defaultAssetPosition,
            size: '20000',
        });
        await expect(AssetPositionTable.findById(constants_1.defaultAssetPositionId)).resolves.toEqual(expect.objectContaining({
            ...constants_1.defaultAssetPosition,
            size: '20000',
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtcG9zaXRpb24tdGFibGUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL19fdGVzdHNfXy9zdG9yZXMvYXNzZXQtcG9zaXRpb24tdGFibGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsMEZBQTRFO0FBQzVFLGdGQUF1RjtBQUV2Riw2REFBNEU7QUFDNUUsZ0VBQXNEO0FBQ3RELG1DQUFvQztBQUNwQyxvREFPOEI7QUFDOUIsb0RBQXlCO0FBRXpCLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sSUFBQSwwQkFBUSxHQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLG9CQUFPLEdBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsc0JBQVMsR0FBRSxDQUFDO0lBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE1BQU0sSUFBQSxxQkFBUSxHQUFFLENBQUM7SUFDbkIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsd0NBQXdDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdEQsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQ0FBb0IsQ0FBQztZQUMvQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsaUNBQXFCLENBQUM7U0FDakQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxjQUFjLEdBQWdDLE1BQU0sa0JBQWtCLENBQUMsT0FBTyxDQUNsRixFQUFFLEVBQ0YsRUFBRSxFQUNGLEVBQUUsV0FBVyxFQUFF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