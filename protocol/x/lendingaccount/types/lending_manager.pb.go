// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/lendingaccount/lending_manager.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LendingManager struct {
	// The name of the lending manager.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The base denomination for the lending manager.
	BaseDenom string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// A list of enabled lending perpetuals.
	EnabledLendingPerpetuals []*EnabledLendingPerpetual `protobuf:"bytes,3,rep,name=enabled_lending_perpetuals,json=enabledLendingPerpetuals,proto3" json:"enabled_lending_perpetuals,omitempty"`
	// A list of enabled collateral assets.
	EnabledCollateralAssets []*EnabledCollateralAssets `protobuf:"bytes,4,rep,name=enabled_collateral_assets,json=enabledCollateralAssets,proto3" json:"enabled_collateral_assets,omitempty"`
	// Parameters for liquidation.
	LiquidationParams *LiquidationParams `protobuf:"bytes,5,opt,name=liquidation_params,json=liquidationParams,proto3" json:"liquidation_params,omitempty"`
	// The maximum leverage for perpetuals.
	MaxPerpetualLeverage uint64 `protobuf:"varint,6,opt,name=max_perpetual_leverage,json=maxPerpetualLeverage,proto3" json:"max_perpetual_leverage,omitempty"`
	// The interest fee.
	InterestFee uint64 `protobuf:"varint,7,opt,name=interest_fee,json=interestFee,proto3" json:"interest_fee,omitempty"`
	// Indicates if the lending manager is frozen.
	IsFrozen bool `protobuf:"varint,8,opt,name=is_frozen,json=isFrozen,proto3" json:"is_frozen,omitempty"`
	// A map from account number to address.
	AccountNumberToAddress map[uint64]string `protobuf:"bytes,9,rep,name=account_number_to_address,json=accountNumberToAddress,proto3" json:"account_number_to_address,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LendingManager) Reset()         { *m = LendingManager{} }
func (m *LendingManager) String() string { return proto.CompactTextString(m) }
func (*LendingManager) ProtoMessage()    {}
func (*LendingManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cfdbfad57d36ca, []int{0}
}
func (m *LendingManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LendingManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LendingManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LendingManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendingManager.Merge(m, src)
}
func (m *LendingManager) XXX_Size() int {
	return m.Size()
}
func (m *LendingManager) XXX_DiscardUnknown() {
	xxx_messageInfo_LendingManager.DiscardUnknown(m)
}

var xxx_messageInfo_LendingManager proto.InternalMessageInfo

func (m *LendingManager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LendingManager) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *LendingManager) GetEnabledLendingPerpetuals() []*EnabledLendingPerpetual {
	if m != nil {
		return m.EnabledLendingPerpetuals
	}
	return nil
}

func (m *LendingManager) GetEnabledCollateralAssets() []*EnabledCollateralAssets {
	if m != nil {
		return m.EnabledCollateralAssets
	}
	return nil
}

func (m *LendingManager) GetLiquidationParams() *LiquidationParams {
	if m != nil {
		return m.LiquidationParams
	}
	return nil
}

func (m *LendingManager) GetMaxPerpetualLeverage() uint64 {
	if m != nil {
		return m.MaxPerpetualLeverage
	}
	return 0
}

func (m *LendingManager) GetInterestFee() uint64 {
	if m != nil {
		return m.InterestFee
	}
	return 0
}

func (m *LendingManager) GetIsFrozen() bool {
	if m != nil {
		return m.IsFrozen
	}
	return false
}

func (m *LendingManager) GetAccountNumberToAddress() map[uint64]string {
	if m != nil {
		return m.AccountNumberToAddress
	}
	return nil
}

type EnabledLendingPerpetual struct {
	// The ID of the perpetual.
	PerpId uint32 `protobuf:"varint,1,opt,name=perp_id,json=perpId,proto3" json:"perp_id,omitempty"`
	// Indicates if the account is enabled to go long or short.
	IsLong bool `protobuf:"varint,2,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
}

func (m *EnabledLendingPerpetual) Reset()         { *m = EnabledLendingPerpetual{} }
func (m *EnabledLendingPerpetual) String() string { return proto.CompactTextString(m) }
func (*EnabledLendingPerpetual) ProtoMessage()    {}
func (*EnabledLendingPerpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cfdbfad57d36ca, []int{1}
}
func (m *EnabledLendingPerpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledLendingPerpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnabledLendingPerpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnabledLendingPerpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledLendingPerpetual.Merge(m, src)
}
func (m *EnabledLendingPerpetual) XXX_Size() int {
	return m.Size()
}
func (m *EnabledLendingPerpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledLendingPerpetual.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledLendingPerpetual proto.InternalMessageInfo

func (m *EnabledLendingPerpetual) GetPerpId() uint32 {
	if m != nil {
		return m.PerpId
	}
	return 0
}

func (m *EnabledLendingPerpetual) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

type EnabledCollateralAssets struct {
	// The denomination of the collateral asset.
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// The collateral ratio.
	CollateralRatio uint64 `protobuf:"varint,2,opt,name=collateral_ratio,json=collateralRatio,proto3" json:"collateral_ratio,omitempty"`
}

func (m *EnabledCollateralAssets) Reset()         { *m = EnabledCollateralAssets{} }
func (m *EnabledCollateralAssets) String() string { return proto.CompactTextString(m) }
func (*EnabledCollateralAssets) ProtoMessage()    {}
func (*EnabledCollateralAssets) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cfdbfad57d36ca, []int{2}
}
func (m *EnabledCollateralAssets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnabledCollateralAssets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnabledCollateralAssets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnabledCollateralAssets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnabledCollateralAssets.Merge(m, src)
}
func (m *EnabledCollateralAssets) XXX_Size() int {
	return m.Size()
}
func (m *EnabledCollateralAssets) XXX_DiscardUnknown() {
	xxx_messageInfo_EnabledCollateralAssets.DiscardUnknown(m)
}

var xxx_messageInfo_EnabledCollateralAssets proto.InternalMessageInfo

func (m *EnabledCollateralAssets) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *EnabledCollateralAssets) GetCollateralRatio() uint64 {
	if m != nil {
		return m.CollateralRatio
	}
	return 0
}

type LiquidationParams struct {
	// The liquidation threshold.
	LiquidationThreshold uint64 `protobuf:"varint,1,opt,name=liquidation_threshold,json=liquidationThreshold,proto3" json:"liquidation_threshold,omitempty"`
	// The liquidation discount.
	LiquidationDiscount uint64 `protobuf:"varint,2,opt,name=liquidation_discount,json=liquidationDiscount,proto3" json:"liquidation_discount,omitempty"`
	// The liquidation fee.
	LiquidationFee uint64 `protobuf:"varint,3,opt,name=liquidation_fee,json=liquidationFee,proto3" json:"liquidation_fee,omitempty"`
}

func (m *LiquidationParams) Reset()         { *m = LiquidationParams{} }
func (m *LiquidationParams) String() string { return proto.CompactTextString(m) }
func (*LiquidationParams) ProtoMessage()    {}
func (*LiquidationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f4cfdbfad57d36ca, []int{3}
}
func (m *LiquidationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationParams.Merge(m, src)
}
func (m *LiquidationParams) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationParams.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationParams proto.InternalMessageInfo

func (m *LiquidationParams) GetLiquidationThreshold() uint64 {
	if m != nil {
		return m.LiquidationThreshold
	}
	return 0
}

func (m *LiquidationParams) GetLiquidationDiscount() uint64 {
	if m != nil {
		return m.LiquidationDiscount
	}
	return 0
}

func (m *LiquidationParams) GetLiquidationFee() uint64 {
	if m != nil {
		return m.LiquidationFee
	}
	return 0
}

func init() {
	proto.RegisterType((*LendingManager)(nil), "dydxprotocol.lendingaccount.LendingManager")
	proto.RegisterMapType((map[uint64]string)(nil), "dydxprotocol.lendingaccount.LendingManager.AccountNumberToAddressEntry")
	proto.RegisterType((*EnabledLendingPerpetual)(nil), "dydxprotocol.lendingaccount.EnabledLendingPerpetual")
	proto.RegisterType((*EnabledCollateralAssets)(nil), "dydxprotocol.lendingaccount.EnabledCollateralAssets")
	proto.RegisterType((*LiquidationParams)(nil), "dydxprotocol.lendingaccount.LiquidationParams")
}

func init() {
	proto.RegisterFile("dydxprotocol/lendingaccount/lending_manager.proto", fileDescriptor_f4cfdbfad57d36ca)
}

var fileDescriptor_f4cfdbfad57d36ca = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xed, 0x34, 0x8f, 0x26, 0x2e, 0xf4, 0x61, 0x42, 0x3b, 0x4d, 0x45, 0x14, 0xb2, 0x21, 0x2c,
	0x9a, 0xa8, 0x8f, 0x05, 0x62, 0xd7, 0xd2, 0x06, 0x55, 0x84, 0xaa, 0x9a, 0x76, 0x55, 0x09, 0x59,
	0xce, 0xcc, 0xed, 0xc4, 0x62, 0xc6, 0x0e, 0xb6, 0x53, 0x25, 0x7c, 0x05, 0x1f, 0xc0, 0x92, 0x4f,
	0xe0, 0x23, 0x58, 0x56, 0xac, 0x58, 0xa2, 0x76, 0xc3, 0x67, 0xa0, 0xf1, 0xcc, 0xa4, 0xd3, 0x07,
	0x11, 0x3b, 0xdf, 0x73, 0x7c, 0xce, 0xb5, 0xef, 0x9c, 0x31, 0xda, 0xf4, 0xc6, 0xde, 0x68, 0x20,
	0x85, 0x16, 0xae, 0x08, 0xda, 0x01, 0x70, 0x8f, 0x71, 0x9f, 0xba, 0xae, 0x18, 0x72, 0x9d, 0x96,
	0x24, 0xa4, 0x9c, 0xfa, 0x20, 0x5b, 0x66, 0x1f, 0x5e, 0xcf, 0x4a, 0x5a, 0xb7, 0x25, 0xd5, 0x8a,
	0x2f, 0x7c, 0x61, 0xc8, 0x76, 0xb4, 0x8a, 0x25, 0xd5, 0x35, 0x57, 0xa8, 0x50, 0x28, 0x12, 0x13,
	0x71, 0x11, 0x53, 0x8d, 0x3f, 0x05, 0xb4, 0xd0, 0x8d, 0x3d, 0xde, 0xc7, 0x6d, 0x30, 0x46, 0x79,
	0x4e, 0x43, 0xb0, 0xad, 0xba, 0xd5, 0x2c, 0x3b, 0x66, 0x8d, 0x9f, 0x21, 0xd4, 0xa3, 0x0a, 0x88,
	0x07, 0x5c, 0x84, 0xf6, 0xac, 0x61, 0xca, 0x11, 0xb2, 0x1f, 0x01, 0x58, 0xa2, 0x2a, 0x70, 0xda,
	0x0b, 0xc0, 0x23, 0xe9, 0xa1, 0x07, 0x20, 0x07, 0xa0, 0x87, 0x34, 0x50, 0x76, 0xae, 0x9e, 0x6b,
	0xce, 0x6f, 0xed, 0xb4, 0xa6, 0x1c, 0xbc, 0x75, 0x10, 0xcb, 0x93, 0xa3, 0x1c, 0xa7, 0x62, 0xc7,
	0x86, 0x87, 0x09, 0x85, 0x07, 0x68, 0x2d, 0xed, 0xe9, 0x8a, 0x20, 0xa0, 0x1a, 0x24, 0x0d, 0x08,
	0x55, 0x0a, 0xb4, 0xb2, 0xf3, 0xff, 0xdf, 0xf2, 0xcd, 0x44, 0xbc, 0x6b, 0xb4, 0xce, 0x2a, 0x3c,
	0x4c, 0xe0, 0x0f, 0x08, 0x07, 0xec, 0xd3, 0x90, 0x79, 0x54, 0x33, 0xc1, 0xc9, 0x80, 0x4a, 0x1a,
	0x2a, 0xbb, 0x50, 0xb7, 0x9a, 0xf3, 0x5b, 0xad, 0xa9, 0xad, 0xba, 0x37, 0xb2, 0x63, 0xa3, 0x72,
	0x96, 0x83, 0xbb, 0x10, 0xde, 0x41, 0x2b, 0x21, 0x1d, 0xdd, 0x0c, 0x8e, 0x04, 0x70, 0x01, 0x92,
	0xfa, 0x60, 0x17, 0xeb, 0x56, 0x33, 0xef, 0x54, 0x42, 0x3a, 0x9a, 0xdc, 0xbf, 0x9b, 0x70, 0xf8,
	0x39, 0x7a, 0xc4, 0xb8, 0x06, 0x09, 0x4a, 0x93, 0x73, 0x00, 0x7b, 0xce, 0xec, 0x9d, 0x4f, 0xb1,
	0x0e, 0x00, 0x5e, 0x47, 0x65, 0xa6, 0xc8, 0xb9, 0x14, 0x9f, 0x81, 0xdb, 0xa5, 0xba, 0xd5, 0x2c,
	0x39, 0x25, 0xa6, 0x3a, 0xa6, 0xc6, 0x5f, 0x2d, 0xb4, 0x96, 0x1c, 0x93, 0xf0, 0x61, 0xd8, 0x03,
	0x49, 0xb4, 0x20, 0xd4, 0xf3, 0x24, 0x28, 0x65, 0x97, 0xcd, 0x1c, 0xdf, 0x4e, 0xbf, 0xdc, 0xad,
	0xf8, 0xb4, 0x76, 0x63, 0xf8, 0xc8, 0x78, 0x9d, 0x8a, 0xdd, 0xd8, 0xe9, 0x80, 0x6b, 0x39, 0xde,
	0xb3, 0x7f, 0x7e, 0xdf, 0xa8, 0x24, 0xf9, 0x4b, 0x88, 0x13, 0x2d, 0x19, 0xf7, 0x9d, 0x15, 0xfa,
	0xa0, 0xac, 0x7a, 0x88, 0xd6, 0xa7, 0x18, 0xe2, 0x25, 0x94, 0xfb, 0x08, 0x63, 0x13, 0xd5, 0xbc,
	0x13, 0x2d, 0x71, 0x05, 0x15, 0x2e, 0x68, 0x30, 0x84, 0x24, 0xa4, 0x71, 0xf1, 0x7a, 0xf6, 0x95,
	0xd5, 0x78, 0x87, 0x56, 0xff, 0x91, 0x32, 0xbc, 0x8a, 0xe6, 0xa2, 0xb1, 0x13, 0xe6, 0x19, 0xab,
	0xc7, 0x4e, 0x31, 0x2a, 0x0f, 0xbd, 0x88, 0x60, 0x8a, 0x04, 0x82, 0xfb, 0xc6, 0xaf, 0xe4, 0x14,
	0x99, 0xea, 0x0a, 0xee, 0x37, 0xce, 0x26, 0x66, 0xf7, 0x62, 0x52, 0x41, 0x85, 0xf8, 0x37, 0x89,
	0x7f, 0xa0, 0xb8, 0xc0, 0x2f, 0xd1, 0x52, 0x26, 0xa6, 0x32, 0xfa, 0xf0, 0xc6, 0x32, 0xef, 0x2c,
	0xde, 0xe0, 0x4e, 0x04, 0x37, 0xbe, 0x59, 0x68, 0xf9, 0x5e, 0x62, 0xf0, 0x36, 0x7a, 0x9a, 0x4d,
	0x9f, 0xee, 0x4b, 0x50, 0x7d, 0x11, 0x78, 0xc9, 0xe5, 0x2b, 0x19, 0xf2, 0x34, 0xe5, 0xf0, 0x26,
	0xca, 0xe2, 0xc4, 0x63, 0xca, 0xcc, 0x32, 0xe9, 0xfc, 0x24, 0xc3, 0xed, 0x27, 0x14, 0x7e, 0x81,
	0x16, 0xb3, 0x92, 0x28, 0x53, 0x39, 0xb3, 0x7b, 0x21, 0x03, 0x77, 0x00, 0xf6, 0xfa, 0x3f, 0xae,
	0x6a, 0xd6, 0xe5, 0x55, 0xcd, 0xfa, 0x7d, 0x55, 0xb3, 0xbe, 0x5c, 0xd7, 0x66, 0x2e, 0xaf, 0x6b,
	0x33, 0xbf, 0xae, 0x6b, 0x33, 0x67, 0x47, 0x3e, 0xd3, 0xfd, 0x61, 0xaf, 0xe5, 0x8a, 0xb0, 0x7d,
	0xa2, 0x25, 0xd0, 0xb0, 0xc3, 0x38, 0xe5, 0x2e, 0x6c, 0x1c, 0xa7, 0x4f, 0x9d, 0x32, 0xf0, 0x86,
	0xdb, 0xa7, 0x8c, 0xb7, 0x27, 0x0f, 0xe0, 0xe8, 0xee, 0x13, 0xa8, 0xc7, 0x03, 0x50, 0xbd, 0xa2,
	0xd9, 0xb0, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x67, 0x97, 0x8d, 0x2e, 0x05, 0x00, 0x00,
}

func (m *LendingManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LendingManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LendingManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountNumberToAddress) > 0 {
		for k := range m.AccountNumberToAddress {
			v := m.AccountNumberToAddress[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintLendingManager(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintLendingManager(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintLendingManager(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IsFrozen {
		i--
		if m.IsFrozen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.InterestFee != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.InterestFee))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxPerpetualLeverage != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.MaxPerpetualLeverage))
		i--
		dAtA[i] = 0x30
	}
	if m.LiquidationParams != nil {
		{
			size, err := m.LiquidationParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingManager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EnabledCollateralAssets) > 0 {
		for iNdEx := len(m.EnabledCollateralAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnabledCollateralAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.EnabledLendingPerpetuals) > 0 {
		for iNdEx := len(m.EnabledLendingPerpetuals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EnabledLendingPerpetuals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLendingManager(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintLendingManager(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLendingManager(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EnabledLendingPerpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledLendingPerpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledLendingPerpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PerpId != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.PerpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EnabledCollateralAssets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnabledCollateralAssets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnabledCollateralAssets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollateralRatio != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.CollateralRatio))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLendingManager(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LiquidationFee != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.LiquidationFee))
		i--
		dAtA[i] = 0x18
	}
	if m.LiquidationDiscount != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.LiquidationDiscount))
		i--
		dAtA[i] = 0x10
	}
	if m.LiquidationThreshold != 0 {
		i = encodeVarintLendingManager(dAtA, i, uint64(m.LiquidationThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLendingManager(dAtA []byte, offset int, v uint64) int {
	offset -= sovLendingManager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LendingManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLendingManager(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovLendingManager(uint64(l))
	}
	if len(m.EnabledLendingPerpetuals) > 0 {
		for _, e := range m.EnabledLendingPerpetuals {
			l = e.Size()
			n += 1 + l + sovLendingManager(uint64(l))
		}
	}
	if len(m.EnabledCollateralAssets) > 0 {
		for _, e := range m.EnabledCollateralAssets {
			l = e.Size()
			n += 1 + l + sovLendingManager(uint64(l))
		}
	}
	if m.LiquidationParams != nil {
		l = m.LiquidationParams.Size()
		n += 1 + l + sovLendingManager(uint64(l))
	}
	if m.MaxPerpetualLeverage != 0 {
		n += 1 + sovLendingManager(uint64(m.MaxPerpetualLeverage))
	}
	if m.InterestFee != 0 {
		n += 1 + sovLendingManager(uint64(m.InterestFee))
	}
	if m.IsFrozen {
		n += 2
	}
	if len(m.AccountNumberToAddress) > 0 {
		for k, v := range m.AccountNumberToAddress {
			_ = k
			_ = v
			mapEntrySize := 1 + sovLendingManager(uint64(k)) + 1 + len(v) + sovLendingManager(uint64(len(v)))
			n += mapEntrySize + 1 + sovLendingManager(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EnabledLendingPerpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerpId != 0 {
		n += 1 + sovLendingManager(uint64(m.PerpId))
	}
	if m.IsLong {
		n += 2
	}
	return n
}

func (m *EnabledCollateralAssets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLendingManager(uint64(l))
	}
	if m.CollateralRatio != 0 {
		n += 1 + sovLendingManager(uint64(m.CollateralRatio))
	}
	return n
}

func (m *LiquidationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiquidationThreshold != 0 {
		n += 1 + sovLendingManager(uint64(m.LiquidationThreshold))
	}
	if m.LiquidationDiscount != 0 {
		n += 1 + sovLendingManager(uint64(m.LiquidationDiscount))
	}
	if m.LiquidationFee != 0 {
		n += 1 + sovLendingManager(uint64(m.LiquidationFee))
	}
	return n
}

func sovLendingManager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLendingManager(x uint64) (n int) {
	return sovLendingManager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LendingManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LendingManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LendingManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledLendingPerpetuals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledLendingPerpetuals = append(m.EnabledLendingPerpetuals, &EnabledLendingPerpetual{})
			if err := m.EnabledLendingPerpetuals[len(m.EnabledLendingPerpetuals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledCollateralAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnabledCollateralAssets = append(m.EnabledCollateralAssets, &EnabledCollateralAssets{})
			if err := m.EnabledCollateralAssets[len(m.EnabledCollateralAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiquidationParams == nil {
				m.LiquidationParams = &LiquidationParams{}
			}
			if err := m.LiquidationParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPerpetualLeverage", wireType)
			}
			m.MaxPerpetualLeverage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPerpetualLeverage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestFee", wireType)
			}
			m.InterestFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InterestFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFrozen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFrozen = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountNumberToAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountNumberToAddress == nil {
				m.AccountNumberToAddress = make(map[uint64]string)
			}
			var mapkey uint64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLendingManager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLendingManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLendingManager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthLendingManager
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthLendingManager
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLendingManager(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLendingManager
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AccountNumberToAddress[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnabledLendingPerpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledLendingPerpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledLendingPerpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpId", wireType)
			}
			m.PerpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLendingManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnabledCollateralAssets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnabledCollateralAssets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnabledCollateralAssets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingManager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingManager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralRatio", wireType)
			}
			m.CollateralRatio = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralRatio |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLendingManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingManager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationThreshold", wireType)
			}
			m.LiquidationThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationDiscount", wireType)
			}
			m.LiquidationDiscount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationDiscount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationFee", wireType)
			}
			m.LiquidationFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLendingManager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingManager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLendingManager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLendingManager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingManager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLendingManager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLendingManager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLendingManager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLendingManager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLendingManager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLendingManager = fmt.Errorf("proto: unexpected end of group")
)
