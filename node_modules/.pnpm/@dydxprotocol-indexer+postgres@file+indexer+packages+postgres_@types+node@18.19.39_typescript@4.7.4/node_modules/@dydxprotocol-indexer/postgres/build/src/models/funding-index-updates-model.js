"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
class FundingIndexUpdatesModel extends objection_1.Model {
    static get tableName() {
        return 'funding_index_updates';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'perpetualId',
                'eventId',
                'rate',
                'oraclePrice',
                'fundingIndex',
                'effectiveAt',
                'effectiveAtHeight',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                perpetualId: { type: 'string', pattern: validators_1.IntegerPattern },
                rate: { type: 'string', pattern: validators_1.NumericPattern },
                oraclePrice: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                fundingIndex: { type: 'string', pattern: validators_1.NumericPattern },
                effectiveAt: { type: 'string', format: 'date-time' },
                effectiveAtHeight: { type: 'string', pattern: validators_1.IntegerPattern },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            perpetualId: 'string',
            eventId: 'hex-string',
            rate: 'string',
            oraclePrice: 'string',
            fundingIndex: 'string',
            effectiveAt: 'date-time',
            effectiveAtHeight: 'string',
        };
    }
}
exports.default = FundingIndexUpdatesModel;
FundingIndexUpdatesModel.relationMappings = {
    openTendermintEvent: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'funding_index_updates.eventId',
            to: 'tendermint_events.id',
        },
    },
    blocks: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'block-model'),
        join: {
            from: 'funding_index_updates.effectiveAtHeight',
            to: 'blocks.blockHeight',
        },
    },
    perpetualMarkets: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'perpetual-market-model'),
        join: {
            from: 'funding_index_updates.perpetualId',
            to: 'perpetual_markets.id',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuZGluZy1pbmRleC11cGRhdGVzLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9mdW5kaW5nLWluZGV4LXVwZGF0ZXMtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFFeEIseUNBQWtDO0FBRWxDLGtEQUE4RjtBQUc5RixNQUFxQix3QkFBeUIsU0FBUSxpQkFBSztJQUN6RCxNQUFNLEtBQUssU0FBUztRQUNsQixPQUFPLHVCQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFFRCxNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUE2QkQsTUFBTSxLQUFLLFVBQVU7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFO2dCQUNSLElBQUk7Z0JBQ0osYUFBYTtnQkFDYixTQUFTO2dCQUNULE1BQU07Z0JBQ04sYUFBYTtnQkFDYixjQUFjO2dCQUNkLGFBQWE7Z0JBQ2IsbUJBQW1CO2FBQ3BCO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDdEMsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDeEQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsMkJBQWMsRUFBRTtnQkFDakQsV0FBVyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7Z0JBQ25FLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLDJCQUFjLEVBQUU7Z0JBQ3pELFdBQVcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtnQkFDcEQsaUJBQWlCLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSwyQkFBYyxFQUFFO2FBQy9EO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sS0FBSyxvQkFBb0I7UUFDN0IsT0FBTztZQUNMLEVBQUUsRUFBRSxRQUFRO1lBQ1osV0FBVyxFQUFFLFFBQVE7WUFDckIsT0FBTyxFQUFFLFlBQVk7WUFDckIsSUFBSSxFQUFFLFFBQVE7WUFDZCxXQUFXLEVBQUUsUUFBUTtZQUNyQixZQUFZLEVBQUUsUUFBUTtZQUN0QixXQUFXLEVBQUUsV0FBVztZQUN4QixpQkFBaUIsRUFBRSxRQUFRO1NBQzVCLENBQUM7SUFDSixDQUFDOztBQTlFSCwyQ0ErRkM7QUF0RlEseUNBQWdCLEdBQUc7SUFDeEIsbUJBQW1CLEVBQUU7UUFDbkIsUUFBUSxFQUFFLGlCQUFLLENBQUMsb0JBQW9CO1FBQ3BDLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQztRQUMxRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsK0JBQStCO1lBQ3JDLEVBQUUsRUFBRSxzQkFBc0I7U0FDM0I7S0FDRjtJQUNELE1BQU0sRUFBRTtRQUNOLFFBQVEsRUFBRSxpQkFBSyxDQUFDLG9CQUFvQjtRQUNwQyxVQUFVLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDO1FBQy9DLElBQUksRUFBRTtZQUNKLElBQUksRUFBRSx5Q0FBeUM7WUFDL0MsRUFBRSxFQUFFLG9CQUFvQjtTQUN6QjtLQUNGO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDaEIsUUFBUSxFQUFFLGlCQUFLLENBQUMsb0JBQW9CO1FBQ3BDLFVBQVUsRUFBRSxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx3QkFBd0IsQ0FBQztRQUMxRCxJQUFJLEVBQUU7WUFDSixJQUFJLEVBQUUsbUNBQW1DO1lBQ3pDLEVBQUUsRUFBRSxzQkFBc0I7U0FDM0I7S0FDRjtDQUNGLENBQUMifQ==