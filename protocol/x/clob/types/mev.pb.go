// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: klyraprotocol/clob/mev.proto

package types

import (
	fmt "fmt"
	types "github.com/StreamFinance-Protocol/stream-chain/protocol/x/subaccounts/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MEVMatch represents all necessary data to calculate MEV for a regular match.
type MEVMatch struct {
	TakerOrderSubaccountId *types.SubaccountId `protobuf:"bytes,1,opt,name=taker_order_subaccount_id,json=takerOrderSubaccountId,proto3" json:"taker_order_subaccount_id,omitempty"`
	TakerFeePpm            int32               `protobuf:"varint,2,opt,name=taker_fee_ppm,json=takerFeePpm,proto3" json:"taker_fee_ppm,omitempty"`
	MakerOrderSubaccountId *types.SubaccountId `protobuf:"bytes,3,opt,name=maker_order_subaccount_id,json=makerOrderSubaccountId,proto3" json:"maker_order_subaccount_id,omitempty"`
	MakerOrderSubticks     uint64              `protobuf:"varint,4,opt,name=maker_order_subticks,json=makerOrderSubticks,proto3" json:"maker_order_subticks,omitempty"`
	MakerOrderIsBuy        bool                `protobuf:"varint,5,opt,name=maker_order_is_buy,json=makerOrderIsBuy,proto3" json:"maker_order_is_buy,omitempty"`
	MakerFeePpm            int32               `protobuf:"varint,6,opt,name=maker_fee_ppm,json=makerFeePpm,proto3" json:"maker_fee_ppm,omitempty"`
	ClobPairId             uint32              `protobuf:"varint,7,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	FillAmount             uint64              `protobuf:"varint,8,opt,name=fill_amount,json=fillAmount,proto3" json:"fill_amount,omitempty"`
}

func (m *MEVMatch) Reset()         { *m = MEVMatch{} }
func (m *MEVMatch) String() string { return proto.CompactTextString(m) }
func (*MEVMatch) ProtoMessage()    {}
func (*MEVMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_105b6ac17c8a7ba2, []int{0}
}
func (m *MEVMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MEVMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MEVMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MEVMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MEVMatch.Merge(m, src)
}
func (m *MEVMatch) XXX_Size() int {
	return m.Size()
}
func (m *MEVMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MEVMatch.DiscardUnknown(m)
}

var xxx_messageInfo_MEVMatch proto.InternalMessageInfo

func (m *MEVMatch) GetTakerOrderSubaccountId() *types.SubaccountId {
	if m != nil {
		return m.TakerOrderSubaccountId
	}
	return nil
}

func (m *MEVMatch) GetTakerFeePpm() int32 {
	if m != nil {
		return m.TakerFeePpm
	}
	return 0
}

func (m *MEVMatch) GetMakerOrderSubaccountId() *types.SubaccountId {
	if m != nil {
		return m.MakerOrderSubaccountId
	}
	return nil
}

func (m *MEVMatch) GetMakerOrderSubticks() uint64 {
	if m != nil {
		return m.MakerOrderSubticks
	}
	return 0
}

func (m *MEVMatch) GetMakerOrderIsBuy() bool {
	if m != nil {
		return m.MakerOrderIsBuy
	}
	return false
}

func (m *MEVMatch) GetMakerFeePpm() int32 {
	if m != nil {
		return m.MakerFeePpm
	}
	return 0
}

func (m *MEVMatch) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *MEVMatch) GetFillAmount() uint64 {
	if m != nil {
		return m.FillAmount
	}
	return 0
}

// MEVLiquidationMatch represents all necessary data to calculate MEV for a
// liquidation.
type MEVLiquidationMatch struct {
	LiquidatedSubaccountId          types.SubaccountId `protobuf:"bytes,1,opt,name=liquidated_subaccount_id,json=liquidatedSubaccountId,proto3" json:"liquidated_subaccount_id"`
	InsuranceFundDeltaQuoteQuantums int64              `protobuf:"varint,2,opt,name=insurance_fund_delta_quote_quantums,json=insuranceFundDeltaQuoteQuantums,proto3" json:"insurance_fund_delta_quote_quantums,omitempty"`
	ValidatorFeeQuoteQuantums       int64              `protobuf:"varint,3,opt,name=validator_fee_quote_quantums,json=validatorFeeQuoteQuantums,proto3" json:"validator_fee_quote_quantums,omitempty"`
	LiquidityFeeQuoteQuantums       int64              `protobuf:"varint,4,opt,name=liquidity_fee_quote_quantums,json=liquidityFeeQuoteQuantums,proto3" json:"liquidity_fee_quote_quantums,omitempty"`
	MakerOrderSubaccountId          types.SubaccountId `protobuf:"bytes,5,opt,name=maker_order_subaccount_id,json=makerOrderSubaccountId,proto3" json:"maker_order_subaccount_id"`
	MakerOrderSubticks              uint64             `protobuf:"varint,6,opt,name=maker_order_subticks,json=makerOrderSubticks,proto3" json:"maker_order_subticks,omitempty"`
	MakerOrderIsBuy                 bool               `protobuf:"varint,7,opt,name=maker_order_is_buy,json=makerOrderIsBuy,proto3" json:"maker_order_is_buy,omitempty"`
	MakerFeePpm                     int32              `protobuf:"varint,8,opt,name=maker_fee_ppm,json=makerFeePpm,proto3" json:"maker_fee_ppm,omitempty"`
	ClobPairId                      uint32             `protobuf:"varint,9,opt,name=clob_pair_id,json=clobPairId,proto3" json:"clob_pair_id,omitempty"`
	FillAmount                      uint64             `protobuf:"varint,10,opt,name=fill_amount,json=fillAmount,proto3" json:"fill_amount,omitempty"`
}

func (m *MEVLiquidationMatch) Reset()         { *m = MEVLiquidationMatch{} }
func (m *MEVLiquidationMatch) String() string { return proto.CompactTextString(m) }
func (*MEVLiquidationMatch) ProtoMessage()    {}
func (*MEVLiquidationMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_105b6ac17c8a7ba2, []int{1}
}
func (m *MEVLiquidationMatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MEVLiquidationMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MEVLiquidationMatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MEVLiquidationMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MEVLiquidationMatch.Merge(m, src)
}
func (m *MEVLiquidationMatch) XXX_Size() int {
	return m.Size()
}
func (m *MEVLiquidationMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MEVLiquidationMatch.DiscardUnknown(m)
}

var xxx_messageInfo_MEVLiquidationMatch proto.InternalMessageInfo

func (m *MEVLiquidationMatch) GetLiquidatedSubaccountId() types.SubaccountId {
	if m != nil {
		return m.LiquidatedSubaccountId
	}
	return types.SubaccountId{}
}

func (m *MEVLiquidationMatch) GetInsuranceFundDeltaQuoteQuantums() int64 {
	if m != nil {
		return m.InsuranceFundDeltaQuoteQuantums
	}
	return 0
}

func (m *MEVLiquidationMatch) GetValidatorFeeQuoteQuantums() int64 {
	if m != nil {
		return m.ValidatorFeeQuoteQuantums
	}
	return 0
}

func (m *MEVLiquidationMatch) GetLiquidityFeeQuoteQuantums() int64 {
	if m != nil {
		return m.LiquidityFeeQuoteQuantums
	}
	return 0
}

func (m *MEVLiquidationMatch) GetMakerOrderSubaccountId() types.SubaccountId {
	if m != nil {
		return m.MakerOrderSubaccountId
	}
	return types.SubaccountId{}
}

func (m *MEVLiquidationMatch) GetMakerOrderSubticks() uint64 {
	if m != nil {
		return m.MakerOrderSubticks
	}
	return 0
}

func (m *MEVLiquidationMatch) GetMakerOrderIsBuy() bool {
	if m != nil {
		return m.MakerOrderIsBuy
	}
	return false
}

func (m *MEVLiquidationMatch) GetMakerFeePpm() int32 {
	if m != nil {
		return m.MakerFeePpm
	}
	return 0
}

func (m *MEVLiquidationMatch) GetClobPairId() uint32 {
	if m != nil {
		return m.ClobPairId
	}
	return 0
}

func (m *MEVLiquidationMatch) GetFillAmount() uint64 {
	if m != nil {
		return m.FillAmount
	}
	return 0
}

// ClobMidPrice contains the mid price of a CLOB pair, represented by it's ID.
type ClobMidPrice struct {
	ClobPair ClobPair `protobuf:"bytes,1,opt,name=clob_pair,json=clobPair,proto3" json:"clob_pair"`
	Subticks uint64   `protobuf:"varint,2,opt,name=subticks,proto3" json:"subticks,omitempty"`
}

func (m *ClobMidPrice) Reset()         { *m = ClobMidPrice{} }
func (m *ClobMidPrice) String() string { return proto.CompactTextString(m) }
func (*ClobMidPrice) ProtoMessage()    {}
func (*ClobMidPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_105b6ac17c8a7ba2, []int{2}
}
func (m *ClobMidPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClobMidPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClobMidPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClobMidPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClobMidPrice.Merge(m, src)
}
func (m *ClobMidPrice) XXX_Size() int {
	return m.Size()
}
func (m *ClobMidPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_ClobMidPrice.DiscardUnknown(m)
}

var xxx_messageInfo_ClobMidPrice proto.InternalMessageInfo

func (m *ClobMidPrice) GetClobPair() ClobPair {
	if m != nil {
		return m.ClobPair
	}
	return ClobPair{}
}

func (m *ClobMidPrice) GetSubticks() uint64 {
	if m != nil {
		return m.Subticks
	}
	return 0
}

// ValidatorMevMatches contains all matches from the validator's local
// operations queue.
type ValidatorMevMatches struct {
	Matches            []MEVMatch            `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches"`
	LiquidationMatches []MEVLiquidationMatch `protobuf:"bytes,2,rep,name=liquidation_matches,json=liquidationMatches,proto3" json:"liquidation_matches"`
}

func (m *ValidatorMevMatches) Reset()         { *m = ValidatorMevMatches{} }
func (m *ValidatorMevMatches) String() string { return proto.CompactTextString(m) }
func (*ValidatorMevMatches) ProtoMessage()    {}
func (*ValidatorMevMatches) Descriptor() ([]byte, []int) {
	return fileDescriptor_105b6ac17c8a7ba2, []int{3}
}
func (m *ValidatorMevMatches) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorMevMatches) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorMevMatches.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorMevMatches) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorMevMatches.Merge(m, src)
}
func (m *ValidatorMevMatches) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorMevMatches) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorMevMatches.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorMevMatches proto.InternalMessageInfo

func (m *ValidatorMevMatches) GetMatches() []MEVMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

func (m *ValidatorMevMatches) GetLiquidationMatches() []MEVLiquidationMatch {
	if m != nil {
		return m.LiquidationMatches
	}
	return nil
}

// MevNodeToNodeMetrics is a data structure for encapsulating all MEV node <>
// node metrics.
type MevNodeToNodeMetrics struct {
	ValidatorMevMatches *ValidatorMevMatches `protobuf:"bytes,1,opt,name=validator_mev_matches,json=validatorMevMatches,proto3" json:"validator_mev_matches,omitempty"`
	ClobMidPrices       []ClobMidPrice       `protobuf:"bytes,2,rep,name=clob_mid_prices,json=clobMidPrices,proto3" json:"clob_mid_prices"`
	BpMevMatches        *ValidatorMevMatches `protobuf:"bytes,3,opt,name=bp_mev_matches,json=bpMevMatches,proto3" json:"bp_mev_matches,omitempty"`
	ProposalReceiveTime uint64               `protobuf:"varint,4,opt,name=proposal_receive_time,json=proposalReceiveTime,proto3" json:"proposal_receive_time,omitempty"`
}

func (m *MevNodeToNodeMetrics) Reset()         { *m = MevNodeToNodeMetrics{} }
func (m *MevNodeToNodeMetrics) String() string { return proto.CompactTextString(m) }
func (*MevNodeToNodeMetrics) ProtoMessage()    {}
func (*MevNodeToNodeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_105b6ac17c8a7ba2, []int{4}
}
func (m *MevNodeToNodeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MevNodeToNodeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MevNodeToNodeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MevNodeToNodeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MevNodeToNodeMetrics.Merge(m, src)
}
func (m *MevNodeToNodeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *MevNodeToNodeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_MevNodeToNodeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_MevNodeToNodeMetrics proto.InternalMessageInfo

func (m *MevNodeToNodeMetrics) GetValidatorMevMatches() *ValidatorMevMatches {
	if m != nil {
		return m.ValidatorMevMatches
	}
	return nil
}

func (m *MevNodeToNodeMetrics) GetClobMidPrices() []ClobMidPrice {
	if m != nil {
		return m.ClobMidPrices
	}
	return nil
}

func (m *MevNodeToNodeMetrics) GetBpMevMatches() *ValidatorMevMatches {
	if m != nil {
		return m.BpMevMatches
	}
	return nil
}

func (m *MevNodeToNodeMetrics) GetProposalReceiveTime() uint64 {
	if m != nil {
		return m.ProposalReceiveTime
	}
	return 0
}

func init() {
	proto.RegisterType((*MEVMatch)(nil), "klyraprotocol.clob.MEVMatch")
	proto.RegisterType((*MEVLiquidationMatch)(nil), "klyraprotocol.clob.MEVLiquidationMatch")
	proto.RegisterType((*ClobMidPrice)(nil), "klyraprotocol.clob.ClobMidPrice")
	proto.RegisterType((*ValidatorMevMatches)(nil), "klyraprotocol.clob.ValidatorMevMatches")
	proto.RegisterType((*MevNodeToNodeMetrics)(nil), "klyraprotocol.clob.MevNodeToNodeMetrics")
}

func init() { proto.RegisterFile("klyraprotocol/clob/mev.proto", fileDescriptor_105b6ac17c8a7ba2) }

var fileDescriptor_105b6ac17c8a7ba2 = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4b, 0x4f, 0x1b, 0x3d,
	0x14, 0xcd, 0x24, 0x01, 0x82, 0x81, 0x0f, 0xc9, 0x01, 0x14, 0x10, 0x0a, 0xa3, 0x7c, 0x0b, 0xa2,
	0x56, 0x24, 0x15, 0xdd, 0x56, 0x42, 0xe5, 0x11, 0x09, 0x89, 0xa1, 0x61, 0x40, 0x2c, 0x5a, 0x09,
	0x6b, 0x1e, 0x26, 0xb1, 0x32, 0x1e, 0x0f, 0x33, 0x9e, 0xa8, 0xf9, 0x17, 0xfd, 0x2f, 0xdd, 0x76,
	0x5d, 0xb1, 0x64, 0xd9, 0x55, 0x55, 0xc1, 0xff, 0xa8, 0x2a, 0x7b, 0x1e, 0x79, 0x97, 0xa6, 0xdd,
	0x44, 0xce, 0xf1, 0xf5, 0xb9, 0xe7, 0xde, 0x7b, 0xc6, 0x06, 0xdb, 0x1d, 0xa7, 0xe7, 0x1b, 0x9e,
	0xcf, 0x38, 0xb3, 0x98, 0x53, 0xb7, 0x1c, 0x66, 0xd6, 0x29, 0xee, 0xd6, 0x24, 0x02, 0xe1, 0xd0,
	0x6e, 0x4d, 0xec, 0x6e, 0xad, 0xb5, 0x58, 0x8b, 0x49, 0xa8, 0x2e, 0x56, 0x51, 0xe4, 0xd6, 0x8b,
	0x61, 0x9e, 0x20, 0x34, 0x0d, 0xcb, 0x62, 0xa1, 0xcb, 0x83, 0x81, 0x75, 0x1c, 0x5b, 0x99, 0x90,
	0x53, 0xfc, 0x20, 0xcf, 0x20, 0x7e, 0x14, 0x53, 0xf9, 0x92, 0x03, 0x05, 0xed, 0xe4, 0x5a, 0x33,
	0xb8, 0xd5, 0x86, 0x26, 0xd8, 0xe4, 0x46, 0x07, 0xfb, 0x88, 0xf9, 0x36, 0xf6, 0x51, 0x9f, 0x10,
	0x11, 0xbb, 0xa4, 0xa8, 0x4a, 0x75, 0x69, 0x7f, 0xb7, 0x36, 0x2c, 0x75, 0x40, 0x40, 0xed, 0x32,
	0x5d, 0x9f, 0xda, 0xfa, 0x86, 0x64, 0x7a, 0x27, 0x88, 0x06, 0x71, 0x58, 0x01, 0x2b, 0x51, 0x8e,
	0x5b, 0x8c, 0x91, 0xe7, 0xd1, 0x52, 0x56, 0x55, 0xaa, 0x73, 0xfa, 0x92, 0x04, 0x1b, 0x18, 0x37,
	0x3d, 0x2a, 0x74, 0xd0, 0xa9, 0x3a, 0x72, 0x33, 0xea, 0xa0, 0x93, 0x75, 0xbc, 0x02, 0x6b, 0x23,
	0x39, 0x38, 0xb1, 0x3a, 0x41, 0x29, 0xaf, 0x2a, 0xd5, 0xbc, 0x0e, 0x87, 0x4e, 0xc9, 0x1d, 0xf8,
	0x12, 0xc0, 0xc1, 0x13, 0x24, 0x40, 0x66, 0xd8, 0x2b, 0xcd, 0xa9, 0x4a, 0xb5, 0xa0, 0xaf, 0xf6,
	0xe3, 0x4f, 0x83, 0xc3, 0xb0, 0x27, 0xca, 0xa4, 0x43, 0x65, 0xce, 0x47, 0x65, 0xd2, 0x81, 0x32,
	0x55, 0xb0, 0x9c, 0x8e, 0x43, 0x54, 0xb6, 0xa0, 0x2a, 0xd5, 0x15, 0x1d, 0x08, 0xac, 0x69, 0x10,
	0xff, 0xd4, 0x86, 0x3b, 0x60, 0xe9, 0x96, 0x38, 0x0e, 0x32, 0xa8, 0x50, 0x5d, 0x2a, 0x48, 0x6d,
	0x40, 0x40, 0x6f, 0x25, 0x52, 0xf9, 0x99, 0x07, 0x45, 0xed, 0xe4, 0xfa, 0x8c, 0xdc, 0x85, 0xc4,
	0x36, 0x38, 0x61, 0x6e, 0x34, 0xc9, 0x16, 0x28, 0x39, 0x31, 0x86, 0xed, 0x7f, 0x1a, 0xe4, 0x61,
	0xfe, 0xfe, 0xfb, 0x4e, 0x46, 0xdf, 0xe8, 0xd3, 0x0d, 0xb5, 0xf1, 0x0c, 0xfc, 0x4f, 0xdc, 0x20,
	0xf4, 0x0d, 0xd7, 0xc2, 0xe8, 0x36, 0x74, 0x6d, 0x64, 0x63, 0x87, 0x1b, 0xe8, 0x2e, 0x64, 0x1c,
	0xa3, 0xbb, 0xd0, 0x70, 0x79, 0x48, 0x03, 0x39, 0xe4, 0x9c, 0xbe, 0x93, 0x86, 0x36, 0x42, 0xd7,
	0x3e, 0x16, 0x81, 0x17, 0x22, 0xee, 0x22, 0x0e, 0x83, 0x07, 0x60, 0xbb, 0x6b, 0x38, 0x22, 0x0d,
	0x8b, 0x3a, 0x37, 0x42, 0x93, 0x93, 0x34, 0x9b, 0x69, 0x4c, 0x03, 0xe3, 0x31, 0x82, 0x48, 0x28,
	0xe1, 0xbd, 0x49, 0x04, 0xf9, 0x88, 0x20, 0x8d, 0x19, 0x23, 0x68, 0xff, 0xce, 0x7a, 0x73, 0x7f,
	0xd5, 0xb9, 0x19, 0x0d, 0x38, 0x3f, 0xa3, 0x01, 0x17, 0xfe, 0xd0, 0x80, 0x85, 0xe7, 0x0d, 0xb8,
	0xf8, 0x9c, 0x01, 0xc1, 0x98, 0x01, 0x3b, 0x60, 0xf9, 0xc8, 0x61, 0xa6, 0x46, 0xec, 0xa6, 0x4f,
	0x2c, 0x0c, 0x0f, 0xc0, 0x62, 0x4a, 0x19, 0x3b, 0x6d, 0xbb, 0x36, 0x7e, 0xbb, 0xd5, 0x8e, 0xe2,
	0x1c, 0x71, 0x93, 0x0a, 0x49, 0x4e, 0xb8, 0x05, 0x0a, 0x69, 0x2b, 0xb2, 0x32, 0x5d, 0xfa, 0xbf,
	0xf2, 0x59, 0x01, 0xc5, 0xeb, 0x64, 0xf6, 0x1a, 0xee, 0x4a, 0xaf, 0xe3, 0x00, 0xbe, 0x01, 0x0b,
	0x34, 0x5a, 0x96, 0x14, 0x35, 0x37, 0x2d, 0x65, 0x72, 0xcd, 0xc5, 0x29, 0x93, 0x23, 0xf0, 0x06,
	0x14, 0x9d, 0xfe, 0xf7, 0x83, 0x12, 0xa6, 0xac, 0x64, 0xda, 0x9d, 0xc2, 0x34, 0xfa, 0xc5, 0xc5,
	0xa4, 0xd0, 0x19, 0xc1, 0x71, 0x50, 0xf9, 0x9a, 0x05, 0x6b, 0x1a, 0xee, 0x9e, 0x33, 0x1b, 0x5f,
	0x31, 0xf1, 0xab, 0x61, 0xee, 0x13, 0x2b, 0x80, 0x1f, 0xc0, 0x7a, 0xdf, 0xed, 0x14, 0x77, 0x51,
	0xbf, 0x08, 0x65, 0x5a, 0xea, 0x09, 0xe5, 0xeb, 0xc5, 0xee, 0x84, 0x9e, 0x9c, 0x83, 0x55, 0x39,
	0x08, 0x4a, 0x6c, 0xe4, 0x89, 0xd1, 0x24, 0x15, 0xa9, 0xd3, 0xc6, 0x91, 0xcc, 0x30, 0x2e, 0x65,
	0xc5, 0x1a, 0xc0, 0x02, 0xa8, 0x81, 0xff, 0x4c, 0x6f, 0x48, 0x65, 0x6e, 0x36, 0x95, 0xcb, 0xa6,
	0x37, 0x20, 0x6f, 0x1f, 0xac, 0x7b, 0x3e, 0xf3, 0x58, 0x60, 0x38, 0xc8, 0xc7, 0x16, 0x26, 0x5d,
	0x8c, 0x38, 0xa1, 0x38, 0xbe, 0x7f, 0x8b, 0xc9, 0xa6, 0x1e, 0xed, 0x5d, 0x11, 0x8a, 0x0f, 0x6f,
	0xee, 0x1f, 0xcb, 0xca, 0xc3, 0x63, 0x59, 0xf9, 0xf1, 0x58, 0x56, 0x3e, 0x3d, 0x95, 0x33, 0x0f,
	0x4f, 0xe5, 0xcc, 0xb7, 0xa7, 0x72, 0xe6, 0xfd, 0x71, 0x8b, 0xf0, 0x76, 0x68, 0xd6, 0x2c, 0x46,
	0xeb, 0x97, 0xdc, 0xc7, 0x06, 0x6d, 0x10, 0x57, 0xdc, 0x33, 0x7b, 0xcd, 0xf4, 0xa5, 0x94, 0xf0,
	0x9e, 0xd5, 0x36, 0x88, 0x5b, 0x4f, 0xdf, 0xc4, 0x8f, 0xd1, 0xab, 0xc8, 0x7b, 0x1e, 0x0e, 0xcc,
	0x79, 0x09, 0xbf, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x58, 0x85, 0x76, 0x03, 0xac, 0x07, 0x00,
	0x00,
}

func (m *MEVMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MEVMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MEVMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillAmount != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.FillAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.ClobPairId != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x38
	}
	if m.MakerFeePpm != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.MakerFeePpm))
		i--
		dAtA[i] = 0x30
	}
	if m.MakerOrderIsBuy {
		i--
		if m.MakerOrderIsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MakerOrderSubticks != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.MakerOrderSubticks))
		i--
		dAtA[i] = 0x20
	}
	if m.MakerOrderSubaccountId != nil {
		{
			size, err := m.MakerOrderSubaccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMev(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.TakerFeePpm != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.TakerFeePpm))
		i--
		dAtA[i] = 0x10
	}
	if m.TakerOrderSubaccountId != nil {
		{
			size, err := m.TakerOrderSubaccountId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMev(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MEVLiquidationMatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MEVLiquidationMatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MEVLiquidationMatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FillAmount != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.FillAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.ClobPairId != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.ClobPairId))
		i--
		dAtA[i] = 0x48
	}
	if m.MakerFeePpm != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.MakerFeePpm))
		i--
		dAtA[i] = 0x40
	}
	if m.MakerOrderIsBuy {
		i--
		if m.MakerOrderIsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MakerOrderSubticks != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.MakerOrderSubticks))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.MakerOrderSubaccountId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMev(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.LiquidityFeeQuoteQuantums != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.LiquidityFeeQuoteQuantums))
		i--
		dAtA[i] = 0x20
	}
	if m.ValidatorFeeQuoteQuantums != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.ValidatorFeeQuoteQuantums))
		i--
		dAtA[i] = 0x18
	}
	if m.InsuranceFundDeltaQuoteQuantums != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.InsuranceFundDeltaQuoteQuantums))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.LiquidatedSubaccountId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMev(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ClobMidPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClobMidPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClobMidPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subticks != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.Subticks))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ClobPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMev(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ValidatorMevMatches) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorMevMatches) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorMevMatches) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidationMatches) > 0 {
		for iNdEx := len(m.LiquidationMatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidationMatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMev(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Matches) > 0 {
		for iNdEx := len(m.Matches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Matches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMev(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MevNodeToNodeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MevNodeToNodeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MevNodeToNodeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalReceiveTime != 0 {
		i = encodeVarintMev(dAtA, i, uint64(m.ProposalReceiveTime))
		i--
		dAtA[i] = 0x20
	}
	if m.BpMevMatches != nil {
		{
			size, err := m.BpMevMatches.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMev(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClobMidPrices) > 0 {
		for iNdEx := len(m.ClobMidPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClobMidPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMev(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ValidatorMevMatches != nil {
		{
			size, err := m.ValidatorMevMatches.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMev(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMev(dAtA []byte, offset int, v uint64) int {
	offset -= sovMev(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MEVMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TakerOrderSubaccountId != nil {
		l = m.TakerOrderSubaccountId.Size()
		n += 1 + l + sovMev(uint64(l))
	}
	if m.TakerFeePpm != 0 {
		n += 1 + sovMev(uint64(m.TakerFeePpm))
	}
	if m.MakerOrderSubaccountId != nil {
		l = m.MakerOrderSubaccountId.Size()
		n += 1 + l + sovMev(uint64(l))
	}
	if m.MakerOrderSubticks != 0 {
		n += 1 + sovMev(uint64(m.MakerOrderSubticks))
	}
	if m.MakerOrderIsBuy {
		n += 2
	}
	if m.MakerFeePpm != 0 {
		n += 1 + sovMev(uint64(m.MakerFeePpm))
	}
	if m.ClobPairId != 0 {
		n += 1 + sovMev(uint64(m.ClobPairId))
	}
	if m.FillAmount != 0 {
		n += 1 + sovMev(uint64(m.FillAmount))
	}
	return n
}

func (m *MEVLiquidationMatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidatedSubaccountId.Size()
	n += 1 + l + sovMev(uint64(l))
	if m.InsuranceFundDeltaQuoteQuantums != 0 {
		n += 1 + sovMev(uint64(m.InsuranceFundDeltaQuoteQuantums))
	}
	if m.ValidatorFeeQuoteQuantums != 0 {
		n += 1 + sovMev(uint64(m.ValidatorFeeQuoteQuantums))
	}
	if m.LiquidityFeeQuoteQuantums != 0 {
		n += 1 + sovMev(uint64(m.LiquidityFeeQuoteQuantums))
	}
	l = m.MakerOrderSubaccountId.Size()
	n += 1 + l + sovMev(uint64(l))
	if m.MakerOrderSubticks != 0 {
		n += 1 + sovMev(uint64(m.MakerOrderSubticks))
	}
	if m.MakerOrderIsBuy {
		n += 2
	}
	if m.MakerFeePpm != 0 {
		n += 1 + sovMev(uint64(m.MakerFeePpm))
	}
	if m.ClobPairId != 0 {
		n += 1 + sovMev(uint64(m.ClobPairId))
	}
	if m.FillAmount != 0 {
		n += 1 + sovMev(uint64(m.FillAmount))
	}
	return n
}

func (m *ClobMidPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClobPair.Size()
	n += 1 + l + sovMev(uint64(l))
	if m.Subticks != 0 {
		n += 1 + sovMev(uint64(m.Subticks))
	}
	return n
}

func (m *ValidatorMevMatches) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovMev(uint64(l))
		}
	}
	if len(m.LiquidationMatches) > 0 {
		for _, e := range m.LiquidationMatches {
			l = e.Size()
			n += 1 + l + sovMev(uint64(l))
		}
	}
	return n
}

func (m *MevNodeToNodeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorMevMatches != nil {
		l = m.ValidatorMevMatches.Size()
		n += 1 + l + sovMev(uint64(l))
	}
	if len(m.ClobMidPrices) > 0 {
		for _, e := range m.ClobMidPrices {
			l = e.Size()
			n += 1 + l + sovMev(uint64(l))
		}
	}
	if m.BpMevMatches != nil {
		l = m.BpMevMatches.Size()
		n += 1 + l + sovMev(uint64(l))
	}
	if m.ProposalReceiveTime != 0 {
		n += 1 + sovMev(uint64(m.ProposalReceiveTime))
	}
	return n
}

func sovMev(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMev(x uint64) (n int) {
	return sovMev(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MEVMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MEVMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MEVMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerOrderSubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TakerOrderSubaccountId == nil {
				m.TakerOrderSubaccountId = &types.SubaccountId{}
			}
			if err := m.TakerOrderSubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeePpm", wireType)
			}
			m.TakerFeePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakerFeePpm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderSubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MakerOrderSubaccountId == nil {
				m.MakerOrderSubaccountId = &types.SubaccountId{}
			}
			if err := m.MakerOrderSubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderSubticks", wireType)
			}
			m.MakerOrderSubticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerOrderSubticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderIsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakerOrderIsBuy = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeePpm", wireType)
			}
			m.MakerFeePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerFeePpm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillAmount", wireType)
			}
			m.FillAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MEVLiquidationMatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MEVLiquidationMatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MEVLiquidationMatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatedSubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatedSubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFundDeltaQuoteQuantums", wireType)
			}
			m.InsuranceFundDeltaQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsuranceFundDeltaQuoteQuantums |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorFeeQuoteQuantums", wireType)
			}
			m.ValidatorFeeQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorFeeQuoteQuantums |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityFeeQuoteQuantums", wireType)
			}
			m.LiquidityFeeQuoteQuantums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidityFeeQuoteQuantums |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderSubaccountId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerOrderSubaccountId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderSubticks", wireType)
			}
			m.MakerOrderSubticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerOrderSubticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerOrderIsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakerOrderIsBuy = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeePpm", wireType)
			}
			m.MakerFeePpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MakerFeePpm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPairId", wireType)
			}
			m.ClobPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClobPairId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FillAmount", wireType)
			}
			m.FillAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FillAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClobMidPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClobMidPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClobMidPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClobPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subticks", wireType)
			}
			m.Subticks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subticks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorMevMatches) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorMevMatches: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorMevMatches: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, MEVMatch{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationMatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationMatches = append(m.LiquidationMatches, MEVLiquidationMatch{})
			if err := m.LiquidationMatches[len(m.LiquidationMatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MevNodeToNodeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MevNodeToNodeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MevNodeToNodeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorMevMatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorMevMatches == nil {
				m.ValidatorMevMatches = &ValidatorMevMatches{}
			}
			if err := m.ValidatorMevMatches.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClobMidPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClobMidPrices = append(m.ClobMidPrices, ClobMidPrice{})
			if err := m.ClobMidPrices[len(m.ClobMidPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BpMevMatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BpMevMatches == nil {
				m.BpMevMatches = &ValidatorMevMatches{}
			}
			if err := m.BpMevMatches.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalReceiveTime", wireType)
			}
			m.ProposalReceiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalReceiveTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMev(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMev
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMev
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMev
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMev
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMev        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMev          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMev = fmt.Errorf("proto: unexpected end of group")
)
