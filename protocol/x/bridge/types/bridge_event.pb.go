// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: klyraprotocol/bridge/bridge_event.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BridgeEvent is a recognized event from the Ethereum blockchain.
type BridgeEvent struct {
	// The unique id of the Ethereum event log.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The tokens bridged.
	Coin types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin"`
	// The account address or module address to bridge to.
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// The Ethereum or klyra block height of the event.
	BlockHeight uint64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// True if the bridge event is for a deposit.bool
	IsDeposit bool `protobuf:"varint,5,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
}

func (m *BridgeEvent) Reset()         { *m = BridgeEvent{} }
func (m *BridgeEvent) String() string { return proto.CompactTextString(m) }
func (*BridgeEvent) ProtoMessage()    {}
func (*BridgeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b401a521148de216, []int{0}
}
func (m *BridgeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeEvent.Merge(m, src)
}
func (m *BridgeEvent) XXX_Size() int {
	return m.Size()
}
func (m *BridgeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeEvent proto.InternalMessageInfo

func (m *BridgeEvent) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BridgeEvent) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *BridgeEvent) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BridgeEvent) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BridgeEvent) GetIsDeposit() bool {
	if m != nil {
		return m.IsDeposit
	}
	return false
}

type BridgeWithdraw struct {
	// The amount of sdai to withdraw
	SdaiAmount string `protobuf:"bytes,1,opt,name=sdai_amount,json=sdaiAmount,proto3" json:"sdai_amount,omitempty"`
	// The klyra account that sdai is being withdrawn from
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// The eth address that the funds are being bridged to
	EthRecipient string `protobuf:"bytes,3,opt,name=eth_recipient,json=ethRecipient,proto3" json:"eth_recipient,omitempty"`
}

func (m *BridgeWithdraw) Reset()         { *m = BridgeWithdraw{} }
func (m *BridgeWithdraw) String() string { return proto.CompactTextString(m) }
func (*BridgeWithdraw) ProtoMessage()    {}
func (*BridgeWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_b401a521148de216, []int{1}
}
func (m *BridgeWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeWithdraw.Merge(m, src)
}
func (m *BridgeWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *BridgeWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeWithdraw proto.InternalMessageInfo

func (m *BridgeWithdraw) GetSdaiAmount() string {
	if m != nil {
		return m.SdaiAmount
	}
	return ""
}

func (m *BridgeWithdraw) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BridgeWithdraw) GetEthRecipient() string {
	if m != nil {
		return m.EthRecipient
	}
	return ""
}

func init() {
	proto.RegisterType((*BridgeEvent)(nil), "klyraprotocol.bridge.BridgeEvent")
	proto.RegisterType((*BridgeWithdraw)(nil), "klyraprotocol.bridge.BridgeWithdraw")
}

func init() {
	proto.RegisterFile("klyraprotocol/bridge/bridge_event.proto", fileDescriptor_b401a521148de216)
}

var fileDescriptor_b401a521148de216 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xeb, 0x52, 0x18, 0x75, 0xb7, 0x1d, 0xac, 0x1e, 0xb2, 0x49, 0x64, 0x61, 0x1c, 0xc8,
	0xa5, 0x89, 0xb6, 0x3d, 0xc1, 0x02, 0x4c, 0x1c, 0x91, 0x77, 0x40, 0xe2, 0x12, 0x1c, 0xdb, 0x4a,
	0x3e, 0xad, 0xb1, 0x23, 0xdb, 0x1b, 0xec, 0x2d, 0x78, 0x18, 0x1e, 0xa2, 0xc7, 0x8a, 0x13, 0x27,
	0x84, 0xda, 0x17, 0x41, 0xb1, 0x13, 0xa4, 0x9d, 0x92, 0xef, 0xf7, 0xfb, 0xe7, 0x1f, 0x7d, 0xb2,
	0xf1, 0xdb, 0xbb, 0xf5, 0xa3, 0x61, 0x9d, 0xd1, 0x4e, 0x73, 0xbd, 0xce, 0x2b, 0x03, 0xa2, 0x96,
	0xc3, 0xa3, 0x94, 0x0f, 0x52, 0xb9, 0xcc, 0x4b, 0xb2, 0x7c, 0x12, 0xcc, 0x42, 0xe2, 0x74, 0x59,
	0xeb, 0x5a, 0x7b, 0x98, 0xf7, 0x6f, 0x21, 0x7b, 0x7a, 0xc2, 0xb5, 0x6d, 0xb5, 0x2d, 0x83, 0x08,
	0xc3, 0xa0, 0xe2, 0x30, 0xe5, 0x15, 0xb3, 0x32, 0x7f, 0xb8, 0xa8, 0xa4, 0x63, 0x17, 0x39, 0xd7,
	0xa0, 0x82, 0x3f, 0xdf, 0x20, 0xbc, 0x28, 0x7c, 0xf7, 0x87, 0xfe, 0xe7, 0xe4, 0x18, 0x4f, 0x41,
	0x44, 0x28, 0x41, 0xe9, 0x11, 0x9d, 0x82, 0x20, 0x57, 0x78, 0xd6, 0xa7, 0xa3, 0x69, 0x82, 0xd2,
	0xc5, 0xe5, 0x49, 0x36, 0x94, 0xf7, 0x75, 0xd9, 0x50, 0x97, 0xbd, 0xd3, 0xa0, 0x8a, 0xd9, 0xe6,
	0xcf, 0xd9, 0x84, 0xfa, 0x30, 0xb9, 0xc4, 0x07, 0x4c, 0x08, 0x23, 0xad, 0x8d, 0x9e, 0x25, 0x28,
	0x9d, 0x17, 0xd1, 0xaf, 0x9f, 0xab, 0xe5, 0xf0, 0xe9, 0x75, 0x30, 0xb7, 0xce, 0x80, 0xaa, 0xe9,
	0x18, 0x24, 0xaf, 0xf1, 0x61, 0xb5, 0xd6, 0xfc, 0xae, 0x6c, 0x24, 0xd4, 0x8d, 0x8b, 0x66, 0x09,
	0x4a, 0x67, 0x74, 0xe1, 0xd9, 0x47, 0x8f, 0xc8, 0x2b, 0x8c, 0xc1, 0x96, 0x42, 0x76, 0xda, 0x82,
	0x8b, 0x9e, 0x27, 0x28, 0x7d, 0x49, 0xe7, 0x60, 0xdf, 0x07, 0x70, 0xde, 0xe1, 0xe3, 0xb0, 0xc9,
	0x67, 0x70, 0x8d, 0x30, 0xec, 0x1b, 0x39, 0xc3, 0x0b, 0x2b, 0x18, 0x94, 0xac, 0xd5, 0xf7, 0xca,
	0xf9, 0xad, 0xe6, 0x14, 0xf7, 0xe8, 0xda, 0x13, 0x12, 0xe1, 0x03, 0xc6, 0xb9, 0x97, 0x53, 0x2f,
	0xc7, 0x91, 0xbc, 0xc1, 0x47, 0xd2, 0x35, 0xa5, 0x91, 0x1c, 0x3a, 0x90, 0xca, 0x85, 0x45, 0xe8,
	0xa1, 0x74, 0x0d, 0x1d, 0x59, 0xf1, 0x75, 0xb3, 0x8b, 0xd1, 0x76, 0x17, 0xa3, 0xbf, 0xbb, 0x18,
	0xfd, 0xd8, 0xc7, 0x93, 0xed, 0x3e, 0x9e, 0xfc, 0xde, 0xc7, 0x93, 0x2f, 0x37, 0x35, 0xb8, 0xe6,
	0xbe, 0xca, 0xb8, 0x6e, 0xf3, 0x5b, 0x67, 0x24, 0x6b, 0x6f, 0x40, 0x31, 0xc5, 0xe5, 0xea, 0xd3,
	0x78, 0xf4, 0xd6, 0xe3, 0x15, 0x6f, 0x18, 0xa8, 0xfc, 0xff, 0x85, 0xf8, 0x3e, 0x5e, 0x09, 0xf7,
	0xd8, 0x49, 0x5b, 0xbd, 0xf0, 0xe2, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x26, 0xf0,
	0xd3, 0x37, 0x02, 0x00, 0x00,
}

func (m *BridgeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDeposit {
		i--
		if m.IsDeposit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBridgeEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBridgeEvent(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBridgeEvent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintBridgeEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EthRecipient) > 0 {
		i -= len(m.EthRecipient)
		copy(dAtA[i:], m.EthRecipient)
		i = encodeVarintBridgeEvent(dAtA, i, uint64(len(m.EthRecipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintBridgeEvent(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SdaiAmount) > 0 {
		i -= len(m.SdaiAmount)
		copy(dAtA[i:], m.SdaiAmount)
		i = encodeVarintBridgeEvent(dAtA, i, uint64(len(m.SdaiAmount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridgeEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridgeEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BridgeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBridgeEvent(uint64(m.Id))
	}
	l = m.Coin.Size()
	n += 1 + l + sovBridgeEvent(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBridgeEvent(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBridgeEvent(uint64(m.BlockHeight))
	}
	if m.IsDeposit {
		n += 2
	}
	return n
}

func (m *BridgeWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SdaiAmount)
	if l > 0 {
		n += 1 + l + sovBridgeEvent(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovBridgeEvent(uint64(l))
	}
	l = len(m.EthRecipient)
	if l > 0 {
		n += 1 + l + sovBridgeEvent(uint64(l))
	}
	return n
}

func sovBridgeEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridgeEvent(x uint64) (n int) {
	return sovBridgeEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BridgeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgeEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeposit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeposit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBridgeEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridgeEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdaiAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdaiAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridgeEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridgeEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridgeEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridgeEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridgeEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridgeEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridgeEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridgeEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridgeEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridgeEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridgeEvent = fmt.Errorf("proto: unexpected end of group")
)
