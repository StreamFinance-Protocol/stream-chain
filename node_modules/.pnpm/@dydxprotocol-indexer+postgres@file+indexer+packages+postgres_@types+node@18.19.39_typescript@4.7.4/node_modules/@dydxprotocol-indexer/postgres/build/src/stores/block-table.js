"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLatest = exports.findByBlockHeight = exports.create = exports.findAll = void 0;
const base_1 = require("@dydxprotocol-indexer/base");
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const block_model_1 = __importDefault(require("../models/block-model"));
const types_1 = require("../types");
async function findAll({ blockHeight, createdOnOrAfter, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        blockHeight,
        createdOnOrAfter,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(block_model_1.default, options);
    if (blockHeight !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.BlockColumns.blockHeight, blockHeight);
    }
    if (createdOnOrAfter !== undefined) {
        baseQuery = baseQuery.where(types_1.BlockColumns.time, '>=', createdOnOrAfter);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.BlockColumns.blockHeight, types_1.Ordering.ASC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(blockToCreate, options = { txId: undefined }) {
    return block_model_1.default.query(transaction_1.default.get(options.txId)).insert(blockToCreate).returning('*');
}
exports.create = create;
async function findByBlockHeight(blockHeight, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(block_model_1.default, options);
    return baseQuery
        .findById(blockHeight)
        .returning('*');
}
exports.findByBlockHeight = findByBlockHeight;
async function getLatest(options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(block_model_1.default, options);
    const results = await baseQuery
        .orderBy(types_1.BlockColumns.blockHeight, types_1.Ordering.DESC)
        .limit(1)
        .returning('*');
    const latestBlock = results[0];
    if (latestBlock === undefined) {
        base_1.logger.error({
            at: 'block-table#getLatest',
            message: 'Unable to find latest block',
        });
        throw new Error('Unable to find latest block');
    }
    return latestBlock;
}
exports.getLatest = getLatest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmVzL2Jsb2NrLXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHFEQUFvRDtBQUdwRCw0Q0FBd0Q7QUFDeEQsOERBQW9GO0FBQ3BGLHlFQUFpRDtBQUNqRCx3RUFBK0M7QUFDL0Msb0NBU2tCO0FBRVgsS0FBSyxVQUFVLE9BQU8sQ0FDM0IsRUFDRSxXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLEtBQUssR0FDWSxFQUNuQixjQUFnQyxFQUNoQyxVQUFtQixvQ0FBd0I7SUFFM0MsSUFBQSx3Q0FBdUIsRUFDckI7UUFDRSxXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLEtBQUs7S0FDUyxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUE2QixJQUFBLCtCQUFjLEVBQ3RELHFCQUFVLEVBQ1YsT0FBTyxDQUNSLENBQUM7SUFFRixJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7UUFDN0IsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsb0JBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDdEU7SUFFRCxJQUFJLGdCQUFnQixLQUFLLFNBQVMsRUFBRTtRQUNsQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxvQkFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztLQUN4RTtJQUVELElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDakMsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDN0MsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLE1BQU0sRUFDTixLQUFLLENBQ04sQ0FBQztTQUNIO0tBQ0Y7U0FBTTtRQUNMLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUMzQixvQkFBWSxDQUFDLFdBQVcsRUFDeEIsZ0JBQVEsQ0FBQyxHQUFHLENBQ2IsQ0FBQztLQUNIO0lBRUQsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO1FBQ3ZCLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsT0FBTyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFsREQsMEJBa0RDO0FBRU0sS0FBSyxVQUFVLE1BQU0sQ0FDMUIsYUFBZ0MsRUFDaEMsVUFBbUIsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0lBRXRDLE9BQU8scUJBQVUsQ0FBQyxLQUFLLENBQ3JCLHFCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDOUIsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFQRCx3QkFPQztBQUVNLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsV0FBbUIsRUFDbkIsVUFBbUIsb0NBQXdCO0lBRTNDLE1BQU0sU0FBUyxHQUE2QixJQUFBLCtCQUFjLEVBQ3hELHFCQUFVLEVBQ1YsT0FBTyxDQUNSLENBQUM7SUFDRixPQUFPLFNBQVM7U0FDYixRQUFRLENBQUMsV0FBVyxDQUFDO1NBQ3JCLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBWEQsOENBV0M7QUFFTSxLQUFLLFVBQVUsU0FBUyxDQUM3QixVQUFtQixvQ0FBd0I7SUFFM0MsTUFBTSxTQUFTLEdBQTZCLElBQUEsK0JBQWMsRUFDeEQscUJBQVUsRUFDVixPQUFPLENBQ1IsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFpQixNQUFNLFNBQVM7U0FDMUMsT0FBTyxDQUFDLG9CQUFZLENBQUMsV0FBVyxFQUFFLGdCQUFRLENBQUMsSUFBSSxDQUFDO1NBQ2hELEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDUixTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsTUFBTSxXQUFXLEdBQWtDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7UUFDN0IsYUFBTSxDQUFDLEtBQUssQ0FBQztZQUNYLEVBQUUsRUFBRSx1QkFBdUI7WUFDM0IsT0FBTyxFQUFFLDZCQUE2QjtTQUN2QyxDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7S0FDaEQ7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUNyQixDQUFDO0FBdEJELDhCQXNCQyJ9