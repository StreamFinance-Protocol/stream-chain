/// <reference types="long" />
import { SubaccountId, SubaccountIdSDKType } from "../subaccounts/subaccount";
import { ClobPair, ClobPairSDKType } from "./clob_pair";
import { Long } from "../../helpers";
import * as _m0 from "protobufjs/minimal";
/** MEVMatch represents all necessary data to calculate MEV for a regular match. */
export interface MEVMatch {
    takerOrderSubaccountId?: SubaccountId;
    takerFeePpm: number;
    makerOrderSubaccountId?: SubaccountId;
    makerOrderSubticks: Long;
    makerOrderIsBuy: boolean;
    makerFeePpm: number;
    clobPairId: number;
    fillAmount: Long;
}
/** MEVMatch represents all necessary data to calculate MEV for a regular match. */
export interface MEVMatchSDKType {
    taker_order_subaccount_id?: SubaccountIdSDKType;
    taker_fee_ppm: number;
    maker_order_subaccount_id?: SubaccountIdSDKType;
    maker_order_subticks: Long;
    maker_order_is_buy: boolean;
    maker_fee_ppm: number;
    clob_pair_id: number;
    fill_amount: Long;
}
/**
 * MEVLiquidationMatch represents all necessary data to calculate MEV for a
 * liquidation.
 */
export interface MEVLiquidationMatch {
    liquidatedSubaccountId?: SubaccountId;
    insuranceFundDeltaQuoteQuantums: Long;
    makerOrderSubaccountId?: SubaccountId;
    makerOrderSubticks: Long;
    makerOrderIsBuy: boolean;
    makerFeePpm: number;
    clobPairId: number;
    fillAmount: Long;
}
/**
 * MEVLiquidationMatch represents all necessary data to calculate MEV for a
 * liquidation.
 */
export interface MEVLiquidationMatchSDKType {
    liquidated_subaccount_id?: SubaccountIdSDKType;
    insurance_fund_delta_quote_quantums: Long;
    maker_order_subaccount_id?: SubaccountIdSDKType;
    maker_order_subticks: Long;
    maker_order_is_buy: boolean;
    maker_fee_ppm: number;
    clob_pair_id: number;
    fill_amount: Long;
}
/** ClobMidPrice contains the mid price of a CLOB pair, represented by it's ID. */
export interface ClobMidPrice {
    clobPair?: ClobPair;
    subticks: Long;
}
/** ClobMidPrice contains the mid price of a CLOB pair, represented by it's ID. */
export interface ClobMidPriceSDKType {
    clob_pair?: ClobPairSDKType;
    subticks: Long;
}
/**
 * ValidatorMevMatches contains all matches from the validator's local
 * operations queue.
 */
export interface ValidatorMevMatches {
    matches: MEVMatch[];
    liquidationMatches: MEVLiquidationMatch[];
}
/**
 * ValidatorMevMatches contains all matches from the validator's local
 * operations queue.
 */
export interface ValidatorMevMatchesSDKType {
    matches: MEVMatchSDKType[];
    liquidation_matches: MEVLiquidationMatchSDKType[];
}
/**
 * MevNodeToNodeMetrics is a data structure for encapsulating all MEV node <>
 * node metrics.
 */
export interface MevNodeToNodeMetrics {
    validatorMevMatches?: ValidatorMevMatches;
    clobMidPrices: ClobMidPrice[];
    bpMevMatches?: ValidatorMevMatches;
    proposalReceiveTime: Long;
}
/**
 * MevNodeToNodeMetrics is a data structure for encapsulating all MEV node <>
 * node metrics.
 */
export interface MevNodeToNodeMetricsSDKType {
    validator_mev_matches?: ValidatorMevMatchesSDKType;
    clob_mid_prices: ClobMidPriceSDKType[];
    bp_mev_matches?: ValidatorMevMatchesSDKType;
    proposal_receive_time: Long;
}
export declare const MEVMatch: {
    encode(message: MEVMatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MEVMatch;
    fromPartial(object: {
        takerOrderSubaccountId?: {
            owner?: string | undefined;
            number?: number | undefined;
        } | undefined;
        takerFeePpm?: number | undefined;
        makerOrderSubaccountId?: {
            owner?: string | undefined;
            number?: number | undefined;
        } | undefined;
        makerOrderSubticks?: string | number | Long.Long | undefined;
        makerOrderIsBuy?: boolean | undefined;
        makerFeePpm?: number | undefined;
        clobPairId?: number | undefined;
        fillAmount?: string | number | Long.Long | undefined;
    }): MEVMatch;
};
export declare const MEVLiquidationMatch: {
    encode(message: MEVLiquidationMatch, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MEVLiquidationMatch;
    fromPartial(object: {
        liquidatedSubaccountId?: {
            owner?: string | undefined;
            number?: number | undefined;
        } | undefined;
        insuranceFundDeltaQuoteQuantums?: string | number | Long.Long | undefined;
        makerOrderSubaccountId?: {
            owner?: string | undefined;
            number?: number | undefined;
        } | undefined;
        makerOrderSubticks?: string | number | Long.Long | undefined;
        makerOrderIsBuy?: boolean | undefined;
        makerFeePpm?: number | undefined;
        clobPairId?: number | undefined;
        fillAmount?: string | number | Long.Long | undefined;
    }): MEVLiquidationMatch;
};
export declare const ClobMidPrice: {
    encode(message: ClobMidPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ClobMidPrice;
    fromPartial(object: {
        clobPair?: {
            id?: number | undefined;
            perpetualClobMetadata?: {
                perpetualId?: number | undefined;
            } | undefined;
            spotClobMetadata?: {
                baseAssetId?: number | undefined;
                quoteAssetId?: number | undefined;
            } | undefined;
            stepBaseQuantums?: string | number | Long.Long | undefined;
            subticksPerTick?: number | undefined;
            quantumConversionExponent?: number | undefined;
            status?: import("./clob_pair").ClobPair_Status | undefined;
        } | undefined;
        subticks?: string | number | Long.Long | undefined;
    }): ClobMidPrice;
};
export declare const ValidatorMevMatches: {
    encode(message: ValidatorMevMatches, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ValidatorMevMatches;
    fromPartial(object: {
        matches?: {
            takerOrderSubaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            takerFeePpm?: number | undefined;
            makerOrderSubaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            makerOrderSubticks?: string | number | Long.Long | undefined;
            makerOrderIsBuy?: boolean | undefined;
            makerFeePpm?: number | undefined;
            clobPairId?: number | undefined;
            fillAmount?: string | number | Long.Long | undefined;
        }[] | undefined;
        liquidationMatches?: {
            liquidatedSubaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            insuranceFundDeltaQuoteQuantums?: string | number | Long.Long | undefined;
            makerOrderSubaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            makerOrderSubticks?: string | number | Long.Long | undefined;
            makerOrderIsBuy?: boolean | undefined;
            makerFeePpm?: number | undefined;
            clobPairId?: number | undefined;
            fillAmount?: string | number | Long.Long | undefined;
        }[] | undefined;
    }): ValidatorMevMatches;
};
export declare const MevNodeToNodeMetrics: {
    encode(message: MevNodeToNodeMetrics, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): MevNodeToNodeMetrics;
    fromPartial(object: {
        validatorMevMatches?: {
            matches?: {
                takerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                takerFeePpm?: number | undefined;
                makerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                makerOrderSubticks?: string | number | Long.Long | undefined;
                makerOrderIsBuy?: boolean | undefined;
                makerFeePpm?: number | undefined;
                clobPairId?: number | undefined;
                fillAmount?: string | number | Long.Long | undefined;
            }[] | undefined;
            liquidationMatches?: {
                liquidatedSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                insuranceFundDeltaQuoteQuantums?: string | number | Long.Long | undefined;
                makerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                makerOrderSubticks?: string | number | Long.Long | undefined;
                makerOrderIsBuy?: boolean | undefined;
                makerFeePpm?: number | undefined;
                clobPairId?: number | undefined;
                fillAmount?: string | number | Long.Long | undefined;
            }[] | undefined;
        } | undefined;
        clobMidPrices?: {
            clobPair?: {
                id?: number | undefined;
                perpetualClobMetadata?: {
                    perpetualId?: number | undefined;
                } | undefined;
                spotClobMetadata?: {
                    baseAssetId?: number | undefined;
                    quoteAssetId?: number | undefined;
                } | undefined;
                stepBaseQuantums?: string | number | Long.Long | undefined;
                subticksPerTick?: number | undefined;
                quantumConversionExponent?: number | undefined;
                status?: import("./clob_pair").ClobPair_Status | undefined;
            } | undefined;
            subticks?: string | number | Long.Long | undefined;
        }[] | undefined;
        bpMevMatches?: {
            matches?: {
                takerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                takerFeePpm?: number | undefined;
                makerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                makerOrderSubticks?: string | number | Long.Long | undefined;
                makerOrderIsBuy?: boolean | undefined;
                makerFeePpm?: number | undefined;
                clobPairId?: number | undefined;
                fillAmount?: string | number | Long.Long | undefined;
            }[] | undefined;
            liquidationMatches?: {
                liquidatedSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                insuranceFundDeltaQuoteQuantums?: string | number | Long.Long | undefined;
                makerOrderSubaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                makerOrderSubticks?: string | number | Long.Long | undefined;
                makerOrderIsBuy?: boolean | undefined;
                makerFeePpm?: number | undefined;
                clobPairId?: number | undefined;
                fillAmount?: string | number | Long.Long | undefined;
            }[] | undefined;
        } | undefined;
        proposalReceiveTime?: string | number | Long.Long | undefined;
    }): MevNodeToNodeMetrics;
};
