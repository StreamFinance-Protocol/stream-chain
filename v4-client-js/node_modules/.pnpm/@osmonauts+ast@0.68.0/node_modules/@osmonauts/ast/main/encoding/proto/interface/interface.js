"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProtoType = exports.createCreateProtoType = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../../../utils");

var _types2 = require("../types");

var _types3 = require("../../types");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getProtoField = function getProtoField(context, field) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _types3.createProtoTypeOptionsDefaults;
  var ast = null;
  ast = (0, _types3.getFieldTypeReference)(context, field, options);

  if (field.rule === 'repeated') {
    ast = t.tsArrayType(ast);
  }

  if (field.keyType) {
    ast = t.tsUnionType([t.tsTypeLiteral([t.tsIndexSignature([(0, _utils.identifier)('key', t.tsTypeAnnotation((0, _types3.getTSType)(context, field.keyType)))], t.tsTypeAnnotation(ast))])]);
  }

  return ast;
};

var createProtoType = function createProtoType(context, name, proto) {
  var _proto$options;

  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _types3.createProtoTypeOptionsDefaults;
  var oneOfs = (0, _types2.getOneOfs)(proto); // MARKED AS COSMOS SDK specific code

  var optionalityMap = {}; // if a param is found to be a route parameter, we assume it's required
  // if a param is found to be a query parameter, we assume it's optional

  if (context.pluginValue('prototypes.optionalQueryParams') && context.store.requests[name]) {
    var svc = context.store.requests[name];

    if (svc.info) {
      svc.info.queryParams.map(function (param) {
        optionalityMap[param] = true;
      });
    }
  } // hard-code optionality for pagination


  if (context.pluginValue('prototypes.optionalPageRequests')) {
    if (context.ref.proto["package"] === 'cosmos.base.query.v1beta1') {
      if (name === 'PageRequest') {
        optionalityMap['key'] = true;
        optionalityMap['offset'] = true;
        optionalityMap['limit'] = true;
        optionalityMap['count_total'] = true;
        optionalityMap['countTotal'] = true;
        optionalityMap['reverse'] = true;
      }

      if (name === 'PageResponse') {
        optionalityMap['next_key'] = true;
        optionalityMap['nextKey'] = true;
      }
    }
  }

  var MsgName = (0, _types3.getMessageName)(name, options); // declaration

  var declaration = t.exportNamedDeclaration(t.tsInterfaceDeclaration(t.identifier(MsgName), null, [], t.tsInterfaceBody(Object.keys(proto.fields).reduce(function (m, fieldName) {
    var _field$options$Teles, _field$options, _field$options2;

    var isOneOf = oneOfs.includes(fieldName);
    var field = proto.fields[fieldName]; // optionalityMap is coupled to API requests

    var orig = (_field$options$Teles = (_field$options = field.options) === null || _field$options === void 0 ? void 0 : _field$options['(telescope:orig)']) !== null && _field$options$Teles !== void 0 ? _field$options$Teles : fieldName;
    var optional = false;

    if (optionalityMap[orig]) {
      optional = true;
    }

    var fieldNameWithCase = options.useOriginalCase ? orig : fieldName;
    var propSig = (0, _utils.tsPropertySignature)(t.identifier(fieldNameWithCase), t.tsTypeAnnotation(getProtoField(context, field, options)), optional || (0, _types2.getFieldOptionality)(context, field, isOneOf));
    var comments = [];

    if (field.comment) {
      comments.push((0, _utils.makeCommentBlock)(field.comment));
    }

    if ((_field$options2 = field.options) !== null && _field$options2 !== void 0 && _field$options2.deprecated) {
      comments.push((0, _utils.makeCommentBlock)('@deprecated'));
    }

    if (comments.length) {
      propSig.leadingComments = comments;
    }

    m.push(propSig);
    return m;
  }, []))));
  var comments = [];

  if (proto.comment) {
    comments.push((0, _utils.makeCommentBlock)(proto.comment));
  }

  if ((_proto$options = proto.options) !== null && _proto$options !== void 0 && _proto$options.deprecated) {
    comments.push((0, _utils.makeCommentBlock)('@deprecated'));
  }

  if (comments.length) {
    declaration.leadingComments = comments;
  }

  return declaration;
};

exports.createProtoType = createProtoType;

var createCreateProtoType = function createCreateProtoType(context, name, proto) {
  var oneOfs = (0, _types2.getOneOfs)(proto);
  var fields = Object.keys(proto.fields).map(function (key) {
    var isOneOf = oneOfs.includes(key);
    var isOptional = (0, _types2.getFieldOptionality)(context, proto.fields[key], isOneOf);
    return _objectSpread(_objectSpread({
      name: key
    }, proto.fields[key]), {}, {
      isOneOf: isOneOf,
      isOptional: isOptional
    });
  }).map(function (field) {
    return t.objectProperty(t.identifier(field.name), (0, _types3.getDefaultTSTypeFromProtoType)(context, field, field.isOneOf));
  });
  return (0, _utils.functionDeclaration)(t.identifier((0, _types2.getBaseCreateTypeFuncName)(name)), [], t.blockStatement([t.returnStatement(t.objectExpression((0, _toConsumableArray2["default"])(fields)))]), false, false, t.tsTypeAnnotation(t.tsTypeReference(t.identifier(name))));
};

exports.createCreateProtoType = createCreateProtoType;