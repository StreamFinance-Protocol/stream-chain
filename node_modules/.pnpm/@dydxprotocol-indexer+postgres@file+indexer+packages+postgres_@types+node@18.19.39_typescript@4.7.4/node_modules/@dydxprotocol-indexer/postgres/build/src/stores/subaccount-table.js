"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = exports.upsert = exports.findById = exports.create = exports.getSubaccountsWithTransfers = exports.findAll = exports.subaccountIdToUuid = exports.uuid = void 0;
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const subaccount_model_1 = __importDefault(require("../models/subaccount-model"));
const types_1 = require("../types");
function uuid(address, subaccountNumber) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${address}-${subaccountNumber}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
function subaccountIdToUuid(subaccountId) {
    return uuid(subaccountId.owner, subaccountId.number);
}
exports.subaccountIdToUuid = subaccountIdToUuid;
async function findAll({ id, address, subaccountNumber, updatedBeforeOrAt, updatedOnOrAfter, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        address,
        subaccountNumber,
        updatedBeforeOrAt,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(subaccount_model_1.default, options);
    if (id) {
        baseQuery = baseQuery.whereIn(types_1.SubaccountColumns.id, id);
    }
    if (address) {
        baseQuery = baseQuery.where(types_1.SubaccountColumns.address, address);
    }
    if (subaccountNumber) {
        baseQuery = baseQuery.where(types_1.SubaccountColumns.subaccountNumber, subaccountNumber);
    }
    if (updatedBeforeOrAt) {
        baseQuery = baseQuery.where(types_1.SubaccountColumns.updatedAt, '<=', updatedBeforeOrAt);
    }
    if (updatedOnOrAfter) {
        baseQuery = baseQuery.where(types_1.SubaccountColumns.updatedAt, '>=', updatedOnOrAfter);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.SubaccountColumns.address, types_1.Ordering.ASC).orderBy(types_1.SubaccountColumns.subaccountNumber, types_1.Ordering.ASC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function getSubaccountsWithTransfers(createdBeforeOrAtHeight, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const queryString = `
    SELECT *
    FROM subaccounts
    WHERE id IN (
      SELECT "senderSubaccountId" FROM transfers
      WHERE "createdAtHeight" <= '${createdBeforeOrAtHeight}'
      UNION
      SELECT "recipientSubaccountId" FROM transfers
      WHERE "createdAtHeight" <= '${createdBeforeOrAtHeight}'
    )
  `;
    const result = await (0, stores_helpers_1.rawQuery)(queryString, options);
    return result.rows;
}
exports.getSubaccountsWithTransfers = getSubaccountsWithTransfers;
async function create(subaccountToCreate, options = { txId: undefined }) {
    return subaccount_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(subaccountToCreate.address, subaccountToCreate.subaccountNumber),
        ...subaccountToCreate,
    }).returning('*');
}
exports.create = create;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(subaccount_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function upsert(subaccountToUpsert, options = { txId: undefined }) {
    const { address, subaccountNumber, } = subaccountToUpsert;
    const createdUuid = uuid(address, subaccountNumber);
    const subaccounts = await subaccount_model_1.default.query(transaction_1.default.get(options.txId)).upsert({
        ...subaccountToUpsert,
        id: createdUuid,
    }).returning('*');
    // should only ever be one subaccount
    return subaccounts[0];
}
exports.upsert = upsert;
async function update({ id, ...fields }, options = { txId: undefined }) {
    const subaccount = await subaccount_model_1.default.query(transaction_1.default.get(options.txId)).findById(id);
    const updatedSubaccount = await subaccount.$query().patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of Subaccounts.
    return updatedSubaccount;
}
exports.update = update;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViYWNjb3VudC10YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvc3ViYWNjb3VudC10YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFHQSw0Q0FBK0U7QUFDL0UsOERBSW1DO0FBQ25DLHlFQUFpRDtBQUNqRCwwQ0FBMEM7QUFDMUMsa0ZBQXlEO0FBQ3pELG9DQVVrQjtBQUVsQixTQUFnQixJQUFJLENBQUMsT0FBZSxFQUFFLGdCQUF3QjtJQUM1RCxzRUFBc0U7SUFDdEUsT0FBTyxJQUFBLGNBQU8sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxJQUFJLGdCQUFnQixFQUFFLEVBQUUsaUNBQXFCLENBQUMsQ0FBQyxDQUFDO0FBQ3ZGLENBQUM7QUFIRCxvQkFHQztBQUVELFNBQWdCLGtCQUFrQixDQUFDLFlBQWlDO0lBQ2xFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFGRCxnREFFQztBQUVNLEtBQUssVUFBVSxPQUFPLENBQzNCLEVBQ0UsRUFBRSxFQUNGLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixLQUFLLEdBQ2lCLEVBQ3hCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEVBQUU7UUFDRixPQUFPO1FBQ1AsZ0JBQWdCO1FBQ2hCLGlCQUFpQjtRQUNqQixLQUFLO0tBQ1MsRUFDaEIsY0FBYyxDQUNmLENBQUM7SUFFRixJQUFJLFNBQVMsR0FBa0MsSUFBQSwrQkFBYyxFQUMzRCwwQkFBZSxFQUNmLE9BQU8sQ0FDUixDQUFDO0lBRUYsSUFBSSxFQUFFLEVBQUU7UUFDTixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyx5QkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENB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