"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const BlockTable = __importStar(require("../../src/stores/block-table"));
const TendermintEventTable = __importStar(require("../../src/stores/tendermint-event-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const constants_1 = require("../helpers/constants");
describe('TendermintEvent store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    beforeEach(async () => {
        await Promise.all([
            BlockTable.create(constants_1.defaultBlock),
            BlockTable.create(constants_1.defaultBlock2),
        ]);
    });
    it('Successfully creates a TendermintEvent', async () => {
        await TendermintEventTable.create(constants_1.defaultTendermintEvent);
    });
    it('Successfully finds all TendermintEvents', async () => {
        await Promise.all([
            TendermintEventTable.create(constants_1.defaultTendermintEvent),
            TendermintEventTable.create({
                ...constants_1.defaultTendermintEvent,
                blockHeight: '2',
            }),
        ]);
        const tendermintEvents = await TendermintEventTable.findAll({}, [], { readReplica: true });
        expect(tendermintEvents.length).toEqual(2);
        expect(tendermintEvents[0]).toEqual(expect.objectContaining(constants_1.defaultTendermintEvent));
        expect(tendermintEvents[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultTendermintEvent,
            blockHeight: '2',
        }));
    });
    it('Successfully finds TendermintEvent with block height', async () => {
        await Promise.all([
            TendermintEventTable.create(constants_1.defaultTendermintEvent),
            TendermintEventTable.create({
                ...constants_1.defaultTendermintEvent,
                blockHeight: '2',
            }),
        ]);
        const tendermintEvents = await TendermintEventTable.findAll({
            blockHeight: ['1'],
        }, [], { readReplica: true });
        expect(tendermintEvents.length).toEqual(1);
        expect(tendermintEvents[0]).toEqual(expect.objectContaining(constants_1.defaultTendermintEvent));
    });
    it('Successfully finds TendermintEvent with block height and transaction index', async () => {
        await Promise.all([
            TendermintEventTable.create(constants_1.defaultTendermintEvent),
            TendermintEventTable.create({
                ...constants_1.defaultTendermintEvent,
                blockHeight: '2',
            }),
        ]);
        const tendermintEvents = await TendermintEventTable.findAll({
            blockHeight: ['1'],
            transactionIndex: [-1],
        }, [], { readReplica: true });
        expect(tendermintEvents.length).toEqual(1);
        expect(tendermintEvents[0]).toEqual(expect.objectContaining(constants_1.defaultTendermintEvent));
    });
    it('Successfully finds a TendermintEvent', async () => {
        await TendermintEventTable.create(constants_1.defaultTendermintEvent);
        const tendermintEvent = await TendermintEventTable.findById(constants_1.defaultTendermintEventId);
        expect(tendermintEvent).toEqual(expect.objectContaining(constants_1.defaultTendermintEvent));
    });
    it('Unable finds a TendermintEvent', async () => {
        const tendermintEvent = await TendermintEventTable.findById(constants_1.defaultTendermintEventId);
        expect(tendermintEvent).toEqual(undefined);
    });
    it('Event ids are sorted', async () => {
        // Create tendermint events with 1 <= blockHeight <= 10, -2 <= transactionIndex <= 8,
        // 0 <= eventIndex <= 9.
        const promises = [];
        const expectedEventIds = [];
        for (let blockHeight = 1; blockHeight <= 10; blockHeight += 1) {
            if (blockHeight >= 3) {
                await BlockTable.create({
                    ...constants_1.defaultBlock,
                    blockHeight: blockHeight.toString(),
                });
            }
            for (let transactionIndex = -2; transactionIndex <= 8; transactionIndex += 1) {
                for (let eventIndex = 0; eventIndex <= 9; eventIndex += 1) {
                    promises.push(TendermintEventTable.create({
                        blockHeight: blockHeight.toString(),
                        transactionIndex,
                        eventIndex,
                    }));
                    expectedEventIds.push(TendermintEventTable.createEventId(blockHeight.toString(), transactionIndex, eventIndex).toString('hex'));
                }
            }
        }
        await Promise.all(promises);
        // by default, order is by id asc.
        const tendermintEvents = await TendermintEventTable.findAll({}, [], { readReplica: true });
        const eventIds = tendermintEvents.map((event) => event.id.toString('hex'));
        expect(eventIds).toEqual(expectedEventIds);
    });
    it.each([
        ['different block height, a < b', '5', 2, 2, '6', 2, 2, -1],
        ['different transaction index, a < b', '6', 1, 2, '6', 2, 2, -1],
        ['different event index, a < b', '6', 1, 1, '6', 1, 2, -1],
        ['different block height, a > b', '7', 2, 2, '6', 2, 2, 1],
        ['different transaction index, a > b', '6', 3, 2, '6', 2, 2, 1],
        ['different event index, a > b', '6', 1, 3, '6', 1, 2, 1],
        ['a === b', '5', 3, 2, '5', 3, 2, 0],
    ])('Compares tendermint events: %s', (_name, blockHeightA, transactionIndexA, eventIndexA, blockHeightB, transactionIndexB, eventIndexB, expectedResult) => {
        const tendermintEventA = {
            id: TendermintEventTable.createEventId(blockHeightA, transactionIndexA, eventIndexA),
            blockHeight: blockHeightA,
            transactionIndex: transactionIndexA,
            eventIndex: eventIndexA,
        };
        const tendermintEventB = {
            id: TendermintEventTable.createEventId(blockHeightB, transactionIndexB, eventIndexB),
            blockHeight: blockHeightB,
            transactionIndex: transactionIndexB,
            eventIndex: eventIndexB,
        };
        expect(TendermintEventTable.compare(tendermintEventA, tendermintEventB))
            .toEqual(expectedResult);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuZGVybWludC1ldmVudC10YWJsZS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vX190ZXN0c19fL3N0b3Jlcy90ZW5kZXJtaW50LWV2ZW50LXRhYmxlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBLHlFQUEyRDtBQUMzRCw4RkFBZ0Y7QUFDaEYsNkRBSXNDO0FBQ3RDLG9EQUU4QjtBQUU5QixRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsb0JBQU8sR0FBRSxDQUFDO0lBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sSUFBQSxzQkFBUyxHQUFFLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbEIsTUFBTSxJQUFBLHFCQUFRLEdBQUUsQ0FBQztJQUNuQixDQUFDLENBQUMsQ0FBQztJQUVILFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDaEIsVUFBVSxDQUFDLE1BQU0sQ0FBQyx3QkFBWSxDQUFDO1lBQy9CLFVBQVUsQ0FBQyxNQUFNLENBQUMseUJBQWEsQ0FBQztTQUNqQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN0RCxNQUFNLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxrQ0FBc0IsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZELE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUNoQixvQkFBb0IsQ0FB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