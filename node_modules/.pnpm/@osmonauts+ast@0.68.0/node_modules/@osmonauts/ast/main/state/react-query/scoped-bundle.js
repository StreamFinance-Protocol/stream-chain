"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpcHookTmNestedImportObject = exports.rpcHookRecursiveObjectProps = exports.rpcHookNewTmRequire = exports.rpcHookFuncArguments = exports.rpcHookClassArguments = exports.createScopedRpcHookFactory = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _toArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toArray"));

var t = _interopRequireWildcard(require("@babel/types"));

var _utils = require("../../utils");

var _utils2 = require("@osmonauts/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var rpcHookFuncArguments = function rpcHookFuncArguments() {
  return [(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpc'), t.tsTypeAnnotation(t.tsTypeReference(t.identifier('Rpc'))))])))];
};

exports.rpcHookFuncArguments = rpcHookFuncArguments;

var rpcHookClassArguments = function rpcHookClassArguments() {
  return [t.objectExpression([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)])];
};

exports.rpcHookClassArguments = rpcHookClassArguments;

var rpcHookNewTmRequire = function rpcHookNewTmRequire(imports, path, methodName) {
  imports.push({
    as: (0, _utils2.variableSlug)(path),
    path: path
  });
  return t.callExpression(t.memberExpression(t.identifier((0, _utils2.variableSlug)(path)), t.identifier(methodName)), [t.identifier('rpc')]);
};

exports.rpcHookNewTmRequire = rpcHookNewTmRequire;

var rpcHookRecursiveObjectProps = function rpcHookRecursiveObjectProps(names, leaf) {
  var _names = (0, _toArray2["default"])(names),
      name = _names[0],
      rest = _names.slice(1);

  var baseComponent;

  if (names.length === 1) {
    baseComponent = leaf ? leaf : t.identifier(name);
  } else {
    baseComponent = rpcHookRecursiveObjectProps(rest, leaf);
  }

  return t.objectExpression([t.objectProperty(t.identifier(name), baseComponent)]);
};

exports.rpcHookRecursiveObjectProps = rpcHookRecursiveObjectProps;

var rpcHookTmNestedImportObject = function rpcHookTmNestedImportObject(imports, obj, methodName) {
  if (typeof obj === 'string') {
    return rpcHookNewTmRequire(imports, obj, methodName);
  }

  var keys = Object.keys(obj);
  return t.objectExpression(keys.map(function (name) {
    return t.objectProperty(t.identifier(name), rpcHookTmNestedImportObject(imports, obj[name], methodName));
  }));
};

exports.rpcHookTmNestedImportObject = rpcHookTmNestedImportObject;

var createScopedRpcHookFactory = function createScopedRpcHookFactory(context, obj, identifier) {
  context.addUtil('ProtobufRpcClient');
  var hookImports = [];
  var ast = t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator( // createRPCQueryHooks
  t.identifier(identifier), t.arrowFunctionExpression([(0, _utils.objectPattern)([t.objectProperty(t.identifier('rpc'), t.identifier('rpc'), false, true)], t.tsTypeAnnotation(t.tsTypeLiteral([t.tsPropertySignature(t.identifier('rpc'), t.tsTypeAnnotation(t.tsUnionType([t.tsTypeReference(t.identifier('ProtobufRpcClient')), t.tsUndefinedKeyword()])))])))], t.blockStatement([t.returnStatement(rpcHookTmNestedImportObject(hookImports, obj, 'createRpcQueryHooks'))]), false))]));
  var imports = hookImports.map(function (hookport) {
    return {
      "type": "ImportDeclaration",
      "importKind": "value",
      "specifiers": [{
        "type": "ImportNamespaceSpecifier",
        "local": {
          "type": "Identifier",
          "name": hookport.as
        }
      }],
      "source": {
        "type": "StringLiteral",
        "value": hookport.path
      }
    };
  });
  return [].concat((0, _toConsumableArray2["default"])(imports), [ast]);
};

exports.createScopedRpcHookFactory = createScopedRpcHookFactory;