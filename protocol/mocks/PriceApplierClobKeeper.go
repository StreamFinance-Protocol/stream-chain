// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	keeper "github.com/StreamFinance-Protocol/stream-chain/protocol/x/clob/keeper"
	clobtypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/clob/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// PriceApplierClobKeeper is an autogenerated mock type for the PriceApplierClobKeeper type
type PriceApplierClobKeeper struct {
	mock.Mock
}

// GetClobMetadata provides a mock function with given fields: ctx
func (_m *PriceApplierClobKeeper) GetClobMetadata(ctx types.Context) map[clobtypes.ClobPairId]keeper.ClobMetadata {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetClobMetadata")
	}

	var r0 map[clobtypes.ClobPairId]keeper.ClobMetadata
	if rf, ok := ret.Get(0).(func(types.Context) map[clobtypes.ClobPairId]keeper.ClobMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[clobtypes.ClobPairId]keeper.ClobMetadata)
		}
	}

	return r0
}

// NewPriceApplierClobKeeper creates a new instance of PriceApplierClobKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceApplierClobKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceApplierClobKeeper {
	mock := &PriceApplierClobKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
