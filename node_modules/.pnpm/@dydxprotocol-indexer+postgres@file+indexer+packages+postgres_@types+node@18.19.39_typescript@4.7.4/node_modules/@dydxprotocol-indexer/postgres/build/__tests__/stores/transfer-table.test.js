"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const TransferTable = __importStar(require("../../src/stores/transfer-table"));
const SubaccountTable = __importStar(require("../../src/stores/subaccount-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const constants_1 = require("../helpers/constants");
const big_js_1 = __importDefault(require("big.js"));
const objection_1 = require("objection");
describe('Transfer store', () => {
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
    });
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates a Transfer', async () => {
        await TransferTable.create(constants_1.defaultTransfer);
    });
    it('Successfully creates multiple transfers', async () => {
        const transfer2 = {
            senderSubaccountId: constants_1.defaultSubaccountId2,
            recipientSubaccountId: constants_1.defaultSubaccountId,
            assetId: constants_1.defaultAsset2.id,
            size: '5',
            eventId: constants_1.defaultTendermintEventId2,
            transactionHash: '',
            createdAt: constants_1.createdDateTime.toISO(),
            createdAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(transfer2),
        ]);
        const transfers = await TransferTable.findAll({}, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(2);
        expect(transfers[0]).toEqual(expect.objectContaining(constants_1.defaultTransfer));
        expect(transfers[1]).toEqual(expect.objectContaining(transfer2));
    });
    it('Successfully finds all Transfers', async () => {
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create({
                ...constants_1.defaultTransfer,
                eventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const transfers = await TransferTable.findAll({}, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(2);
        expect(transfers[0]).toEqual(expect.objectContaining(constants_1.defaultTransfer));
        expect(transfers[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultTransfer,
            eventId: constants_1.defaultTendermintEventId2,
        }));
    });
    it('Successfully finds all transfers to and from subaccount', async () => {
        const transfer2 = {
            senderSubaccountId: constants_1.defaultSubaccountId2,
            recipientSubaccountId: constants_1.defaultSubaccountId,
            assetId: constants_1.defaultAsset2.id,
            size: '5',
            eventId: constants_1.defaultTendermintEventId2,
            transactionHash: '',
            createdAt: constants_1.createdDateTime.toISO(),
            createdAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(transfer2),
        ]);
        const transfers = await TransferTable.findAllToOrFromSubaccountId({ subaccountId: [constants_1.defaultSubaccountId] }, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(2);
        expect(transfers[0]).toEqual(expect.objectContaining(constants_1.defaultTransfer));
        expect(transfers[1]).toEqual(expect.objectContaining(transfer2));
    });
    it('Successfully finds all transfers to and from subaccount w/ event id', async () => {
        const transfer2 = {
            senderSubaccountId: constants_1.defaultSubaccountId2,
            recipientSubaccountId: constants_1.defaultSubaccountId,
            assetId: constants_1.defaultAsset2.id,
            size: '5',
            eventId: constants_1.defaultTendermintEventId2,
            transactionHash: '',
            createdAt: constants_1.createdDateTime.toISO(),
            createdAtHeight: constants_1.createdHeight,
        };
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(transfer2),
        ]);
        const transfers = await TransferTable.findAllToOrFromSubaccountId({
            subaccountId: [constants_1.defaultSubaccountId],
            eventId: [constants_1.defaultTendermintEventId],
        }, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(1);
        expect(transfers[0]).toEqual(expect.objectContaining(constants_1.defaultTransfer));
    });
    it('Successfully finds Transfer with eventId', async () => {
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create({
                ...constants_1.defaultTransfer,
                eventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const transfers = await TransferTable.findAll({
            eventId: [constants_1.defaultTendermintEventId2],
        }, [], { readReplica: true });
        expect(transfers.length).toEqual(1);
        expect(transfers[0]).toEqual(expect.objectContaining({
            ...constants_1.defaultTransfer,
            eventId: constants_1.defaultTendermintEventId2,
        }));
    });
    it('Successfully finds all Transfers before or at the height', async () => {
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create({
                ...constants_1.defaultTransfer,
                eventId: constants_1.defaultTendermintEventId2,
                createdAtHeight: '5',
            }),
        ]);
        const transfers = await TransferTable.findAll({ createdBeforeOrAtHeight: constants_1.defaultTransfer.createdAtHeight }, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(1);
        expect(transfers[0]).toEqual(expect.objectContaining(constants_1.defaultTransfer));
    });
    it('Successfully finds all Transfers created after height', async () => {
        const transfer2 = {
            ...constants_1.defaultTransfer,
            eventId: constants_1.defaultTendermintEventId2,
            createdAtHeight: '5',
        };
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(transfer2),
        ]);
        const transfers = await TransferTable.findAll({ createdAfterHeight: '4' }, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(1);
        expect(transfers[0]).toEqual(expect.objectContaining(transfer2));
    });
    it('Successfully finds all transfers to and from subaccount created before time', async () => {
        const transfer2 = {
            senderSubaccountId: constants_1.defaultSubaccountId2,
            recipientSubaccountId: constants_1.defaultSubaccountId,
            assetId: constants_1.defaultAsset2.id,
            size: '5',
            eventId: constants_1.defaultTendermintEventId2,
            transactionHash: '',
            createdAt: '1982-05-25T00:00:00.000Z',
            createdAtHeight: '100',
        };
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(transfer2),
        ]);
        const transfers = await TransferTable.findAllToOrFromSubaccountId({
            subaccountId: [constants_1.defaultSubaccountId],
            createdBeforeOrAt: '2000-05-25T00:00:00.000Z',
        }, [], {
            orderBy: [[types_1.TransferColumns.id, types_1.Ordering.ASC]],
        });
        expect(transfers.length).toEqual(1);
        expect(transfers[0]).toEqual(expect.objectContaining(transfer2));
    });
    it('Successfully finds a Transfer', async () => {
        await TransferTable.create(constants_1.defaultTransfer);
        const transfer = await TransferTable.findById(TransferTable.uuid(constants_1.defaultTransfer.eventId, constants_1.defaultTransfer.assetId, constants_1.defaultTransfer.senderSubaccountId, constants_1.defaultTransfer.recipientSubaccountId, constants_1.defaultTransfer.senderWalletAddress, constants_1.defaultTransfer.recipientWalletAddress));
        expect(transfer).toEqual(expect.objectContaining(constants_1.defaultTransfer));
    });
    it('Recipient/sender must exist', async () => {
        const invalidDeposit = {
            ...constants_1.defaultDeposit,
            recipientWalletAddress: constants_1.defaultWalletAddress,
        };
        await expect(TransferTable.create(invalidDeposit)).rejects.toBeInstanceOf(objection_1.CheckViolationError);
        const invalidWithdrawal = {
            ...constants_1.defaultWithdrawal,
            senderWalletAddress: constants_1.defaultWalletAddress,
        };
        await expect(TransferTable.create(invalidWithdrawal))
            .rejects.toBeInstanceOf(objection_1.CheckViolationError);
        const invalidTfer = {
            recipientWalletAddress: constants_1.defaultWalletAddress,
            assetId: constants_1.defaultAsset.id,
            size: '10',
            eventId: constants_1.defaultTendermintEventId,
            transactionHash: '',
            createdAt: constants_1.createdDateTime.toISO(),
            createdAtHeight: constants_1.createdHeight,
        };
        await expect(TransferTable.create(invalidTfer)).rejects.toBeInstanceOf(objection_1.CheckViolationError);
    });
    it('Successfully creates/finds a transfer/deposit/withdrawal', async () => {
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(constants_1.defaultDeposit),
            TransferTable.create(constants_1.defaultWithdrawal),
        ]);
        const [transfer, deposit, withdrawal,] = await Promise.all([
            TransferTable.findById(TransferTable.uuid(constants_1.defaultTransfer.eventId, constants_1.defaultTransfer.assetId, constants_1.defaultTransfer.senderSubaccountId, constants_1.defaultTransfer.recipientSubaccountId, constants_1.defaultTransfer.senderWalletAddress, constants_1.defaultTransfer.recipientWalletAddress)),
            TransferTable.findById(TransferTable.uuid(constants_1.defaultDeposit.eventId, constants_1.defaultDeposit.assetId, constants_1.defaultDeposit.senderSubaccountId, constants_1.defaultDeposit.recipientSubaccountId, constants_1.defaultDeposit.senderWalletAddress, constants_1.defaultDeposit.recipientWalletAddress)),
            TransferTable.findById(TransferTable.uuid(constants_1.defaultWithdrawal.eventId, constants_1.defaultWithdrawal.assetId, constants_1.defaultWithdrawal.senderSubaccountId, constants_1.defaultWithdrawal.recipientSubaccountId, constants_1.defaultWithdrawal.senderWalletAddress, constants_1.defaultWithdrawal.recipientWalletAddress)),
        ]);
        expect(transfer).toEqual(expect.objectContaining(constants_1.defaultTransfer));
        expect(deposit).toEqual(expect.objectContaining(constants_1.defaultDeposit));
        expect(withdrawal).toEqual(expect.objectContaining(constants_1.defaultWithdrawal));
    });
    it('Successfully gets total transfers per subaccount', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount3);
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create(constants_1.defaultTransfer2),
            TransferTable.create(constants_1.defaultTransfer3),
        ]);
        const transferMap = await TransferTable.getNetTransfersPerSubaccount(constants_1.createdHeight);
        expect(transferMap).toEqual(expect.objectContaining({
            [constants_1.defaultSubaccountId]: {
                [constants_1.defaultAsset.id]: '-10',
            },
            [constants_1.defaultSubaccountId2]: {
                [constants_1.defaultAsset.id]: '15',
                [constants_1.defaultAsset2.id]: '5',
            },
            [constants_1.defaultSubaccountId3]: {
                [constants_1.defaultAsset.id]: '-5',
                [constants_1.defaultAsset2.id]: '-5',
            },
        }));
    });
    it('Successfully gets total transfers per subaccount with duplicate transfer amounts', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount3);
        await Promise.all([
            TransferTable.create(constants_1.defaultTransfer),
            TransferTable.create({
                ...constants_1.defaultTransfer,
                eventId: constants_1.defaultTendermintEventId2,
            }),
            TransferTable.create(constants_1.defaultTransfer2),
            TransferTable.create(constants_1.defaultTransfer3),
        ]);
        const transferMap = await TransferTable.getNetTransfersPerSubaccount(constants_1.createdHeight);
        expect(transferMap).toEqual(expect.objectContaining({
            [constants_1.defaultSubaccountId]: {
                [constants_1.defaultAsset.id]: '-20',
            },
            [constants_1.defaultSubaccountId2]: {
                [constants_1.defaultAsset.id]: '25',
                [constants_1.defaultAsset2.id]: '5',
            },
            [constants_1.defaultSubaccountId3]: {
                [constants_1.defaultAsset.id]: '-5',
                [constants_1.defaultAsset2.id]: '-5',
            },
        }));
    });
    it('Successfully gets total decimal value transfers per subaccount and respects createdBeforeOrAtHeight', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount3);
        await Promise.all([
            TransferTable.create({
                ...constants_1.defaultTransfer,
                size: '10.5',
            }),
            TransferTable.create({
                ...constants_1.defaultTransfer2,
                size: '5.2',
            }),
            // this transfer is ignored because createdAtHeight > createdBeforeOrAtHeight
            TransferTable.create({
                ...constants_1.defaultTransfer3,
                size: '5.3',
                createdAtHeight: '5',
            }),
        ]);
        const transferMap = await TransferTable.getNetTransfersPerSubaccount(constants_1.createdHeight);
        expect(transferMap).toEqual(expect.objectContaining({
            [constants_1.defaultSubaccountId]: {
                [constants_1.defaultAsset.id]: '-10.5',
            },
            [constants_1.defaultSubaccountId2]: {
                [constants_1.defaultAsset.id]: '15.7',
            },
            [constants_1.defaultSubaccountId3]: {
                [constants_1.defaultAsset.id]: '-5.2',
            },
        }));
    });
    it('Successfully gets net transfers between block heights for a subaccount', async () => {
        await SubaccountTable.create(constants_1.defaultSubaccount3);
        await Promise.all([
            TransferTable.create({
                ...constants_1.defaultTransfer,
                createdAtHeight: '1',
            }),
            TransferTable.create({
                ...constants_1.defaultTransfer,
                size: '10.5',
                createdAtHeight: '2',
                eventId: constants_1.defaultTendermintEventId2,
            }),
            TransferTable.create({
                ...constants_1.defaultTransfer2,
                size: '5.2',
                createdAtHeight: '3',
            }),
            TransferTable.create({
                ...constants_1.defaultTransfer3,
                size: '5.3',
                createdAtHeight: '5',
            }),
        ]);
        const [transferMap, transferMap2, transferMap21, transferMap3,] = await Promise.all([
            TransferTable.getNetTransfersBetweenBlockHeightsForSubaccount(constants_1.defaultSubaccountId, '1', '3'),
            TransferTable.getNetTransfersBetweenBlockHeightsForSubaccount(constants_1.defaultSubaccountId2, '1', '3'),
            TransferTable.getNetTransfersBetweenBlockHeightsForSubaccount(constants_1.defaultSubaccountId2, '1', '5'),
            TransferTable.getNetTransfersBetweenBlockHeightsForSubaccount(constants_1.defaultSubaccountId3, '2', '5'),
        ]);
        expect(transferMap).toEqual({
            [constants_1.defaultAsset.id]: (0, big_js_1.default)('-10.5'),
        });
        expect(transferMap2).toEqual({
            [constants_1.defaultAsset.id]: (0, big_js_1.default)('15.7'),
        });
        expect(transferMap21).toEqual({
            [constants_1.defaultAsset.id]: (0, big_js_1.default)('15.7'),
            [constants_1.defaultAsset2.id]: (0, big_js_1.default)('5.3'),
        });
        expect(transferMap3).toEqual({
            [constants_1.defaultAsset.id]: (0, big_js_1.default)('-5.2'),
            [constants_1.defaultAsset2.id]: (0, big_js_1.default)('-5.3'),
        });
    });
});
//# sourceMappingURL=data:application/json;base64,