"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findLatestPrices = exports.getLatestPrices = exports.getPricesFrom24hAgo = exports.findMostRecentMarketOraclePrice = exports.findOraclePricesInReverseChronologicalOrder = exports.findById = exports.create = exports.findAll = exports.uuid = void 0;
const lodash_1 = __importDefault(require("lodash"));
const luxon_1 = require("luxon");
const constants_1 = require("../constants");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const oracle_price_model_1 = __importDefault(require("../models/oracle-price-model"));
const types_1 = require("../types");
function uuid(marketId, height) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${marketId.toString()}-${height}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ limit, id, marketId, price, effectiveAt, effectiveAtHeight, effectiveBeforeOrAt, effectiveBeforeOrAtHeight, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        marketId,
        price,
        effectiveAt,
        effectiveAtHeight,
        effectiveBeforeOrAt,
        effectiveBeforeOrAtHeight,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OraclePriceColumns.id, id);
    }
    if (marketId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OraclePriceColumns.marketId, marketId);
    }
    if (price !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OraclePriceColumns.price, price);
    }
    if (effectiveAt !== undefined) {
        baseQuery = baseQuery.where(types_1.OraclePriceColumns.effectiveAt, effectiveAt);
    }
    if (effectiveAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.OraclePriceColumns.effectiveAtHeight, effectiveAtHeight);
    }
    if (effectiveBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.OraclePriceColumns.effectiveAt, '<=', effectiveBeforeOrAt);
    }
    if (effectiveBeforeOrAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.OraclePriceColumns.effectiveAtHeight, '<=', effectiveBeforeOrAtHeight);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.OraclePriceColumns.effectiveAtHeight, types_1.Ordering.DESC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(oraclePriceToCreate, options = { txId: undefined }) {
    return oracle_price_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(oraclePriceToCreate.marketId, oraclePriceToCreate.effectiveAtHeight),
        ...oraclePriceToCreate,
    }).returning('*');
}
exports.create = create;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findOraclePricesInReverseChronologicalOrder(marketId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, options);
    return baseQuery
        .where(types_1.OraclePriceColumns.marketId, marketId)
        .orderBy(types_1.OraclePriceColumns.effectiveAtHeight, types_1.Ordering.DESC)
        .returning('*');
}
exports.findOraclePricesInReverseChronologicalOrder = findOraclePricesInReverseChronologicalOrder;
async function findMostRecentMarketOraclePrice(marketId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, options);
    const oraclePrices = await baseQuery
        .where(types_1.OraclePriceColumns.marketId, marketId)
        .orderBy(types_1.OraclePriceColumns.effectiveAtHeight, types_1.Ordering.DESC)
        .limit(1)
        .returning('*');
    if (oraclePrices.length === 0) {
        return undefined;
    }
    return oraclePrices[0];
}
exports.findMostRecentMarketOraclePrice = findMostRecentMarketOraclePrice;
function constructPriceMap(oraclePrices) {
    return lodash_1.default.reduce(oraclePrices, (acc, oraclePrice) => {
        acc[oraclePrice.marketId] = oraclePrice.price;
        return acc;
    }, {});
}
async function findLatestPricesByDateTime(latestDateTimeISO) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, { readReplica: true });
    const innerQuery = (0, stores_helpers_1.setupBaseQuery)(oracle_price_model_1.default, { readReplica: true });
    const subQuery = innerQuery
        .select('marketId')
        .max('effectiveAt as maxEffectiveAt')
        .where('effectiveAt', '<=', latestDateTimeISO)
        .groupBy('marketId');
    const oraclePrices = await baseQuery
        .innerJoin(subQuery.as('sub'), function () {
        this
            .on('oracle_prices.marketId', '=', 'sub.marketId')
            .andOn('oracle_prices.effectiveAt', '=', 'sub.maxEffectiveAt');
    })
        .returning('*');
    return constructPriceMap(oraclePrices);
}
async function getPricesFrom24hAgo() {
    const oneDayAgo = luxon_1.DateTime.utc().minus({ days: 1 }).toISO();
    return findLatestPricesByDateTime(oneDayAgo);
}
exports.getPricesFrom24hAgo = getPricesFrom24hAgo;
async function getLatestPrices() {
    const now = luxon_1.DateTime.utc().toISO();
    return findLatestPricesByDateTime(now);
}
exports.getLatestPrices = getLatestPrices;
async function findLatestPrices(effectiveBeforeOrAtHeight, transaction) {
    const query = `
    SELECT "marketId", "price"
    FROM "oracle_prices"
    WHERE ("marketId", "effectiveAtHeight") IN (
      SELECT "marketId", MAX("effectiveAtHeight")
      FROM "oracle_prices"
      WHERE "effectiveAtHeight" <= '${effectiveBeforeOrAtHeight}'
      GROUP BY "marketId");
  `;
    let result;
    if (transaction === undefined) {
        result = await knex_1.knexReadReplica.getConnection().raw(query);
    }
    else {
        result = await knex_1.knexReadReplica.getConnection().raw(query).transacting(transaction);
    }
    return constructPriceMap(result.rows);
}
exports.findLatestPrices = findLatestPrices;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JhY2xlLXByaWNlLXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9vcmFjbGUtcHJpY2UtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0Esb0RBQXVCO0FBQ3ZCLGlDQUFpQztBQUdqQyw0Q0FBK0U7QUFDL0UsMENBQWtEO0FBQ2xELDhEQUFvRjtBQUNwRix5RUFBaUQ7QUFDakQsMENBQTBDO0FBQzFDLHNGQUE0RDtBQUM1RCxvQ0FVa0I7QUFFbEIsU0FBZ0IsSUFBSSxDQUNsQixRQUFnQixFQUFFLE1BQWM7SUFFaEMsc0VBQXNFO0lBQ3RFLE9BQU8sSUFBQSxjQUFPLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxNQUFNLEVBQUUsRUFBRSxpQ0FBcUIsQ0FBQyxDQUFDLENBQUM7QUFDekYsQ0FBQztBQUxELG9CQUtDO0FBRU0sS0FBSyxVQUFVLE9BQU8sQ0FDM0IsRUFDRSxLQUFLLEVBQ0wsRUFBRSxFQUNGLFFBQVEsRUFDUixLQUFLLEVBQ0wsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixtQkFBbUIsRUFDbkIseUJBQXlCLEdBQ0YsRUFDekIsY0FBZ0MsRUFDaEMsVUFBbUIsb0NBQXdCO0lBRTNDLElBQUEsd0NBQXVCLEVBQ3JCO1FBQ0UsS0FBSztRQUNMLEVBQUU7UUFDRixRQUFRO1FBQ1IsS0FBSztRQUNMLFdBQVc7UUFDWCxpQkFBaUI7UUFDakIsbUJBQW1CO1FBQ25CLHlCQUF5QjtLQUNYLEVBQ2hCLGNBQWMsQ0FDZixDQUFDO0lBRUYsSUFBSSxTQUFTLEdBQW1DLElBQUEsK0JBQWMsRUFDNUQsNEJBQWdCLEVBQ2hCLE9BQU8sQ0FDUixDQUFDO0lBRUYsSUFBSSxFQUFFLEtBQUssU0FBUyxFQUFFO1FBQ3BCLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLDBCQUFrQixDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMs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