/// <reference types="node" />
import { Model } from 'objection';
import { Liquidity, OrderSide, IsoString, FillType } from '../types';
export default class FillModel extends Model {
    static get tableName(): string;
    static get idColumn(): string;
    static relationMappings: {
        subaccounts: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        tendermintEvents: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        blocks: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
    };
    static get jsonSchema(): {
        type: string;
        required: string[];
        properties: {
            id: {
                type: string;
                format: string;
            };
            subaccountId: {
                type: string;
                format: string;
            };
            side: {
                type: string;
                enum: OrderSide[];
            };
            liquidity: {
                type: string;
                enum: Liquidity[];
            };
            type: {
                type: string;
                enum: FillType[];
            };
            clobPairId: {
                type: string;
                pattern: string;
            };
            orderId: {
                type: string[];
                default: null;
                format: string;
            };
            size: {
                type: string;
                pattern: string;
            };
            price: {
                type: string;
                pattern: string;
            };
            quoteAmount: {
                type: string;
                pattern: string;
            };
            transactionHash: {
                type: string;
            };
            createdAt: {
                type: string;
                format: string;
            };
            createdAtHeight: {
                type: string;
                pattern: string;
            };
            clientMetadata: {
                type: string[];
                pattern: string;
            };
            fee: {
                type: string;
                pattern: string;
            };
        };
    };
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions(): {
        id: string;
        subaccountId: string;
        side: string;
        liquidity: string;
        type: string;
        clobPairId: string;
        orderId: string;
        size: string;
        price: string;
        quoteAmount: string;
        eventId: string;
        transactionHash: string;
        createdAt: string;
        createdAtHeight: string;
        clientMetadata: string;
        fee: string;
    };
    id: string;
    subaccountId: string;
    side: OrderSide;
    liquidity: Liquidity;
    type: FillType;
    clobPairId: string;
    orderId: string;
    size: string;
    price: string;
    quoteAmount: string;
    eventId: Buffer;
    transactionHash: string;
    createdAt: IsoString;
    createdAtHeight: string;
    clientMetadata: string;
    fee: string;
}
