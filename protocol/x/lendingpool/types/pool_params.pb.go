// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/lendingpool/pool_params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolParams defines the parameters for a given pool.
type PoolParams struct {
	// token_denom is the denomination of the token in the pool.
	TokenDenom string `protobuf:"bytes,1,opt,name=token_denom,json=tokenDenom,proto3" json:"token_denom,omitempty"`
	// max_pool_liquidity is the maximum liquidity allowed in the pool.
	MaxPoolLiquidity string `protobuf:"bytes,2,opt,name=max_pool_liquidity,json=maxPoolLiquidity,proto3" json:"max_pool_liquidity,omitempty"`
	// optimal_utilization_ratio is the optimal ratio of utilization for the pool.
	OptimalUtilizationRatio string `protobuf:"bytes,3,opt,name=optimal_utilization_ratio,json=optimalUtilizationRatio,proto3" json:"optimal_utilization_ratio,omitempty"`
	// base_rate is the base interest rate for the pool.
	BaseRate string `protobuf:"bytes,4,opt,name=base_rate,json=baseRate,proto3" json:"base_rate,omitempty"`
	// slope_one_rate is the interest rate slope for the first segment.
	SlopeOneRate string `protobuf:"bytes,5,opt,name=slope_one_rate,json=slopeOneRate,proto3" json:"slope_one_rate,omitempty"`
	// slope_two_rate is the interest rate slope for the second segment.
	SlopeTwoRate               string   `protobuf:"bytes,6,opt,name=slope_two_rate,json=slopeTwoRate,proto3" json:"slope_two_rate,omitempty"`
	PermissionedCreditAccounts []string `protobuf:"bytes,7,rep,name=permissioned_credit_accounts,json=permissionedCreditAccounts,proto3" json:"permissioned_credit_accounts,omitempty"`
	IsIsolated                 bool     `protobuf:"varint,8,opt,name=is_isolated,json=isIsolated,proto3" json:"is_isolated,omitempty"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc1c570ee1680006, []int{0}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

func (m *PoolParams) GetMaxPoolLiquidity() string {
	if m != nil {
		return m.MaxPoolLiquidity
	}
	return ""
}

func (m *PoolParams) GetOptimalUtilizationRatio() string {
	if m != nil {
		return m.OptimalUtilizationRatio
	}
	return ""
}

func (m *PoolParams) GetBaseRate() string {
	if m != nil {
		return m.BaseRate
	}
	return ""
}

func (m *PoolParams) GetSlopeOneRate() string {
	if m != nil {
		return m.SlopeOneRate
	}
	return ""
}

func (m *PoolParams) GetSlopeTwoRate() string {
	if m != nil {
		return m.SlopeTwoRate
	}
	return ""
}

func (m *PoolParams) GetPermissionedCreditAccounts() []string {
	if m != nil {
		return m.PermissionedCreditAccounts
	}
	return nil
}

func (m *PoolParams) GetIsIsolated() bool {
	if m != nil {
		return m.IsIsolated
	}
	return false
}

func init() {
	proto.RegisterType((*PoolParams)(nil), "dydxprotocol.lendingpool.PoolParams")
}

func init() {
	proto.RegisterFile("dydxprotocol/lendingpool/pool_params.proto", fileDescriptor_cc1c570ee1680006)
}

var fileDescriptor_cc1c570ee1680006 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd2, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0x06, 0xf0, 0xe6, 0x5e, 0xbd, 0xb6, 0xa3, 0x88, 0x04, 0xc1, 0x58, 0x25, 0x16, 0x71, 0x51,
	0xc4, 0xdb, 0x2c, 0xdc, 0xb9, 0xf2, 0x1f, 0x82, 0x28, 0x58, 0xa2, 0x6e, 0xdc, 0x0c, 0xd3, 0xcc,
	0x31, 0xf7, 0xe0, 0xcc, 0x9c, 0x98, 0x99, 0x70, 0x5b, 0x9f, 0xc2, 0xc7, 0x72, 0x79, 0x97, 0x2e,
	0xa5, 0x7d, 0x11, 0x99, 0xd3, 0x54, 0xa3, 0x9b, 0x21, 0xf9, 0xbe, 0x5f, 0x32, 0xc3, 0x70, 0xc4,
	0x43, 0xbd, 0xd1, 0xeb, 0xa6, 0xa5, 0x40, 0x15, 0x99, 0xc2, 0x80, 0xd3, 0xe8, 0xea, 0x86, 0xc8,
	0x14, 0x71, 0x91, 0x8d, 0x6a, 0x95, 0xf5, 0x0b, 0x06, 0x69, 0x36, 0xb4, 0x8b, 0x81, 0x9d, 0xde,
	0xac, 0xa9, 0x26, 0x6e, 0x8a, 0xf8, 0xb4, 0xf7, 0xd3, 0xbc, 0x26, 0xaa, 0x0d, 0x14, 0xfc, 0xb6,
	0xea, 0x3e, 0x17, 0xba, 0x6b, 0x55, 0x40, 0x72, 0xfb, 0xfe, 0xfe, 0xee, 0x48, 0x88, 0x25, 0x91,
	0x59, 0xf2, 0x26, 0xe9, 0x3d, 0x71, 0x35, 0xd0, 0x17, 0x70, 0x52, 0x83, 0x23, 0x9b, 0x25, 0xb3,
	0x64, 0x3e, 0x29, 0x05, 0x47, 0x2f, 0x63, 0x92, 0x3e, 0x12, 0xa9, 0x55, 0x6b, 0xc9, 0x07, 0x33,
	0xf8, 0xb5, 0x43, 0x8d, 0x61, 0x93, 0x1d, 0xb1, 0xbb, 0x61, 0xd5, 0x3a, 0xfe, 0xeb, 0xed, 0x21,
	0x4f, 0x9f, 0x88, 0xdb, 0xd4, 0x04, 0xb4, 0xca, 0xc8, 0x2e, 0xa0, 0xc1, 0x6f, 0xbc, 0xb5, 0xe4,
	0x13, 0x64, 0xc7, 0xfc, 0xd1, 0xad, 0x1e, 0x7c, 0xfc, 0xdb, 0x97, 0x71, 0x4d, 0xef, 0x88, 0xc9,
	0x4a, 0x79, 0x88, 0x18, 0xb2, 0x4b, 0x6c, 0xc7, 0x31, 0x28, 0x55, 0x80, 0xf4, 0x81, 0xb8, 0xee,
	0x0d, 0x35, 0x20, 0xc9, 0xf5, 0xe2, 0x32, 0x8b, 0x6b, 0x9c, 0xbe, 0x73, 0xff, 0xa9, 0x70, 0x4e,
	0x7b, 0x75, 0x32, 0x50, 0x1f, 0xce, 0x89, 0xd5, 0x53, 0x71, 0xb7, 0x81, 0xd6, 0xa2, 0xf7, 0x48,
	0x0e, 0xb4, 0xac, 0x5a, 0xd0, 0x18, 0xa4, 0xaa, 0x2a, 0xea, 0x5c, 0xf0, 0xd9, 0x95, 0xd9, 0xf1,
	0x7c, 0x52, 0x4e, 0x87, 0xe6, 0x05, 0x93, 0x67, 0xbd, 0x88, 0xb7, 0x86, 0x5e, 0xa2, 0x27, 0xa3,
	0x02, 0xe8, 0x6c, 0x3c, 0x4b, 0xe6, 0xe3, 0x52, 0xa0, 0x7f, 0xdd, 0x27, 0xcf, 0xe1, 0xc7, 0x36,
	0x4f, 0x2e, 0xb6, 0x79, 0xf2, 0x6b, 0x9b, 0x27, 0xdf, 0x77, 0xf9, 0xe8, 0x62, 0x97, 0x8f, 0x7e,
	0xee, 0xf2, 0xd1, 0xa7, 0x37, 0x35, 0x86, 0xb3, 0x6e, 0xb5, 0xa8, 0xc8, 0x16, 0xef, 0x43, 0x0b,
	0xca, 0xbe, 0x42, 0xa7, 0x5c, 0x05, 0xa7, 0xcb, 0xc3, 0x40, 0x78, 0x8e, 0x4f, 0xab, 0x33, 0x85,
	0xae, 0xf8, 0x33, 0x26, 0xeb, 0x7f, 0x06, 0x25, 0x6c, 0x1a, 0xf0, 0xab, 0x13, 0x6e, 0x1f, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x7b, 0x74, 0xd0, 0x51, 0x02, 0x00, 0x00,
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsIsolated {
		i--
		if m.IsIsolated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.PermissionedCreditAccounts) > 0 {
		for iNdEx := len(m.PermissionedCreditAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PermissionedCreditAccounts[iNdEx])
			copy(dAtA[i:], m.PermissionedCreditAccounts[iNdEx])
			i = encodeVarintPoolParams(dAtA, i, uint64(len(m.PermissionedCreditAccounts[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.SlopeTwoRate) > 0 {
		i -= len(m.SlopeTwoRate)
		copy(dAtA[i:], m.SlopeTwoRate)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.SlopeTwoRate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SlopeOneRate) > 0 {
		i -= len(m.SlopeOneRate)
		copy(dAtA[i:], m.SlopeOneRate)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.SlopeOneRate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseRate) > 0 {
		i -= len(m.BaseRate)
		copy(dAtA[i:], m.BaseRate)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.BaseRate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OptimalUtilizationRatio) > 0 {
		i -= len(m.OptimalUtilizationRatio)
		copy(dAtA[i:], m.OptimalUtilizationRatio)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.OptimalUtilizationRatio)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MaxPoolLiquidity) > 0 {
		i -= len(m.MaxPoolLiquidity)
		copy(dAtA[i:], m.MaxPoolLiquidity)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.MaxPoolLiquidity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintPoolParams(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	l = len(m.MaxPoolLiquidity)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	l = len(m.OptimalUtilizationRatio)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	l = len(m.BaseRate)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	l = len(m.SlopeOneRate)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	l = len(m.SlopeTwoRate)
	if l > 0 {
		n += 1 + l + sovPoolParams(uint64(l))
	}
	if len(m.PermissionedCreditAccounts) > 0 {
		for _, s := range m.PermissionedCreditAccounts {
			l = len(s)
			n += 1 + l + sovPoolParams(uint64(l))
		}
	}
	if m.IsIsolated {
		n += 2
	}
	return n
}

func sovPoolParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolParams(x uint64) (n int) {
	return sovPoolParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPoolLiquidity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptimalUtilizationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OptimalUtilizationRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeOneRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlopeOneRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeTwoRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlopeTwoRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionedCreditAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionedCreditAccounts = append(m.PermissionedCreditAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsIsolated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsIsolated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPoolParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolParams = fmt.Errorf("proto: unexpected end of group")
)
