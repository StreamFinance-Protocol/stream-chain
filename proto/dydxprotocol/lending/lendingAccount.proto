syntax = "proto3";

package dydxprotocol.lending;

import "cosmos_proto/cosmos.proto";
import "google/protobuf/struct.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/StreamFinance-Protocol/stream-chain/protocol/x/lending/types";

// Represents an individual account position. User's can:
1.  lend and not borrow -> 1 lendingAsset max per position -> each new asset that is being lent would be it's own position
2.  lend and borrow on their position -> multiple lendingAssets per position -> all of these assets would be correlated to a singular position

//AccruedBorrowedAsset: separate from og borrow quantity to not have it appear like the user has liquidity to use 
message accountPosition {
  string ID = 1;                                          // Unique ID for the account position
  repeated cosmos.base.v1beta1.Coin LendingAssets = 2;    // Multiple assets can be placed as collateral to borrow, or 1 asset for pureLending
  cosmos.base.v1beta1.Coin BorrowedAsset = 3;             // One borrow type per position (og quantity)
  cosmos.base.v1beta1.Coin AccruedBorrowedAsset = 4;      // Tracks the amount of interest accumulated on the borrowed asset (same denom as borrow)
  repeated cosmos.base.v1beta1.Coin Balance = 5;          // Keeps track of utilization of collateral + borrow amount
}

// Account structure for user deposits.
message LendingAccount {
  string Address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 Nonce = 2;
  repeated accountPosition AccountPositions = 3;
}
