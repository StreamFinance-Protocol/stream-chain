import Knex from 'knex';
import { Options, PerpetualMarketCreateObject, PerpetualMarketFromDatabase, PerpetualMarketQueryConfig, PerpetualMarketUpdateObject, QueryableField } from '../types';
export declare function findAll({ id, marketId, liquidityTierId, limit, }: PerpetualMarketQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<PerpetualMarketFromDatabase[]>;
export declare function create(perpetualMarketToCreate: PerpetualMarketCreateObject, options?: Options): Promise<PerpetualMarketFromDatabase>;
export declare function update({ ...fields }: PerpetualMarketUpdateObject, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function updateByMarketId({ ...fields }: PerpetualMarketUpdateObject, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function findById(id: string, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function findByClobPairId(clobPairId: string, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function findByMarketId(marketId: number, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function findByTicker(ticker: string, options?: Options): Promise<PerpetualMarketFromDatabase | undefined>;
export declare function updateMarketCheckerFields(markets: {
    id: string;
    volume24H: string;
    trades24H: number;
    priceChange24H: string;
    openInterest: string;
    nextFundingRate: string;
}[], transaction?: Knex.Transaction): Promise<void>;
