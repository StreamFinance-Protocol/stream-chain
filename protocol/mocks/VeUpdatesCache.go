// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"

	vecache "github.com/StreamFinance-Protocol/stream-chain/protocol/daemons/pricefeed/vecache"
)

// VeUpdatesCache is an autogenerated mock type for the VeUpdatesCache type
type VeUpdatesCache struct {
	mock.Mock
}

// GetConversionRateUpdateAndBlockHeight provides a mock function with given fields:
func (_m *VeUpdatesCache) GetConversionRateUpdateAndBlockHeight() (*big.Int, *big.Int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConversionRateUpdateAndBlockHeight")
	}

	var r0 *big.Int
	var r1 *big.Int
	if rf, ok := ret.Get(0).(func() (*big.Int, *big.Int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func() *big.Int); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	return r0, r1
}

// GetHeight provides a mock function with given fields:
func (_m *VeUpdatesCache) GetHeight() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeight")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetPriceUpdates provides a mock function with given fields:
func (_m *VeUpdatesCache) GetPriceUpdates() vecache.PriceUpdates {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPriceUpdates")
	}

	var r0 vecache.PriceUpdates
	if rf, ok := ret.Get(0).(func() vecache.PriceUpdates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vecache.PriceUpdates)
		}
	}

	return r0
}

// GetRound provides a mock function with given fields:
func (_m *VeUpdatesCache) GetRound() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRound")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// HasValidValues provides a mock function with given fields: currBlock, round
func (_m *VeUpdatesCache) HasValidValues(currBlock int64, round int32) bool {
	ret := _m.Called(currBlock, round)

	if len(ret) == 0 {
		panic("no return value specified for HasValidValues")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int64, int32) bool); ok {
		r0 = rf(currBlock, round)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetPriceUpdates provides a mock function with given fields: ctx, updates, round
func (_m *VeUpdatesCache) SetPriceUpdates(ctx types.Context, updates vecache.PriceUpdates, round int32) {
	_m.Called(ctx, updates, round)
}

// SetSDaiConversionRateAndBlockHeight provides a mock function with given fields: ctx, sDaiConversionRate, blockHeight, round
func (_m *VeUpdatesCache) SetSDaiConversionRateAndBlockHeight(ctx types.Context, sDaiConversionRate *big.Int, blockHeight *big.Int, round int32) {
	_m.Called(ctx, sDaiConversionRate, blockHeight, round)
}

// NewVeUpdatesCache creates a new instance of VeUpdatesCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVeUpdatesCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *VeUpdatesCache {
	mock := &VeUpdatesCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
