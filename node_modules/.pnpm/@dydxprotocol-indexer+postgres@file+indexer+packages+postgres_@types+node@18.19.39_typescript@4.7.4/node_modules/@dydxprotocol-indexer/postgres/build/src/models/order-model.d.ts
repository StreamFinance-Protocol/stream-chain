import UpsertQueryBuilder from '../query-builders/upsert';
import { IsoString, OrderSide, OrderStatus, OrderType, TimeInForce } from '../types';
import BaseModel from './base-model';
export default class OrderModel extends BaseModel {
    static get tableName(): string;
    static get idColumn(): string;
    static relationMappings: {
        subaccounts: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        fills: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
        blocks: {
            relation: import("objection").RelationType;
            modelClass: string;
            join: {
                from: string;
                to: string;
            };
        };
    };
    static get jsonSchema(): {
        type: string;
        required: string[];
        properties: {
            id: {
                type: string;
                format: string;
            };
            subaccountId: {
                type: string;
                format: string;
            };
            clientId: {
                type: string;
                pattern: string;
            };
            clobPairId: {
                type: string;
                pattern: string;
            };
            side: {
                type: string;
                enum: OrderSide[];
            };
            size: {
                type: string;
                pattern: string;
            };
            totalFilled: {
                type: string;
                pattern: string;
            };
            price: {
                type: string;
                pattern: string;
            };
            type: {
                type: string;
                enum: OrderType[];
            };
            status: {
                type: string;
                enum: OrderStatus[];
            };
            timeInForce: {
                type: string;
                enum: TimeInForce[];
            };
            reduceOnly: {
                type: string;
            };
            orderFlags: {
                type: string;
                pattern: string;
            };
            goodTilBlock: {
                type: string[];
                default: null;
                pattern: string;
            };
            goodTilBlockTime: {
                type: string[];
                default: null;
                format: string;
            };
            createdAtHeight: {
                type: string[];
                default: null;
                pattern: string;
            };
            clientMetadata: {
                type: string;
                pattern: string;
            };
            triggerPrice: {
                type: string[];
                default: null;
                pattern: string;
            };
            updatedAt: {
                type: string;
                format: string;
            };
            updatedAtHeight: {
                type: string;
                pattern: string;
            };
        };
    };
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions(): {
        id: string;
        subaccountId: string;
        clientId: string;
        clobPairId: string;
        side: string;
        size: string;
        totalFilled: string;
        price: string;
        type: string;
        status: string;
        timeInForce: string;
        reduceOnly: string;
        orderFlags: string;
        goodTilBlock: string;
        goodTilBlockTime: string;
        createdAtHeight: string;
        clientMetadata: string;
        triggerPrice: string;
        updatedAt: string;
        updatedAtHeight: string;
    };
    id: string;
    QueryBuilderType: UpsertQueryBuilder<this>;
    subaccountId: string;
    clientId: string;
    clobPairId: string;
    side: OrderSide;
    size: string;
    totalFilled: string;
    price: string;
    type: OrderType;
    status: OrderStatus;
    timeInForce: TimeInForce;
    reduceOnly: boolean;
    orderFlags: string;
    goodTilBlock: string;
    goodTilBlockTime: string;
    createdAtHeight?: string;
    clientMetadata: string;
    triggerPrice?: string;
    updatedAt: IsoString;
    updatedAtHeight: string;
}
