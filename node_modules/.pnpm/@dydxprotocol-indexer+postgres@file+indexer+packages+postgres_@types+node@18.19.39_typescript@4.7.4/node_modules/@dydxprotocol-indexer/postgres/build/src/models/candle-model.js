"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
const types_1 = require("../types");
class CandleModel extends objection_1.Model {
    static get tableName() {
        return 'candles';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'startedAt',
                'ticker',
                'resolution',
                'low',
                'high',
                'open',
                'close',
                'baseTokenVolume',
                'trades',
                'usdVolume',
                'startingOpenInterest',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                startedAt: { type: 'string', format: 'date-time' },
                ticker: { type: 'string' },
                resolution: { type: 'string', enum: [...Object.values(types_1.CandleResolution)] },
                low: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                high: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                open: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                close: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                baseTokenVolume: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                usdVolume: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                trades: { type: 'integer' },
                startingOpenInterest: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
            },
        };
    }
}
exports.default = CandleModel;
CandleModel.relationMappings = {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlLW1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9jYW5kbGUtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBa0M7QUFFbEMsa0RBRTJCO0FBQzNCLG9DQUdrQjtBQUVsQixNQUFxQixXQUFZLFNBQVEsaUJBQUs7SUFDNUMsTUFBTSxLQUFLLFNBQVM7UUFDbEIsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sS0FBSyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUtELE1BQU0sS0FBSyxVQUFVO1FBQ25CLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtZQUNkLFFBQVEsRUFBRTtnQkFDUixJQUFJO2dCQUNKLFdBQVc7Z0JBQ1gsUUFBUTtnQkFDUixZQUFZO2dCQUNaLEtBQUs7Z0JBQ0wsTUFBTTtnQkFDTixNQUFNO2dCQUNOLE9BQU87Z0JBQ1AsaUJBQWlCO2dCQUNqQixRQUFRO2dCQUNSLFdBQVc7Z0JBQ1gsc0JBQXNCO2FBQ3ZCO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDdEMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFO2dCQUNsRCxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFO2dCQUMxQixVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyx3QkFBZ0IsQ0FBQyxDQUFDLEVBQUU7Z0JBQzFFLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLHNDQUF5QixFQUFFO2dCQUMzRCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxzQ0FBeUIsRUFBRTtnQkFDNUQsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7Z0JBQzVELEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLHNDQUF5QixFQUFFO2dCQUM3RCxlQUFlLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxzQ0FBeUIsRUFBRTtnQkFDdkUsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7Z0JBQ2pFLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7Z0JBQzNCLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsc0NBQXlCLEVBQUU7YUFDN0U7U0FDRixDQUFDO0lBQ0osQ0FBQzs7QUE1Q0gsOEJBcUVDO0FBNURRLDRCQUFnQixHQUFHLEVBQ3pCLENBQUMifQ==