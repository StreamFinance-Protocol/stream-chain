"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDQueryClient = void 0;
const helpers_1 = require("../../../helpers");
class LCDQueryClient {
    constructor({ requestClient }) {
        this.req = requestClient;
        this.constitution = this.constitution.bind(this);
        this.proposal = this.proposal.bind(this);
        this.proposals = this.proposals.bind(this);
        this.vote = this.vote.bind(this);
        this.votes = this.votes.bind(this);
        this.params = this.params.bind(this);
        this.deposit = this.deposit.bind(this);
        this.deposits = this.deposits.bind(this);
        this.tallyResult = this.tallyResult.bind(this);
    }
    /* Constitution queries the chain's constitution. */
    async constitution(_params = {}) {
        const endpoint = `cosmos/gov/v1/constitution`;
        return await this.req.get(endpoint);
    }
    /* Proposal queries proposal details based on ProposalID. */
    async proposal(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}`;
        return await this.req.get(endpoint);
    }
    /* Proposals queries all proposals based on given status. */
    async proposals(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.proposalStatus) !== "undefined") {
            options.params.proposal_status = params.proposalStatus;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.voter) !== "undefined") {
            options.params.voter = params.voter;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.depositor) !== "undefined") {
            options.params.depositor = params.depositor;
        }
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals`;
        return await this.req.get(endpoint, options);
    }
    /* Vote queries voted information based on proposalID, voterAddr. */
    async vote(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes/${params.voter}`;
        return await this.req.get(endpoint);
    }
    /* Votes queries votes of a given proposal. */
    async votes(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/votes`;
        return await this.req.get(endpoint, options);
    }
    /* Params queries all parameters of the gov module. */
    async params(params) {
        const endpoint = `cosmos/gov/v1/params/${params.paramsType}`;
        return await this.req.get(endpoint);
    }
    /* Deposit queries single deposit information based on proposalID, depositAddr. */
    async deposit(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits/${params.depositor}`;
        return await this.req.get(endpoint);
    }
    /* Deposits queries all deposits of a single proposal. */
    async deposits(params) {
        const options = {
            params: {}
        };
        if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
            (0, helpers_1.setPaginationParams)(options, params.pagination);
        }
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/deposits`;
        return await this.req.get(endpoint, options);
    }
    /* TallyResult queries the tally of a proposal vote. */
    async tallyResult(params) {
        const endpoint = `cosmos/gov/v1/proposals/${params.proposalId}/tally`;
        return await this.req.get(endpoint);
    }
}
exports.LCDQueryClient = LCDQueryClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkubGNkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BkeWR4cHJvdG9jb2wvdjQtcHJvdG8vc3JjL2NvZGVnZW4vY29zbW9zL2dvdi92MS9xdWVyeS5sY2QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsOENBQXVEO0FBR3ZELE1BQWEsY0FBYztJQUd6QixZQUFZLEVBQ1YsYUFBYSxFQUdkO1FBQ0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJ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