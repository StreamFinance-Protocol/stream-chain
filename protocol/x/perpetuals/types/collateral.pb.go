// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: klyraprotocol/perpetuals/collateral.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CollateralPool defines the parameters for a collateral pool.
type CollateralPool struct {
	// The id of the collateral pool.
	CollateralPoolId uint32 `protobuf:"varint,1,opt,name=collateral_pool_id,json=collateralPoolId,proto3" json:"collateral_pool_id,omitempty"`
	// The maximum insurance fund delta per block for isolated perpetual markets.
	MaxCumulativeInsuranceFundDeltaPerBlock uint64 `protobuf:"varint,2,opt,name=max_cumulative_insurance_fund_delta_per_block,json=maxCumulativeInsuranceFundDeltaPerBlock,proto3" json:"max_cumulative_insurance_fund_delta_per_block,omitempty"`
	// The multi collateral assets for the collateral pool.
	MultiCollateralAssets *MultiCollateralAssetsArray `protobuf:"bytes,3,opt,name=multi_collateral_assets,json=multiCollateralAssets,proto3" json:"multi_collateral_assets,omitempty"`
	// The id of the quote asset.
	QuoteAssetId uint32 `protobuf:"varint,4,opt,name=quote_asset_id,json=quoteAssetId,proto3" json:"quote_asset_id,omitempty"`
}

func (m *CollateralPool) Reset()         { *m = CollateralPool{} }
func (m *CollateralPool) String() string { return proto.CompactTextString(m) }
func (*CollateralPool) ProtoMessage()    {}
func (*CollateralPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_2db39ec613c2392e, []int{0}
}
func (m *CollateralPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralPool.Merge(m, src)
}
func (m *CollateralPool) XXX_Size() int {
	return m.Size()
}
func (m *CollateralPool) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralPool.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralPool proto.InternalMessageInfo

func (m *CollateralPool) GetCollateralPoolId() uint32 {
	if m != nil {
		return m.CollateralPoolId
	}
	return 0
}

func (m *CollateralPool) GetMaxCumulativeInsuranceFundDeltaPerBlock() uint64 {
	if m != nil {
		return m.MaxCumulativeInsuranceFundDeltaPerBlock
	}
	return 0
}

func (m *CollateralPool) GetMultiCollateralAssets() *MultiCollateralAssetsArray {
	if m != nil {
		return m.MultiCollateralAssets
	}
	return nil
}

func (m *CollateralPool) GetQuoteAssetId() uint32 {
	if m != nil {
		return m.QuoteAssetId
	}
	return 0
}

func init() {
	proto.RegisterType((*CollateralPool)(nil), "klyraprotocol.perpetuals.CollateralPool")
}

func init() {
	proto.RegisterFile("klyraprotocol/perpetuals/collateral.proto", fileDescriptor_2db39ec613c2392e)
}

var fileDescriptor_2db39ec613c2392e = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xdd, 0x4a, 0x02, 0x41,
	0x14, 0x76, 0x4d, 0xba, 0xd8, 0x4a, 0x62, 0x21, 0x5a, 0xba, 0x58, 0x24, 0x82, 0x36, 0xc8, 0x5d,
	0xa8, 0x5e, 0x40, 0x0d, 0xc1, 0x20, 0x10, 0xbb, 0xeb, 0xa2, 0x61, 0x9c, 0x99, 0x72, 0xf0, 0xcc,
	0xce, 0x36, 0x3f, 0xa1, 0x6f, 0xd1, 0xb3, 0xf4, 0x14, 0x5d, 0x7a, 0xd9, 0x65, 0xe8, 0x8b, 0xc4,
	0x8e, 0xb8, 0x2a, 0xe4, 0xdd, 0x70, 0xbe, 0x9f, 0x33, 0xdf, 0xf9, 0xfc, 0xab, 0x31, 0x4c, 0x15,
	0xce, 0x95, 0x34, 0x92, 0x48, 0x48, 0x73, 0xa6, 0x72, 0x66, 0x2c, 0x06, 0x9d, 0x12, 0x09, 0x80,
	0x0d, 0x53, 0x18, 0x12, 0x07, 0x07, 0xe1, 0x16, 0x35, 0x59, 0x53, 0xcf, 0xe2, 0x9d, 0x26, 0xe5,
	0x73, 0xe9, 0x71, 0xfe, 0x55, 0xf5, 0xeb, 0x9d, 0xd2, 0xb8, 0x2f, 0x25, 0x04, 0xd7, 0x7e, 0xb0,
	0x5e, 0x85, 0x72, 0x29, 0x01, 0x71, 0x1a, 0x7a, 0x0d, 0x2f, 0x3e, 0x1a, 0x1c, 0x93, 0x2d, 0x6e,
	0x8f, 0x06, 0x2f, 0x7e, 0x53, 0xe0, 0x09, 0x22, 0x56, 0x58, 0xc0, 0x86, 0x7f, 0x30, 0xc4, 0x33,
	0x6d, 0x15, 0xce, 0x08, 0x43, 0xaf, 0x36, 0xa3, 0x88, 0x32, 0x30, 0x18, 0xe5, 0x4c, 0xa1, 0x21,
	0x48, 0x32, 0x0e, 0xab, 0x0d, 0x2f, 0xae, 0x0d, 0x2e, 0x05, 0x9e, 0x74, 0x4a, 0x4d, 0x6f, 0x25,
	0xe9, 0xda, 0x8c, 0xde, 0x17, 0x82, 0x3e, 0x53, 0xed, 0x82, 0x1e, 0x80, 0x7f, 0x2a, 0x2c, 0x18,
	0x8e, 0x36, 0xfe, 0x84, 0xb5, 0x66, 0x46, 0x87, 0x7b, 0x0d, 0x2f, 0x3e, 0xb8, 0xb9, 0x4b, 0x76,
	0x9d, 0x21, 0x79, 0x2c, 0x84, 0xeb, 0x74, 0x2d, 0x27, 0x6b, 0x29, 0x85, 0xa7, 0x83, 0x13, 0xf1,
	0x1f, 0x16, 0x5c, 0xf8, 0xf5, 0x77, 0x2b, 0x0d, 0x5b, 0xae, 0x28, 0x72, 0xd7, 0x5c, 0xee, 0x43,
	0x37, 0x75, 0xa4, 0x1e, 0x6d, 0xd3, 0xef, 0x79, 0xe4, 0xcd, 0xe6, 0x91, 0xf7, 0x3b, 0x8f, 0xbc,
	0xcf, 0x45, 0x54, 0x99, 0x2d, 0xa2, 0xca, 0xcf, 0x22, 0xaa, 0x3c, 0x3f, 0xbc, 0x71, 0x33, 0xb2,
	0xc3, 0x84, 0x48, 0x91, 0x3e, 0x19, 0xc5, 0xb0, 0xe8, 0xf2, 0xac, 0x08, 0xd6, 0xec, 0xaf, 0xca,
	0xd0, 0x6e, 0xdc, 0x24, 0x23, 0xcc, 0xb3, 0xb4, 0xac, 0x68, 0xb2, 0x59, 0x92, 0x99, 0xe6, 0x4c,
	0x0f, 0xf7, 0x1d, 0x78, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x7f, 0x97, 0xd8, 0x12, 0x02,
	0x00, 0x00,
}

func (m *CollateralPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QuoteAssetId != 0 {
		i = encodeVarintCollateral(dAtA, i, uint64(m.QuoteAssetId))
		i--
		dAtA[i] = 0x20
	}
	if m.MultiCollateralAssets != nil {
		{
			size, err := m.MultiCollateralAssets.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollateral(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MaxCumulativeInsuranceFundDeltaPerBlock != 0 {
		i = encodeVarintCollateral(dAtA, i, uint64(m.MaxCumulativeInsuranceFundDeltaPerBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.CollateralPoolId != 0 {
		i = encodeVarintCollateral(dAtA, i, uint64(m.CollateralPoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollateral(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollateral(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollateralPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollateralPoolId != 0 {
		n += 1 + sovCollateral(uint64(m.CollateralPoolId))
	}
	if m.MaxCumulativeInsuranceFundDeltaPerBlock != 0 {
		n += 1 + sovCollateral(uint64(m.MaxCumulativeInsuranceFundDeltaPerBlock))
	}
	if m.MultiCollateralAssets != nil {
		l = m.MultiCollateralAssets.Size()
		n += 1 + l + sovCollateral(uint64(l))
	}
	if m.QuoteAssetId != 0 {
		n += 1 + sovCollateral(uint64(m.QuoteAssetId))
	}
	return n
}

func sovCollateral(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollateral(x uint64) (n int) {
	return sovCollateral(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollateralPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollateral
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralPoolId", wireType)
			}
			m.CollateralPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralPoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCumulativeInsuranceFundDeltaPerBlock", wireType)
			}
			m.MaxCumulativeInsuranceFundDeltaPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCumulativeInsuranceFundDeltaPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiCollateralAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollateral
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollateral
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiCollateralAssets == nil {
				m.MultiCollateralAssets = &MultiCollateralAssetsArray{}
			}
			if err := m.MultiCollateralAssets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetId", wireType)
			}
			m.QuoteAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuoteAssetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollateral(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollateral
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollateral(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollateral
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollateral
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollateral
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollateral
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollateral
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollateral        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollateral          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollateral = fmt.Errorf("proto: unexpected end of group")
)
