"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const objection_1 = require("objection");
const validators_1 = require("../lib/validators");
class TransferModel extends objection_1.Model {
    static get tableName() {
        return 'transfers';
    }
    static get idColumn() {
        return 'id';
    }
    static get jsonSchema() {
        return {
            type: 'object',
            required: [
                'id',
                'senderSubaccountId',
                'recipientSubaccountId',
                'senderWalletAddress',
                'recipientWalletAddress',
                'assetId',
                'size',
                'eventId',
                'transactionHash',
                'createdAt',
                'createdAtHeight',
            ],
            properties: {
                id: { type: 'string', format: 'uuid' },
                senderSubaccountId: { type: ['string', 'null'], default: null, format: 'uuid' },
                recipientSubaccountId: { type: ['string', 'null'], default: null, format: 'uuid' },
                senderWalletAddress: { type: ['string', 'null'], default: null },
                recipientWalletAddress: { type: ['string', 'null'], default: null },
                assetId: { type: 'string', pattern: validators_1.IntegerPattern },
                size: { type: 'string', pattern: validators_1.NonNegativeNumericPattern },
                transactionHash: { type: 'string' },
                createdAt: { type: 'string', format: 'date-time' },
                createdAtHeight: { type: 'string', pattern: validators_1.IntegerPattern },
            },
        };
    }
    /**
     * A mapping from column name to JSON conversion expected.
     * See getSqlConversionForDydxModelTypes for valid conversions.
     *
     * TODO(IND-239): Ensure that jsonSchema() / sqlToJsonConversions() / model fields match.
     */
    static get sqlToJsonConversions() {
        return {
            id: 'string',
            senderSubaccountId: 'string',
            recipientSubaccountId: 'string',
            senderWalletAddress: 'string',
            recipientWalletAddress: 'string',
            assetId: 'string',
            size: 'string',
            eventId: 'hex-string',
            transactionHash: 'string',
            createdAt: 'date-time',
            createdAtHeight: 'string',
        };
    }
}
exports.default = TransferModel;
TransferModel.relationMappings = {
    recipientSubaccount: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'subaccount-model'),
        join: {
            from: 'transfers.recipientSubaccountId',
            to: 'subaccounts.id',
        },
    },
    senderSubaccount: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'subaccount-model'),
        join: {
            from: 'transfers.senderSubaccountId',
            to: 'subaccounts.id',
        },
    },
    asset: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'asset-model'),
        join: {
            from: 'transfers.assetId',
            to: 'assets.id',
        },
    },
    tendermintEvents: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'tendermint-event-model'),
        join: {
            from: 'transfers.eventId',
            to: 'tendermint_events.id',
        },
    },
    blocks: {
        relation: objection_1.Model.BelongsToOneRelation,
        modelClass: path_1.default.join(__dirname, 'block-model'),
        join: {
            from: 'transfers.createdAtHeight',
            to: 'blocks.blockHeight',
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItbW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3RyYW5zZmVyLW1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0RBQXdCO0FBRXhCLHlDQUFrQztBQUVsQyxrREFBOEU7QUFHOUUsTUFBcUIsYUFBYyxTQUFRLGlCQUFLO0lBQzlDLE1BQU0sS0FBSyxTQUFTO1FBQ2xCLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLEtBQUssUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUE2Q0QsTUFBTSxLQUFLLFVBQVU7UUFDbkIsT0FBTztZQUNMLElBQUksRUFBRSxRQUFRO1lBQ2QsUUFBUSxFQUFFO2dCQUNSLElBQUk7Z0JBQ0osb0JBQW9CO2dCQUNwQix1QkFBdUI7Z0JBQ3ZCLHFCQUFxQjtnQkFDckIsd0JBQXdCO2dCQUN4QixTQUFTO2dCQUNULE1BQU07Z0JBQ04sU0FBUztnQkFDVCxpQkFBaUI7Z0JBQ2pCLFdBQVc7Z0JBQ1gsaUJBQWlCO2FBQ2xCO1lBQ0QsVUFBVSxFQUFFO2dCQUNWLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDdEMsa0JBQWtCLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO2dCQUMvRSxxQkFBcUIsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7Z0JBQ2xGLG1CQUFtQixFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7Z0JBQ2hFLHNCQUFzQixF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