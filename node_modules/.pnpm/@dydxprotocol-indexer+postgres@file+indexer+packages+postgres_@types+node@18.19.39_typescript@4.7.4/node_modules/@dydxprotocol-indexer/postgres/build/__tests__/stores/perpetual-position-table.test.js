"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const big_js_1 = require("big.js");
const luxon_1 = require("luxon");
const types_1 = require("../../src/types");
const PerpetualPositionTable = __importStar(require("../../src/stores/perpetual-position-table"));
const PerpetualMarketTable = __importStar(require("../../src/stores/perpetual-market-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const mock_generators_1 = require("../helpers/mock-generators");
const errors_1 = require("../../src/lib/errors");
const constants_1 = require("../helpers/constants");
const helpers_1 = require("./helpers");
const src_1 = require("../../src");
describe('PerpetualPosition store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    beforeEach(async () => {
        await (0, mock_generators_1.seedData)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    const defaultPerpetualPositionId = PerpetualPositionTable.uuid(constants_1.defaultPerpetualPosition.subaccountId, constants_1.defaultPerpetualPosition.openEventId);
    it('Successfully creates a PerpetualPosition', async () => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
    });
    it('Successfully creates a PerpetualPosition without optional fields', async () => {
        await PerpetualPositionTable.create({
            subaccountId: constants_1.defaultSubaccountId,
            perpetualId: constants_1.defaultPerpetualMarket.id,
            side: types_1.PositionSide.LONG,
            status: types_1.PerpetualPositionStatus.OPEN,
            size: '10',
            maxSize: '25',
            createdAt: constants_1.createdDateTime.toISO(),
            createdAtHeight: constants_1.createdHeight,
            openEventId: constants_1.defaultTendermintEventId,
            lastEventId: constants_1.defaultTendermintEventId2,
            settledFunding: '200000',
        });
    });
    it('Successfully finds all PerpetualPositions', async () => {
        await PerpetualMarketTable.create({
            ...constants_1.defaultPerpetualMarket,
            id: '100',
        });
        await Promise.all([
            PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
            PerpetualPositionTable.create({
                ...constants_1.defaultPerpetualPosition,
                perpetualId: '100',
                openEventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const perpetualPositions = await PerpetualPositionTable.findAll({}, [], {
            readReplica: true,
            orderBy: [[types_1.OrderColumns.perpetualId, types_1.Ordering.ASC],
                [types_1.OrderColumns.openEventId, types_1.Ordering.ASC]],
        });
        expect(perpetualPositions.length).toEqual(2);
        expect(perpetualPositions[0]).toEqual(expect.objectContaining(constants_1.defaultPerpetualPosition));
        expect(perpetualPositions[1]).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualPosition,
            perpetualId: '100',
            openEventId: constants_1.defaultTendermintEventId2,
        }));
    });
    it('Successfully finds PerpetualPosition with perpetualId', async () => {
        await PerpetualMarketTable.create({
            ...constants_1.defaultPerpetualMarket,
            id: '100',
        });
        await Promise.all([
            PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
            PerpetualPositionTable.create({
                ...constants_1.defaultPerpetualPosition,
                perpetualId: '100',
                openEventId: constants_1.defaultTendermintEventId2,
            }),
        ]);
        const perpetualPositions = await PerpetualPositionTable.findAll({
            perpetualId: [constants_1.defaultPerpetualMarket.id],
        }, [], { readReplica: true });
        expect(perpetualPositions.length).toEqual(1);
        expect(perpetualPositions[0]).toEqual(expect.objectContaining(constants_1.defaultPerpetualPosition));
    });
    it('Successfully finds PerpetualPosition by Subaccount', async () => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
        const perpetualPositions = await PerpetualPositionTable.findAll({
            subaccountId: [constants_1.defaultSubaccountId],
        }, [], { readReplica: true });
        expect(perpetualPositions.length).toEqual(1);
        expect(perpetualPositions[0]).toEqual(expect.objectContaining(constants_1.defaultPerpetualPosition));
        const noPerpetualPositions = await PerpetualPositionTable.findAll({
            subaccountId: ['6fa6b369-4107-4f0c-bc57-6cbc08cb15a5'],
        }, [], { readReplica: true });
        expect(noPerpetualPositions.length).toEqual(0);
    });
    it.each([
        [1, 1, constants_1.defaultPerpetualPosition],
        [-1, 0, undefined],
    ])('Successfully finds PerpetualPosition by createdBeforeOrAt, delta %d seconds', async (deltaSeconds, expectedLength, expectedPosition) => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
        const perpetualPositions = await PerpetualPositionTable.findAll({
            createdBeforeOrAt: constants_1.createdDateTime.plus({ seconds: deltaSeconds }).toISO(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(perpetualPositions, expectedLength, expectedPosition);
    });
    it('Successfully finds PerpetualPositions sorted by openEventId', async () => {
        const earlierPosition = {
            ...constants_1.defaultPerpetualPosition,
            openEventId: constants_1.defaultTendermintEventId3,
            lastEventId: constants_1.defaultTendermintEventId3,
        };
        const nextTendermintEvent = {
            blockHeight: constants_1.defaultTendermintEvent3.blockHeight,
            transactionIndex: constants_1.defaultTendermintEvent3.transactionIndex,
            eventIndex: constants_1.defaultTendermintEvent3.eventIndex + 1,
        };
        const nextTendermintEventId = src_1.TendermintEventTable.createEventId(nextTendermintEvent.blockHeight, nextTendermintEvent.transactionIndex, nextTendermintEvent.eventIndex);
        const laterPosition = {
            ...constants_1.defaultPerpetualPosition,
            openEventId: nextTendermintEventId,
            lastEventId: nextTendermintEventId,
        };
        await src_1.TendermintEventTable.create(nextTendermintEvent);
        await Promise.all([
            await PerpetualPositionTable.create(earlierPosition),
            await PerpetualPositionTable.create(laterPosition),
        ]);
        const perpetualPositions = await PerpetualPositionTable.findAll({}, [], { readReplica: true });
        expect(perpetualPositions.length).toEqual(2);
        expect(perpetualPositions[0]).toEqual(expect.objectContaining(laterPosition));
        expect(perpetualPositions[1]).toEqual(expect.objectContaining(earlierPosition));
    });
    it.each([
        [1, 1, constants_1.defaultPerpetualPosition],
        [-1, 0, undefined],
    ])('Successfully finds PerpetualPosition by createdBeforeOrAtHeight, delta %d blocks', async (deltaHeight, expectedLength, expectedPosition) => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
        const perpetualPositions = await PerpetualPositionTable.findAll({
            createdBeforeOrAtHeight: (0, big_js_1.Big)(constants_1.createdHeight).plus(deltaHeight).toFixed(),
        }, [], { readReplica: true });
        (0, helpers_1.checkLengthAndContains)(perpetualPositions, expectedLength, expectedPosition);
    });
    it('Successfully finds a PerpetualPosition', async () => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
        const perpetualPosition = await PerpetualPositionTable.findById(defaultPerpetualPositionId);
        expect(perpetualPosition).toEqual(expect.objectContaining(constants_1.defaultPerpetualPosition));
    });
    it('Unable finds a PerpetualPosition', async () => {
        const perpetualPosition = await PerpetualPositionTable.findById(defaultPerpetualPositionId);
        expect(perpetualPosition).toEqual(undefined);
    });
    it('Successfully updates a perpetualPosition', async () => {
        await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
        const perpetualPosition = await PerpetualPositionTable.update({
            id: defaultPerpetualPositionId,
            size: '20',
        });
        expect(perpetualPosition).toEqual(expect.objectContaining({
            ...constants_1.defaultPerpetualPosition,
            size: '20',
        }));
    });
    describe('findOpenPositionForSubaccountPerpetual', () => {
        it('Successfully gets the open position for a subaccountId and perpetualId', async () => {
            await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
            const perpetualPosition = await PerpetualPositionTable.findOpenPositionForSubaccountPerpetual(constants_1.defaultPerpetualPosition.subaccountId, constants_1.defaultPerpetualPosition.perpetualId);
            expect(perpetualPosition).toEqual(expect.objectContaining(constants_1.defaultPerpetualPosition));
        });
        it('Successfully gets no open positions for a subaccountId and perpetualId', async () => {
            await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
            const otherPerpetualId = '3';
            const perpetualPosition = await PerpetualPositionTable.findOpenPositionForSubaccountPerpetual(constants_1.defaultPerpetualPosition.subaccountId, otherPerpetualId);
            expect(perpetualPosition).toEqual(undefined);
        });
    });
    describe('findOpenPositionsForSubaccount', () => {
        it('Successfully gets the open positions for subaccountIds', async () => {
            await Promise.all([
                PerpetualMarketTable.create({
                    ...constants_1.defaultPerpetualMarket,
                    id: '100',
                }),
                PerpetualMarketTable.create({
                    ...constants_1.defaultPerpetualMarket,
                    id: '101',
                }),
            ]);
            const perpetualPosition2 = {
                ...constants_1.defaultPerpetualPosition,
                perpetualId: '100',
                openEventId: constants_1.defaultTendermintEventId2,
            };
            const perpetualPosition3 = {
                ...constants_1.defaultPerpetualPosition,
                subaccountId: constants_1.defaultSubaccountId2,
                perpetualId: '101',
                openEventId: constants_1.defaultTendermintEventId2,
            };
            const perpetualPosition4 = {
                ...constants_1.defaultPerpetualPosition,
                subaccountId: constants_1.defaultSubaccountId2,
                perpetualId: '100',
                openEventId: constants_1.defaultTendermintEventId,
                status: types_1.PerpetualPositionStatus.CLOSED,
            };
            await Promise.all([
                PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
                PerpetualPositionTable.create(perpetualPosition2),
                PerpetualPositionTable.create(perpetualPosition3),
                PerpetualPositionTable.create(perpetualPosition4),
            ]);
            const perpetualPositions = await PerpetualPositionTable.findOpenPositionsForSubaccounts([
                constants_1.defaultSubaccountId,
                constants_1.defaultSubaccountId2,
            ], {});
            expect(perpetualPositions).toEqual(expect.objectContaining({
                [constants_1.defaultSubaccountId]: {
                    [constants_1.defaultPerpetualMarket.id]: expect.objectContaining(constants_1.defaultPerpetualPosition),
                    [perpetualPosition2.perpetualId]: expect.objectContaining(perpetualPosition2),
                },
                [constants_1.defaultSubaccountId2]: {
                    [perpetualPosition3.perpetualId]: expect.objectContaining(perpetualPosition3),
                },
            }));
        });
        it('Successfully gets no open positions for a subaccountId', async () => {
            const perpetualPositions = await PerpetualPositionTable.findOpenPositionsForSubaccounts([constants_1.defaultPerpetualPosition.subaccountId]);
            expect(perpetualPositions).toEqual({});
        });
    });
    describe('closePosition', () => {
        it('Successfully able to close position', async () => {
            const perpetualPosition = await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
            const closedAt = luxon_1.DateTime.utc().toISO();
            const closedAtHeight = '2';
            const closeEventId = constants_1.defaultTendermintEventId3;
            const settledFunding = '300000';
            const closedPerpetualPosition = await PerpetualPositionTable.closePosition(perpetualPosition, {
                id: defaultPerpetualPositionId,
                closedAt,
                closedAtHeight,
                closeEventId,
                settledFunding,
            });
            expect(closedPerpetualPosition).toEqual({
                ...perpetualPosition,
                status: types_1.PerpetualPositionStatus.CLOSED,
                closedAt,
                closedAtHeight,
                closeEventId,
                lastEventId: closeEventId,
                settledFunding,
                size: '0',
            });
        });
        it('Successfully able to close position, with fixed-point notation size/price values', async () => {
            // These values will be converted to strings in exponential notation by the big.js library
            // if `toString` is used instead of `toFixed`
            const tinySize = '0.0000001';
            const tinyMaxSize = '0.00000025';
            const tinyPrice = '0.00000003';
            const perpetualPosition = await PerpetualPositionTable.create({
                ...constants_1.defaultPerpetualPosition,
                size: tinySize,
                maxSize: tinyMaxSize,
                sumOpen: tinySize,
                entryPrice: tinyPrice,
            });
            const closedAt = luxon_1.DateTime.utc().toISO();
            const closedAtHeight = '2';
            const closeEventId = constants_1.defaultTendermintEventId3;
            const settledFunding = '0.000000035';
            const closedPerpetualPosition = await PerpetualPositionTable.closePosition(perpetualPosition, {
                id: defaultPerpetualPositionId,
                closedAt,
                closedAtHeight,
                closeEventId,
                settledFunding,
            });
            expect(closedPerpetualPosition).toEqual({
                ...perpetualPosition,
                status: types_1.PerpetualPositionStatus.CLOSED,
                closedAt,
                closedAtHeight,
                closeEventId,
                lastEventId: closeEventId,
                settledFunding,
                size: '0',
            });
        });
        it('Unable to close position when position is already closed', async () => {
            const perpetualPosition = await PerpetualPositionTable.create({
                ...constants_1.defaultPerpetualPosition,
                status: types_1.PerpetualPositionStatus.CLOSED,
            });
            await expect(PerpetualPositionTable.closePosition(perpetualPosition, {
                id: defaultPerpetualPositionId,
                closedAt: constants_1.defaultPerpetualPosition.createdAt,
                closedAtHeight: constants_1.defaultPerpetualPosition.createdAtHeight,
                closeEventId: constants_1.defaultPerpetualPosition.openEventId,
                settledFunding: constants_1.defaultPerpetualPosition.settledFunding,
            })).rejects.toThrow(new errors_1.ValidationError('Unable to close because position is closed'));
        });
    });
    describe('getOpenInterestLong', () => {
        it('Successfully gets open interest long with positions', async () => {
            await Promise.all([
                PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
                PerpetualPositionTable.create({
                    ...constants_1.defaultPerpetualPosition,
                    side: types_1.PositionSide.SHORT,
                    openEventId: constants_1.defaultTendermintEventId2,
                }),
                PerpetualPositionTable.create({
                    ...constants_1.defaultPerpetualPosition,
                    perpetualId: '1',
                    side: types_1.PositionSide.SHORT,
                    openEventId: constants_1.defaultTendermintEventId3,
                }),
            ]);
            // defaultPerpetualPosition.createdAt is the current time the object is created,
            // so which should be in the last 24 before this function is called
            const marketOpenInterest = await PerpetualPositionTable.getOpenInterestLong([constants_1.defaultPerpetualPosition.perpetualId]);
            expect(marketOpenInterest).toEqual({
                [constants_1.defaultPerpetualPosition.perpetualId]: {
                    perpetualMarketId: constants_1.defaultPerpetualPosition.perpetualId,
                    openInterest: constants_1.defaultPerpetualPosition.size,
                },
            });
        });
        it('Gets default data when there are no matching positions', async () => {
            const fakePerpetualId = '2';
            await Promise.all([
                PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
                PerpetualPositionTable.create({
                    ...constants_1.defaultPerpetualPosition,
                    side: types_1.PositionSide.SHORT,
                    openEventId: constants_1.defaultTendermintEventId2,
                }),
                PerpetualPositionTable.create({
                    ...constants_1.defaultPerpetualPosition,
                    perpetualId: '1',
                    side: types_1.PositionSide.SHORT,
                    openEventId: constants_1.defaultTendermintEventId3,
                }),
            ]);
            const marketOpenInterest = await PerpetualPositionTable.getOpenInterestLong([
                fakePerpetualId,
            ]);
            expect(marketOpenInterest).toEqual({
                [fakePerpetualId]: { perpetualMarketId: fakePerpetualId, openInterest: '0' },
            });
        });
        it('Successfully gets open interest long with no positions', async () => {
            const marketOpenInterest = await PerpetualPositionTable.getOpenInterestLong([constants_1.defaultPerpetualMarket.id]);
            expect(marketOpenInterest).toEqual({
                [constants_1.defaultPerpetualMarket.id]: {
                    perpetualMarketId: constants_1.defaultPerpetualMarket.id,
                    openInterest: '0',
                },
            });
        });
    });
    describe('bulkCreate', () => {
        it('Successfully creates multiple positions', async () => {
            const createdPositions = await PerpetualPositionTable.bulkCreate([
                constants_1.defaultPerpetualPosition,
                {
                    ...constants_1.defaultPerpetualPosition,
                    side: types_1.PositionSide.SHORT,
                    openEventId: constants_1.defaultTendermintEventId2,
                },
            ]);
            expect(createdPositions).toHaveLength(2);
            for (let i = 0; i < createdPositions.length; i += 1) {
                const position = createdPositions[i];
                expect(await PerpetualPositionTable.findById(position.id)).toEqual(position);
            }
        });
    });
    describe('bulkUpdateSubaccountFields', () => {
        it.each([
            [
                'with no maxSize update',
                {
                    id: defaultPerpetualPositionId,
                    lastEventId: constants_1.defaultPerpetualPosition.lastEventId,
                    settledFunding: '0',
                    status: types_1.PerpetualPositionStatus.CLOSED,
                    size: constants_1.defaultPerpetualPosition.maxSize,
                },
            ],
            [
                'with maxSize updated',
                {
                    id: defaultPerpetualPositionId,
                    lastEventId: constants_1.defaultPerpetualPosition.lastEventId,
                    settledFunding: '0',
                    status: types_1.PerpetualPositionStatus.CLOSED,
                    size: (0, big_js_1.Big)(constants_1.defaultPerpetualPosition.maxSize).plus(10).toString(),
                },
            ],
            [
                'with all fields',
                {
                    id: defaultPerpetualPositionId,
                    lastEventId: constants_1.defaultPerpetualPosition.lastEventId,
                    settledFunding: '0',
                    status: types_1.PerpetualPositionStatus.CLOSED,
                    size: (0, big_js_1.Big)(constants_1.defaultPerpetualPosition.maxSize).plus(10).toString(),
                    closedAtHeight: constants_1.defaultBlock2.blockHeight,
                    closedAt: constants_1.defaultBlock2.time,
                    closeEventId: constants_1.defaultPerpetualPosition.lastEventId,
                },
            ],
        ])('Successfully updates a position %s', async (_name, updateObject) => {
            const position = await PerpetualPositionTable.create(constants_1.defaultPerpetualPosition);
            await PerpetualPositionTable.bulkUpdateSubaccountFields([updateObject]);
            expect(await PerpetualPositionTable.findById(position.id)).toEqual(expect.objectContaining(updateObject));
        });
        it('Successfully processes no updates', async () => {
            expect(await PerpetualPositionTable.bulkUpdateSubaccountFields([])).toBeUndefined();
        });
        it('Successfully updates multiple positions', async () => {
            const [position, secondPosition] = await Promise.all([
                PerpetualPositionTable.create(constants_1.defaultPerpetualPosition),
                PerpetualPositionTable.create({
                    ...constants_1.defaultPerpetualPosition,
                    openEventId: constants_1.defaultTendermintEventId2,
                }),
            ]);
            const updateObject = {
                id: position.id,
                lastEventId: position.lastEventId,
                settledFunding: '0',
                status: types_1.PerpetualPositionStatus.CLOSED,
                size: position.maxSize,
            };
            const secondUpdateObject = {
                ...updateObject,
                id: secondPosition.id,
                size: (0, big_js_1.Big)(position.maxSize).plus(10).toString(),
            };
            await PerpetualPositionTable.bulkUpdateSubaccountFields([updateObject, secondUpdateObject]);
            expect(await PerpetualPositionTable.findById(position.id)).toEqual(expect.objectContaining(updateObject));
            expect(await PerpetualPositionTable.findById(secondPosition.id)).toEqual(expect.objectContaining(secondUpdateObject));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,