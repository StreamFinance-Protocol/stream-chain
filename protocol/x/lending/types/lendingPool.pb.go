// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/lending/lendingPool.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InterestRateModel defines the parameters for the interest rate model.
type InterestRateModel struct {
	BaseRate        float64 `protobuf:"fixed64,1,opt,name=baseRate,proto3" json:"baseRate,omitempty"`
	Multiplier      float64 `protobuf:"fixed64,2,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	JumpMultiplier  float64 `protobuf:"fixed64,3,opt,name=jumpMultiplier,proto3" json:"jumpMultiplier,omitempty"`
	TargetThreshold float64 `protobuf:"fixed64,4,opt,name=targetThreshold,proto3" json:"targetThreshold,omitempty"`
}

func (m *InterestRateModel) Reset()         { *m = InterestRateModel{} }
func (m *InterestRateModel) String() string { return proto.CompactTextString(m) }
func (*InterestRateModel) ProtoMessage()    {}
func (*InterestRateModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_905268fbaf45c546, []int{0}
}
func (m *InterestRateModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterestRateModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterestRateModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterestRateModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterestRateModel.Merge(m, src)
}
func (m *InterestRateModel) XXX_Size() int {
	return m.Size()
}
func (m *InterestRateModel) XXX_DiscardUnknown() {
	xxx_messageInfo_InterestRateModel.DiscardUnknown(m)
}

var xxx_messageInfo_InterestRateModel proto.InternalMessageInfo

func (m *InterestRateModel) GetBaseRate() float64 {
	if m != nil {
		return m.BaseRate
	}
	return 0
}

func (m *InterestRateModel) GetMultiplier() float64 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *InterestRateModel) GetJumpMultiplier() float64 {
	if m != nil {
		return m.JumpMultiplier
	}
	return 0
}

func (m *InterestRateModel) GetTargetThreshold() float64 {
	if m != nil {
		return m.TargetThreshold
	}
	return 0
}

// PoolParams defines the parameters for the pool.
type PoolParams struct {
	AssetDenom        string             `protobuf:"bytes,1,opt,name=assetDenom,proto3" json:"assetDenom,omitempty"`
	InterestRateModel *InterestRateModel `protobuf:"bytes,2,opt,name=interestRateModel,proto3" json:"interestRateModel,omitempty"`
}

func (m *PoolParams) Reset()         { *m = PoolParams{} }
func (m *PoolParams) String() string { return proto.CompactTextString(m) }
func (*PoolParams) ProtoMessage()    {}
func (*PoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_905268fbaf45c546, []int{1}
}
func (m *PoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolParams.Merge(m, src)
}
func (m *PoolParams) XXX_Size() int {
	return m.Size()
}
func (m *PoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_PoolParams proto.InternalMessageInfo

func (m *PoolParams) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

func (m *PoolParams) GetInterestRateModel() *InterestRateModel {
	if m != nil {
		return m.InterestRateModel
	}
	return nil
}

// Pool represents the data structure for the pool.
type Pool struct {
	TotalDeposits      *types.Coin `protobuf:"bytes,1,opt,name=totalDeposits,proto3" json:"totalDeposits,omitempty"`
	TotalBorrows       *types.Coin `protobuf:"bytes,2,opt,name=totalBorrows,proto3" json:"totalBorrows,omitempty"`
	CurrentLendingRate float64     `protobuf:"fixed64,3,opt,name=currentLendingRate,proto3" json:"currentLendingRate,omitempty"`
	CurrentBorrowRate  float64     `protobuf:"fixed64,4,opt,name=currentBorrowRate,proto3" json:"currentBorrowRate,omitempty"`
	Params             *PoolParams `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_905268fbaf45c546, []int{2}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetTotalDeposits() *types.Coin {
	if m != nil {
		return m.TotalDeposits
	}
	return nil
}

func (m *Pool) GetTotalBorrows() *types.Coin {
	if m != nil {
		return m.TotalBorrows
	}
	return nil
}

func (m *Pool) GetCurrentLendingRate() float64 {
	if m != nil {
		return m.CurrentLendingRate
	}
	return 0
}

func (m *Pool) GetCurrentBorrowRate() float64 {
	if m != nil {
		return m.CurrentBorrowRate
	}
	return 0
}

func (m *Pool) GetParams() *PoolParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*InterestRateModel)(nil), "dydxprotocol.lending.InterestRateModel")
	proto.RegisterType((*PoolParams)(nil), "dydxprotocol.lending.PoolParams")
	proto.RegisterType((*Pool)(nil), "dydxprotocol.lending.Pool")
}

func init() {
	proto.RegisterFile("dydxprotocol/lending/lendingPool.proto", fileDescriptor_905268fbaf45c546)
}

var fileDescriptor_905268fbaf45c546 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6b, 0x14, 0x41,
	0x10, 0xdd, 0x89, 0x31, 0x68, 0xc7, 0x0f, 0xb6, 0xf1, 0xb0, 0x59, 0x64, 0x08, 0x7b, 0x88, 0x39,
	0x98, 0x6e, 0x12, 0x2f, 0x5e, 0x44, 0x88, 0x41, 0x11, 0x0c, 0x2c, 0xa3, 0x5e, 0xbc, 0x48, 0xcf,
	0x4c, 0x39, 0xdb, 0xd2, 0xd3, 0x35, 0x74, 0xd7, 0x68, 0x72, 0xf6, 0x0f, 0xf8, 0x0b, 0x04, 0xff,
	0x8d, 0xc7, 0x1c, 0x3d, 0xca, 0xee, 0x1f, 0x91, 0xe9, 0x99, 0x6c, 0x36, 0xbb, 0x4b, 0x4e, 0x4d,
	0xbd, 0xf7, 0xaa, 0x78, 0xfd, 0x8a, 0x62, 0x7b, 0xf9, 0x79, 0x7e, 0x56, 0x39, 0x24, 0xcc, 0xd0,
	0x48, 0x03, 0x36, 0xd7, 0xb6, 0xb8, 0x7c, 0xc7, 0x88, 0x46, 0x04, 0x92, 0x3f, 0x5a, 0xd4, 0x89,
	0x8e, 0x1f, 0xee, 0x64, 0xe8, 0x4b, 0xf4, 0x9f, 0x03, 0x21, 0xdb, 0xa2, 0x6d, 0x18, 0x3e, 0x2e,
	0x10, 0x0b, 0x03, 0x32, 0x54, 0x69, 0xfd, 0x45, 0x7a, 0x72, 0x75, 0x46, 0x1d, 0x1b, 0xb7, 0x5a,
	0x99, 0x2a, 0x0f, 0xf2, 0xdb, 0x61, 0x0a, 0xa4, 0x0e, 0x65, 0x86, 0xda, 0xb6, 0xfc, 0xe8, 0x77,
	0xc4, 0xfa, 0x6f, 0x2d, 0x81, 0x03, 0x4f, 0x89, 0x22, 0x38, 0xc5, 0x1c, 0x0c, 0x1f, 0xb2, 0x3b,
	0x4d, 0x43, 0x03, 0x0c, 0xa2, 0xdd, 0x68, 0x3f, 0x4a, 0xe6, 0x35, 0x8f, 0x19, 0x2b, 0x6b, 0x43,
	0xba, 0x32, 0x1a, 0xdc, 0x60, 0x23, 0xb0, 0x0b, 0x08, 0xdf, 0x63, 0x0f, 0xbe, 0xd6, 0x65, 0x75,
	0x7a, 0xa5, 0xb9, 0x15, 0x34, 0x4b, 0x28, 0xdf, 0x67, 0x0f, 0x49, 0xb9, 0x02, 0xe8, 0xc3, 0xc4,
	0x81, 0x9f, 0xa0, 0xc9, 0x07, 0x9b, 0x41, 0xb8, 0x0c, 0x8f, 0x7e, 0x44, 0x8c, 0x35, 0x09, 0x8d,
	0x95, 0x53, 0xa5, 0x6f, 0x0c, 0x28, 0xef, 0x81, 0x4e, 0xc0, 0x62, 0x19, 0xec, 0xdd, 0x4d, 0x16,
	0x10, 0xfe, 0x91, 0xf5, 0xf5, 0xf2, 0x8f, 0x82, 0xcf, 0xed, 0xa3, 0x27, 0x62, 0x5d, 0xba, 0x62,
	0x25, 0x80, 0x64, 0x75, 0xc2, 0xe8, 0xd7, 0x06, 0xdb, 0x6c, 0x5c, 0xf0, 0x97, 0xec, 0x3e, 0x21,
	0x29, 0x73, 0x02, 0x15, 0x7a, 0x4d, 0x3e, 0x58, 0xd8, 0x3e, 0xda, 0x11, 0xdd, 0x5a, 0x9a, 0xa4,
	0x44, 0x17, 0xb5, 0x78, 0x85, 0xda, 0x26, 0xd7, 0xf5, 0xfc, 0x05, 0xbb, 0x17, 0x80, 0x63, 0x74,
	0x0e, 0xbf, 0xfb, 0xce, 0xdb, 0x0d, 0xfd, 0xd7, 0xe4, 0x5c, 0x30, 0x9e, 0xd5, 0xce, 0x81, 0xa5,
	0x77, 0xad, 0xff, 0xb0, 0xa6, 0x36, 0xe4, 0x35, 0x0c, 0x7f, 0xca, 0xfa, 0x1d, 0xda, 0x4e, 0x08,
	0xf2, 0x36, 0xea, 0x55, 0x82, 0x3f, 0x67, 0x5b, 0x55, 0xc8, 0x79, 0x70, 0x3b, 0xd8, 0xda, 0x5d,
	0x1f, 0xd9, 0xd5, 0x3e, 0x92, 0x4e, 0x7f, 0xac, 0xfe, 0x4c, 0xe3, 0xe8, 0x62, 0x1a, 0x47, 0xff,
	0xa6, 0x71, 0xf4, 0x73, 0x16, 0xf7, 0x2e, 0x66, 0x71, 0xef, 0xef, 0x2c, 0xee, 0x7d, 0x7a, 0x53,
	0x68, 0x9a, 0xd4, 0xa9, 0xc8, 0xb0, 0x94, 0xef, 0xc9, 0x81, 0x2a, 0x5f, 0x6b, 0xab, 0x6c, 0x06,
	0x07, 0xe3, 0xcb, 0x83, 0xf0, 0x01, 0x3e, 0xc8, 0x26, 0x4a, 0x5b, 0x39, 0x3f, 0x93, 0xb3, 0xf9,
	0xa1, 0xd0, 0x79, 0x05, 0x3e, 0xdd, 0x0a, 0xcc, 0xb3, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x36,
	0x1c, 0x37, 0x1c, 0x4d, 0x03, 0x00, 0x00,
}

func (m *InterestRateModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterestRateModel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterestRateModel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetThreshold))))
		i--
		dAtA[i] = 0x21
	}
	if m.JumpMultiplier != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.JumpMultiplier))))
		i--
		dAtA[i] = 0x19
	}
	if m.Multiplier != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Multiplier))))
		i--
		dAtA[i] = 0x11
	}
	if m.BaseRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BaseRate))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *PoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InterestRateModel != nil {
		{
			size, err := m.InterestRateModel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintLendingPool(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CurrentBorrowRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentBorrowRate))))
		i--
		dAtA[i] = 0x21
	}
	if m.CurrentLendingRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentLendingRate))))
		i--
		dAtA[i] = 0x19
	}
	if m.TotalBorrows != nil {
		{
			size, err := m.TotalBorrows.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalDeposits != nil {
		{
			size, err := m.TotalDeposits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLendingPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLendingPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovLendingPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterestRateModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRate != 0 {
		n += 9
	}
	if m.Multiplier != 0 {
		n += 9
	}
	if m.JumpMultiplier != 0 {
		n += 9
	}
	if m.TargetThreshold != 0 {
		n += 9
	}
	return n
}

func (m *PoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovLendingPool(uint64(l))
	}
	if m.InterestRateModel != nil {
		l = m.InterestRateModel.Size()
		n += 1 + l + sovLendingPool(uint64(l))
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDeposits != nil {
		l = m.TotalDeposits.Size()
		n += 1 + l + sovLendingPool(uint64(l))
	}
	if m.TotalBorrows != nil {
		l = m.TotalBorrows.Size()
		n += 1 + l + sovLendingPool(uint64(l))
	}
	if m.CurrentLendingRate != 0 {
		n += 9
	}
	if m.CurrentBorrowRate != 0 {
		n += 9
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovLendingPool(uint64(l))
	}
	return n
}

func sovLendingPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLendingPool(x uint64) (n int) {
	return sovLendingPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterestRateModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterestRateModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterestRateModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BaseRate = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Multiplier = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpMultiplier", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.JumpMultiplier = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetThreshold = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLendingPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLendingPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLendingPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRateModel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InterestRateModel == nil {
				m.InterestRateModel = &InterestRateModel{}
			}
			if err := m.InterestRateModel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLendingPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalDeposits == nil {
				m.TotalDeposits = &types.Coin{}
			}
			if err := m.TotalDeposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBorrows == nil {
				m.TotalBorrows = &types.Coin{}
			}
			if err := m.TotalBorrows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLendingRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentLendingRate = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBorrowRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentBorrowRate = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLendingPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLendingPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &PoolParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLendingPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLendingPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLendingPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLendingPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLendingPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLendingPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLendingPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLendingPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLendingPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLendingPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLendingPool = fmt.Errorf("proto: unexpected end of group")
)
