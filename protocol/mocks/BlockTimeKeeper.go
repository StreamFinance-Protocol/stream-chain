// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	blocktimetypes "github.com/StreamFinance-Protocol/stream-chain/protocol/x/blocktime/types"
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
)

// BlocktimeKeeper is an autogenerated mock type for the BlocktimeKeeper type
type BlocktimeKeeper struct {
	mock.Mock
}

// GetDowntimeInfoFor provides a mock function with given fields: ctx, duration
func (_m *BlocktimeKeeper) GetDowntimeInfoFor(ctx types.Context, duration time.Duration) blocktimetypes.AllDowntimeInfo_DowntimeInfo {
	ret := _m.Called(ctx, duration)

	if len(ret) == 0 {
		panic("no return value specified for GetDowntimeInfoFor")
	}

	var r0 blocktimetypes.AllDowntimeInfo_DowntimeInfo
	if rf, ok := ret.Get(0).(func(types.Context, time.Duration) blocktimetypes.AllDowntimeInfo_DowntimeInfo); ok {
		r0 = rf(ctx, duration)
	} else {
		r0 = ret.Get(0).(blocktimetypes.AllDowntimeInfo_DowntimeInfo)
	}

	return r0
}

// NewBlocktimeKeeper creates a new instance of BlocktimeKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlocktimeKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlocktimeKeeper {
	mock := &BlocktimeKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
