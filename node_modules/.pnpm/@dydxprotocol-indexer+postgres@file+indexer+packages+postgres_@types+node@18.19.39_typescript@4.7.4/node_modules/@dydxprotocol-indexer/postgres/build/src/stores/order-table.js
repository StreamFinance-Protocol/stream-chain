"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateStaleOrderStatusByIds = exports.findOpenLongTermOrConditionalOrders = exports.isLongTermOrConditionalOrder = exports.upsert = exports.findBySubaccountIdAndClobPairAfterHeight = exports.findBySubaccountIdAndClobPair = exports.findById = exports.update = exports.create = exports.findAll = exports.orderIdToUuid = exports.uuid = void 0;
const big_js_1 = __importDefault(require("big.js"));
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const order_model_1 = __importDefault(require("../models/order-model"));
const types_1 = require("../types");
const SubaccountTable = __importStar(require("./subaccount-table"));
function uuid(subaccountId, clientId, clobPairId, orderFlags) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${subaccountId}-${clientId}-${clobPairId}-${orderFlags}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
/**
 * Expects orderId.subaccountId, and orderId.clientId to exist.
 * @param order
 */
function orderIdToUuid(orderId) {
    return uuid(SubaccountTable.subaccountIdToUuid(orderId.subaccountId), orderId.clientId.toString(), orderId.clobPairId.toString(), orderId.orderFlags.toString());
}
exports.orderIdToUuid = orderIdToUuid;
async function findAll({ limit, id, subaccountId, clientId, clobPairId, side, size, totalFilled, price, type, statuses, reduceOnly, orderFlags, goodTilBlockBeforeOrAt, goodTilBlockTimeBeforeOrAt, clientMetadata, triggerPrice, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        subaccountId,
        clientId,
        clobPairId,
        side,
        size,
        totalFilled,
        price,
        type,
        statuses,
        reduceOnly,
        orderFlags,
        goodTilBlockBeforeOrAt,
        goodTilBlockTimeBeforeOrAt,
        clientMetadata,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(order_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OrderColumns.id, id);
    }
    if (subaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OrderColumns.subaccountId, subaccountId);
    }
    if (clientId !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.clientId, clientId);
    }
    if (clobPairId !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.clobPairId, clobPairId);
    }
    if (side !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.side, side);
    }
    if (size !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.size, size);
    }
    if (totalFilled !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.totalFilled, totalFilled);
    }
    if (price !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.price, price);
    }
    if (type !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.type, type);
    }
    if (statuses !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.OrderColumns.status, statuses);
    }
    if (reduceOnly !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.reduceOnly, reduceOnly);
    }
    if (orderFlags !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.orderFlags, orderFlags);
    }
    if (clientMetadata !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.clientMetadata, clientMetadata);
    }
    if (triggerPrice !== undefined) {
        baseQuery = baseQuery.where(types_1.OrderColumns.triggerPrice, triggerPrice);
    }
    // If filtering by `goodTilBlock`, filter out all rows with NULL `goodTilBlock`
    if (goodTilBlockBeforeOrAt !== undefined) {
        baseQuery = baseQuery.whereNotNull(types_1.OrderColumns.goodTilBlock).andWhere(types_1.OrderColumns.goodTilBlock, '<=', goodTilBlockBeforeOrAt);
    }
    // If filtering by `goodTilBlockTime`, filter out all rows with NULL `goodTilBlockTime`
    if (goodTilBlockTimeBeforeOrAt !== undefined) {
        baseQuery = baseQuery.whereNotNull(types_1.OrderColumns.goodTilBlockTime).andWhere(types_1.OrderColumns.goodTilBlockTime, '<=', goodTilBlockTimeBeforeOrAt);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(orderToCreate, options = { txId: undefined }) {
    return order_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(orderToCreate.subaccountId, orderToCreate.clientId, orderToCreate.clobPairId, orderToCreate.orderFlags),
        ...orderToCreate,
    }).returning('*');
}
exports.create = create;
function getOrderStatus(orderToUpsert, totalFilled) {
    if (orderToUpsert.status === types_1.OrderStatus.BEST_EFFORT_CANCELED) {
        return types_1.OrderStatus.BEST_EFFORT_CANCELED;
    }
    if ((0, big_js_1.default)(orderToUpsert.size).lte(totalFilled)) {
        return types_1.OrderStatus.FILLED;
    }
    return orderToUpsert.status;
}
async function update({ ...fields }, options = { txId: undefined }) {
    const order = await order_model_1.default.query(transaction_1.default.get(options.txId)).findById(fields.id).patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of orders.
    return order;
}
exports.update = update;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(order_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findBySubaccountIdAndClobPair(subaccountId, clobPairId, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(order_model_1.default, options);
    const orders = await baseQuery
        .where(types_1.OrderColumns.subaccountId, subaccountId)
        .where(types_1.OrderColumns.clobPairId, clobPairId)
        .returning('*');
    return orders;
}
exports.findBySubaccountIdAndClobPair = findBySubaccountIdAndClobPair;
async function findBySubaccountIdAndClobPairAfterHeight(subaccountId, clobPairId, height, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(order_model_1.default, options);
    const orders = await baseQuery
        .where(types_1.OrderColumns.subaccountId, subaccountId)
        .where(types_1.OrderColumns.clobPairId, clobPairId)
        .where(types_1.OrderColumns.createdAtHeight, '>=', height)
        .returning('*');
    return orders;
}
exports.findBySubaccountIdAndClobPairAfterHeight = findBySubaccountIdAndClobPairAfterHeight;
async function upsert(orderToUpsert, options = { txId: undefined }) {
    const orderId = uuid(orderToUpsert.subaccountId, orderToUpsert.clientId, orderToUpsert.clobPairId, orderToUpsert.orderFlags);
    const order = await findById(orderId, options);
    if (order === undefined) {
        return create({
            ...orderToUpsert,
            status: getOrderStatus(orderToUpsert, orderToUpsert.totalFilled),
        }, options);
    }
    const updatedOrder = await update({
        ...orderToUpsert,
        status: getOrderStatus(orderToUpsert, orderToUpsert.totalFilled),
        id: orderId,
    }, options);
    if (updatedOrder === undefined) {
        throw Error('order must exist after update');
    }
    return updatedOrder;
}
exports.upsert = upsert;
/**
 * Checks if the order is a long term or conditional order.
 * @param orderFlags
 */
function isLongTermOrConditionalOrder(orderFlags) {
    const flags = parseInt(orderFlags, 10);
    const isLongTerm = Math.floor(flags / 64) % 2 === 1;
    const isConditional = Math.floor(flags / 32) % 2 === 1;
    return isLongTerm || isConditional;
}
exports.isLongTermOrConditionalOrder = isLongTermOrConditionalOrder;
/**
 * Finds all open long term or conditional orders.
 * @param options
 */
async function findOpenLongTermOrConditionalOrders(options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(order_model_1.default, options);
    /* eslint-disable */
    return baseQuery
        .where(types_1.OrderColumns.status, types_1.OrderStatus.OPEN)
        .andWhere(function () {
        this.whereRaw('FLOOR("orderFlags"::integer / 64)::integer % 2 = 1')
            .orWhereRaw('FLOOR("orderFlags"::integer / 32)::integer % 2 = 1');
    })
        .returning('*');
}
exports.findOpenLongTermOrConditionalOrders = findOpenLongTermOrConditionalOrders;
async function updateStaleOrderStatusByIds(oldStatus, newStatus, latestBlockHeight, ids, options = { txId: undefined }) {
    const updatedOrders = await order_model_1.default
        .query(transaction_1.default.get(options.txId))
        .where(types_1.OrderColumns.status, oldStatus)
        .whereNotNull(types_1.OrderColumns.goodTilBlock)
        .where(types_1.OrderColumns.goodTilBlock, '<', latestBlockHeight)
        .whereIn(types_1.OrderColumns.id, ids)
        .patch({ status: newStatus })
        .returning('*');
    return updatedOrders;
}
exports.updateStaleOrderStatusByIds = updateStaleOrderStatusByIds;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RvcmVzL29yZGVyLXRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0Esb0RBQXlCO0FBR3pCLDRDQUErRTtBQUMvRSw4REFBb0Y7QUFDcEYseUVBQWlEO0FBQ2pELDBDQUEwQztBQUMxQyx3RUFBK0M7QUFDL0Msb0NBVWtCO0FBQ2xCLG9FQUFzRDtBQUV0RCxTQUFnQixJQUFJLENBQ2xCLFlBQW9CLEVBQ3BCLFFBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLFVBQWtCO0lBRWxCLHNFQUFzRTtJQUN0RSxPQUFPLElBQUEsY0FBTyxFQUNaLE1BQU0sQ0FBQyxJQUFJLENBQ1QsR0FBRyxZQUFZLElBQUksUUFBUSxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUUsRUFDekQsaUNBQXFCLENBQ3RCLENBQ0YsQ0FBQztBQUNKLENBQUM7QUFiRCxvQkFhQztBQUVEOzs7R0FHRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxPQUF1QjtJQUNuRCxPQUFPLElBQUksQ0FDVCxlQUFlLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLFlBQWEsQ0FBQyxFQUN6RCxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUMzQixPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxFQUM3QixPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUM5QixDQUFDO0FBQ0osQ0FBQztBQVBELHNDQU9DO0FBRU0sS0FBSyxVQUFVLE9BQU8sQ0FDM0IsRUFDRSxLQUFLLEVBQ0wsRUFBRSxFQUNGLFlBQVksRUFDWixRQUFRLEVBQ1IsVUFBVSxFQUNWLElBQUksRUFDSixJQUFJLEVBQ0osV0FBVyxFQUNYLEtBQUssRUFDTCxJQUFJLEVBQ0osUUFBUSxFQUNSLFVBQVUsRUFDVixVQUFVLEVBQ1Ysc0JBQXNCLEVBQ3RCLDBCQUEwQixFQUMxQixjQUFjLEVBQ2QsWUFBWSxHQUNLLEVBQ25CLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEtBQUs7UUFDTCxFQUFFO1FBQ0YsWUFBWTtRQUNaLFFBQVE7UUFDUixVQUFVO1FBQ1YsSUFBSTtRQUNKLElBQUk7UUFDSixXQUFXO1FBQ1gsS0FBSztRQUNMLElBQUk7UUFDSixRQUFRO1FBQ1IsVUFBVTtRQUNWLFVBQVU7UUFDVixzQkFBc0I7UUFDdEIsMEJBQTBCO1FBQzFCLGNBQWM7S0FDQSxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUE2QixJQUFBLCtCQUFjLEVBQ3RELHFCQUFVLEVBQ1YsT0FBTyxDQUNSLENBQUM7SUFFRixJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7UUFDcEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsb0JBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDcEQ7SUFFRCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsb0JBQVksQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDeEU7SUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDMUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDNUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDbEU7SUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7UUFDN0IsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDcEU7SUFFRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7UUFDdkIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEQ7SUFFRCxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7UUFDdEIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDdEQ7SUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDMUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsb0JBQVksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDOUQ7SUFFRCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDNUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDbEU7SUFFRCxJQUFJLFVBQVUsS0FBSyxTQUFTLEVBQUU7UUFDNUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7S0FDbEU7SUFFRCxJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7UUFDaEMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsb0JBQVksQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLENBQUM7S0FDMUU7SUFFRCxJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUU7UUFDOUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFL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