// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/ratelimit/dai_yield_epoch.proto

package types

import (
	fmt "fmt"
	types "github.com/StreamFinance-Protocol/stream-chain/protocol/x/prices/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DaiYieldEpochParams defines the parameters for the DaiYieldEpoch
type DaiYieldEpochParams struct {
	// Amount of trading DAI minted during the epoch
	TradingDaiMinted string `protobuf:"bytes,1,opt,name=tradingDaiMinted,proto3" json:"tradingDaiMinted,omitempty"`
	// Total amount of trading DAI available before minting for the epoch
	TotalTradingDaiPreMint string `protobuf:"bytes,2,opt,name=totalTradingDaiPreMint,proto3" json:"totalTradingDaiPreMint,omitempty"`
	// Total amount of trading DAI claimed for the epoch
	TotalTradingDaiClaimedForEpoch string `protobuf:"bytes,3,opt,name=totalTradingDaiClaimedForEpoch,proto3" json:"totalTradingDaiClaimedForEpoch,omitempty"`
	// Block number corresponding to the epoch
	BlockNumber uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	// Market prices for the epoch
	EpochMarketPrices []*types.MarketPrice `protobuf:"bytes,5,rep,name=epochMarketPrices,proto3" json:"epochMarketPrices,omitempty"`
}

func (m *DaiYieldEpochParams) Reset()         { *m = DaiYieldEpochParams{} }
func (m *DaiYieldEpochParams) String() string { return proto.CompactTextString(m) }
func (*DaiYieldEpochParams) ProtoMessage()    {}
func (*DaiYieldEpochParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b0663f4a3e9fcce, []int{0}
}
func (m *DaiYieldEpochParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaiYieldEpochParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaiYieldEpochParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaiYieldEpochParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaiYieldEpochParams.Merge(m, src)
}
func (m *DaiYieldEpochParams) XXX_Size() int {
	return m.Size()
}
func (m *DaiYieldEpochParams) XXX_DiscardUnknown() {
	xxx_messageInfo_DaiYieldEpochParams.DiscardUnknown(m)
}

var xxx_messageInfo_DaiYieldEpochParams proto.InternalMessageInfo

func (m *DaiYieldEpochParams) GetTradingDaiMinted() string {
	if m != nil {
		return m.TradingDaiMinted
	}
	return ""
}

func (m *DaiYieldEpochParams) GetTotalTradingDaiPreMint() string {
	if m != nil {
		return m.TotalTradingDaiPreMint
	}
	return ""
}

func (m *DaiYieldEpochParams) GetTotalTradingDaiClaimedForEpoch() string {
	if m != nil {
		return m.TotalTradingDaiClaimedForEpoch
	}
	return ""
}

func (m *DaiYieldEpochParams) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *DaiYieldEpochParams) GetEpochMarketPrices() []*types.MarketPrice {
	if m != nil {
		return m.EpochMarketPrices
	}
	return nil
}

func init() {
	proto.RegisterType((*DaiYieldEpochParams)(nil), "dydxprotocol.ratelimit.DaiYieldEpochParams")
}

func init() {
	proto.RegisterFile("dydxprotocol/ratelimit/dai_yield_epoch.proto", fileDescriptor_4b0663f4a3e9fcce)
}

var fileDescriptor_4b0663f4a3e9fcce = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0x9b, 0xb6, 0xf7, 0xc2, 0x4d, 0x37, 0xd7, 0x28, 0x25, 0x74, 0x31, 0x04, 0x17, 0x52,
	0xc4, 0x66, 0x40, 0xc1, 0x07, 0xd0, 0x5a, 0x70, 0xd1, 0x12, 0xaa, 0x1b, 0xdd, 0x94, 0x93, 0x99,
	0x31, 0x3d, 0x34, 0xc9, 0x84, 0xc9, 0x04, 0xda, 0xb7, 0xf0, 0x5d, 0x7c, 0x09, 0x97, 0x5d, 0xba,
	0x94, 0xf6, 0x45, 0x24, 0x53, 0x2d, 0xa9, 0x45, 0xdc, 0xe5, 0xfc, 0xff, 0x77, 0xc8, 0xcf, 0x7f,
	0xc6, 0x3e, 0xe3, 0x0b, 0x3e, 0xcf, 0x94, 0xd4, 0x92, 0xc9, 0x98, 0x2a, 0xd0, 0x22, 0xc6, 0x04,
	0x35, 0xe5, 0x80, 0x93, 0x05, 0x8a, 0x98, 0x4f, 0x44, 0x26, 0xd9, 0xd4, 0x37, 0x88, 0xd3, 0xae,
	0xd2, 0xfe, 0x96, 0xee, 0x1c, 0x45, 0x32, 0x92, 0x46, 0xa7, 0xe5, 0xd7, 0x86, 0xee, 0x90, 0x48,
	0xca, 0x28, 0x16, 0xd4, 0x4c, 0x61, 0xf1, 0x44, 0x79, 0xa1, 0x40, 0xa3, 0x4c, 0x3f, 0xfd, 0x93,
	0x9d, 0x7f, 0x67, 0x0a, 0x99, 0xc8, 0x69, 0x02, 0x6a, 0x26, 0xf4, 0xc4, 0x4c, 0x1b, 0xee, 0xf8,
	0xa5, 0x6e, 0x1f, 0xf6, 0x01, 0x1f, 0xca, 0x38, 0x37, 0x65, 0x9a, 0x00, 0x14, 0x24, 0xb9, 0x73,
	0x6a, 0xff, 0xd7, 0x0a, 0x38, 0xa6, 0x51, 0x1f, 0x70, 0x88, 0xa9, 0x16, 0xdc, 0xb5, 0x3c, 0xab,
	0xfb, 0x6f, 0xbc, 0xa7, 0x3b, 0x97, 0x76, 0x5b, 0x4b, 0x0d, 0xf1, 0xfd, 0xd6, 0x08, 0x94, 0x28,
	0x3d, 0xb7, 0x6e, 0x36, 0x7e, 0x70, 0x9d, 0x81, 0x4d, 0xbe, 0x39, 0xd7, 0x31, 0x60, 0x22, 0xf8,
	0x40, 0x2a, 0x93, 0xc5, 0x6d, 0x98, 0xfd, 0x5f, 0x28, 0xc7, 0xb3, 0x5b, 0x61, 0x2c, 0xd9, 0x6c,
	0x54, 0x24, 0xa1, 0x50, 0x6e, 0xd3, 0xb3, 0xba, 0xcd, 0x71, 0x55, 0x72, 0x46, 0xf6, 0x81, 0xa9,
	0x7a, 0x68, 0x0a, 0x08, 0x4c, 0x1b, 0xee, 0x1f, 0xaf, 0xd1, 0x6d, 0x9d, 0x7b, 0xfe, 0x4e, 0xef,
	0x9b, 0xa6, 0xfc, 0x0a, 0x38, 0xde, 0x5f, 0xbd, 0x62, 0xaf, 0x2b, 0x62, 0x2d, 0x57, 0xc4, 0x7a,
	0x5f, 0x11, 0xeb, 0x79, 0x4d, 0x6a, 0xcb, 0x35, 0xa9, 0xbd, 0xad, 0x49, 0xed, 0xf1, 0x36, 0x42,
	0x3d, 0x2d, 0x42, 0x9f, 0xc9, 0x84, 0xde, 0x69, 0x25, 0x20, 0x19, 0x60, 0x0a, 0x29, 0x13, 0xbd,
	0xe0, 0xeb, 0x18, 0xb9, 0x91, 0x7b, 0x6c, 0x0a, 0x98, 0xd2, 0xed, 0x89, 0xe6, 0x95, 0x07, 0xa2,
	0x17, 0x99, 0xc8, 0xc3, 0xbf, 0xc6, 0xbb, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff, 0x27, 0xb8, 0xb5,
	0x50, 0x47, 0x02, 0x00, 0x00,
}

func (m *DaiYieldEpochParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaiYieldEpochParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaiYieldEpochParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochMarketPrices) > 0 {
		for iNdEx := len(m.EpochMarketPrices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochMarketPrices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDaiYieldEpoch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.BlockNumber != 0 {
		i = encodeVarintDaiYieldEpoch(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TotalTradingDaiClaimedForEpoch) > 0 {
		i -= len(m.TotalTradingDaiClaimedForEpoch)
		copy(dAtA[i:], m.TotalTradingDaiClaimedForEpoch)
		i = encodeVarintDaiYieldEpoch(dAtA, i, uint64(len(m.TotalTradingDaiClaimedForEpoch)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalTradingDaiPreMint) > 0 {
		i -= len(m.TotalTradingDaiPreMint)
		copy(dAtA[i:], m.TotalTradingDaiPreMint)
		i = encodeVarintDaiYieldEpoch(dAtA, i, uint64(len(m.TotalTradingDaiPreMint)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TradingDaiMinted) > 0 {
		i -= len(m.TradingDaiMinted)
		copy(dAtA[i:], m.TradingDaiMinted)
		i = encodeVarintDaiYieldEpoch(dAtA, i, uint64(len(m.TradingDaiMinted)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDaiYieldEpoch(dAtA []byte, offset int, v uint64) int {
	offset -= sovDaiYieldEpoch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DaiYieldEpochParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TradingDaiMinted)
	if l > 0 {
		n += 1 + l + sovDaiYieldEpoch(uint64(l))
	}
	l = len(m.TotalTradingDaiPreMint)
	if l > 0 {
		n += 1 + l + sovDaiYieldEpoch(uint64(l))
	}
	l = len(m.TotalTradingDaiClaimedForEpoch)
	if l > 0 {
		n += 1 + l + sovDaiYieldEpoch(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovDaiYieldEpoch(uint64(m.BlockNumber))
	}
	if len(m.EpochMarketPrices) > 0 {
		for _, e := range m.EpochMarketPrices {
			l = e.Size()
			n += 1 + l + sovDaiYieldEpoch(uint64(l))
		}
	}
	return n
}

func sovDaiYieldEpoch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDaiYieldEpoch(x uint64) (n int) {
	return sovDaiYieldEpoch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DaiYieldEpochParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDaiYieldEpoch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaiYieldEpochParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaiYieldEpochParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingDaiMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingDaiMinted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTradingDaiPreMint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTradingDaiPreMint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTradingDaiClaimedForEpoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalTradingDaiClaimedForEpoch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMarketPrices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochMarketPrices = append(m.EpochMarketPrices, &types.MarketPrice{})
			if err := m.EpochMarketPrices[len(m.EpochMarketPrices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDaiYieldEpoch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDaiYieldEpoch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDaiYieldEpoch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDaiYieldEpoch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDaiYieldEpoch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDaiYieldEpoch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDaiYieldEpoch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDaiYieldEpoch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDaiYieldEpoch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDaiYieldEpoch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDaiYieldEpoch = fmt.Errorf("proto: unexpected end of group")
)
