"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compare = exports.findById = exports.create = exports.findAll = exports.createEventId = void 0;
const big_js_1 = require("big.js");
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const tendermint_event_model_1 = __importDefault(require("../models/tendermint-event-model"));
const types_1 = require("../types");
const THIRTY_TWO_BITS_IN_BYTES = 4;
function createEventId(blockHeight, transactionIndex, eventIndex) {
    const buffer = Buffer.alloc(3 * THIRTY_TWO_BITS_IN_BYTES);
    buffer.writeUInt32BE(Number(blockHeight), 0);
    // transactionIndex is -2 for BEGIN_BLOCK events, and -1 for END_BLOCK events.
    // Increment by 2 to ensure result is >= 0.
    buffer.writeUInt32BE(transactionIndex + 2, THIRTY_TWO_BITS_IN_BYTES);
    buffer.writeUInt32BE(eventIndex, 2 * THIRTY_TWO_BITS_IN_BYTES);
    return buffer;
}
exports.createEventId = createEventId;
async function findAll({ id, blockHeight, transactionIndex, eventIndex, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        blockHeight,
        transactionIndex,
        eventIndex,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(tendermint_event_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TendermintEventColumns.id, id);
    }
    if (blockHeight !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TendermintEventColumns.blockHeight, blockHeight);
    }
    if (transactionIndex !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TendermintEventColumns.transactionIndex, transactionIndex);
    }
    if (eventIndex !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TendermintEventColumns.eventIndex, eventIndex);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.TendermintEventColumns.id, types_1.Ordering.ASC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(tendermintEventToCreate, options = { txId: undefined }) {
    return tendermint_event_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: createEventId(tendermintEventToCreate.blockHeight, tendermintEventToCreate.transactionIndex, tendermintEventToCreate.eventIndex),
        ...tendermintEventToCreate,
    }).returning('*');
}
exports.create = create;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const events = await findAll({ id: [id] }, [], options);
    if (events.length === 0) {
        return undefined;
    }
    else {
        return events[0];
    }
}
exports.findById = findById;
function compare(eventA, eventB) {
    if (eventA.blockHeight !== eventB.blockHeight) {
        return (0, big_js_1.Big)(eventA.blockHeight).minus((0, big_js_1.Big)(eventB.blockHeight)).toNumber();
    }
    if (eventA.transactionIndex !== eventB.transactionIndex) {
        return eventA.transactionIndex - eventB.transactionIndex;
    }
    if (eventA.eventIndex !== eventB.eventIndex) {
        return eventA.eventIndex - eventB.eventIndex;
    }
    return 0;
}
exports.compare = compare;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuZGVybWludC1ldmVudC10YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvdGVuZGVybWludC1ldmVudC10YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtQ0FBNkI7QUFHN0IsNENBQXdEO0FBQ3hELDhEQUdtQztBQUNuQyx5RUFBaUQ7QUFDakQsOEZBQW9FO0FBQ3BFLG9DQVNrQjtBQUVsQixNQUFNLHdCQUF3QixHQUFXLENBQUMsQ0FBQztBQUUzQyxTQUFnQixhQUFhLENBQzNCLFdBQW1CLEVBQ25CLGdCQUF3QixFQUN4QixVQUFrQjtJQUdsQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzFELE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdDLDhFQUE4RTtJQUM5RSwyQ0FBMkM7SUFDM0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztJQUNyRSxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsd0JBQXdCLENBQUMsQ0FBQztJQUUvRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBZEQsc0NBY0M7QUFFTSxLQUFLLFVBQVUsT0FBTyxDQUMzQixFQUNFLEVBQUUsRUFDRixXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLFVBQVUsRUFDVixLQUFLLEdBQ3NCLEVBQzdCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEVBQUU7UUFDRixXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLFVBQVU7UUFDVixLQUFLO0tBQ1MsRUFDaEIsY0FBYyxDQUNmLENBQUM7SUFFRixJQUFJLFNBQVMsR0FBdUMsSUFBQSwrQkFBYyxF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