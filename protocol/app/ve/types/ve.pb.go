// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/ve/ve.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PricePair defines a pair of prices for a market.
type PricePair struct {
	MarketId  uint32 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SpotPrice []byte `protobuf:"bytes,2,opt,name=spot_price,json=spotPrice,proto3" json:"spot_price,omitempty"`
	PnlPrice  []byte `protobuf:"bytes,3,opt,name=pnl_price,json=pnlPrice,proto3" json:"pnl_price,omitempty"`
}

func (m *PricePair) Reset()         { *m = PricePair{} }
func (m *PricePair) String() string { return proto.CompactTextString(m) }
func (*PricePair) ProtoMessage()    {}
func (*PricePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac2326008e9fb0f, []int{0}
}
func (m *PricePair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PricePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PricePair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PricePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PricePair.Merge(m, src)
}
func (m *PricePair) XXX_Size() int {
	return m.Size()
}
func (m *PricePair) XXX_DiscardUnknown() {
	xxx_messageInfo_PricePair.DiscardUnknown(m)
}

var xxx_messageInfo_PricePair proto.InternalMessageInfo

func (m *PricePair) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *PricePair) GetSpotPrice() []byte {
	if m != nil {
		return m.SpotPrice
	}
	return nil
}

func (m *PricePair) GetPnlPrice() []byte {
	if m != nil {
		return m.PnlPrice
	}
	return nil
}

// Daemon VoteExtension defines the vote extension structure for daemon prices.
type DaemonVoteExtension struct {
	// Prices defines a map of marketId -> PricePair.
	Prices []PricePair `protobuf:"bytes,1,rep,name=prices,proto3" json:"prices"`
	// sDaiConversionRate defines the conversion rate for sDAI.
	SDaiConversionRate string `protobuf:"bytes,2,opt,name=sDaiConversionRate,proto3" json:"sDaiConversionRate,omitempty"`
}

func (m *DaemonVoteExtension) Reset()         { *m = DaemonVoteExtension{} }
func (m *DaemonVoteExtension) String() string { return proto.CompactTextString(m) }
func (*DaemonVoteExtension) ProtoMessage()    {}
func (*DaemonVoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_fac2326008e9fb0f, []int{1}
}
func (m *DaemonVoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaemonVoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaemonVoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaemonVoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonVoteExtension.Merge(m, src)
}
func (m *DaemonVoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *DaemonVoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonVoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonVoteExtension proto.InternalMessageInfo

func (m *DaemonVoteExtension) GetPrices() []PricePair {
	if m != nil {
		return m.Prices
	}
	return nil
}

func (m *DaemonVoteExtension) GetSDaiConversionRate() string {
	if m != nil {
		return m.SDaiConversionRate
	}
	return ""
}

func init() {
	proto.RegisterType((*PricePair)(nil), "dydxprotocol.ve.PricePair")
	proto.RegisterType((*DaemonVoteExtension)(nil), "dydxprotocol.ve.DaemonVoteExtension")
}

func init() { proto.RegisterFile("dydxprotocol/ve/ve.proto", fileDescriptor_fac2326008e9fb0f) }

var fileDescriptor_fac2326008e9fb0f = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4b, 0x03, 0x31,
	0x18, 0x86, 0x2f, 0x56, 0x4a, 0x2f, 0x2a, 0x42, 0x74, 0x38, 0x2a, 0xc6, 0xd2, 0xa9, 0x4b, 0x73,
	0xa0, 0x8b, 0x73, 0xad, 0x82, 0x5b, 0x39, 0xc1, 0xc1, 0xc1, 0x92, 0xde, 0x7d, 0xb4, 0xc1, 0x5e,
	0x12, 0x92, 0x78, 0xb4, 0x93, 0x7f, 0xc1, 0x9f, 0xd5, 0xb1, 0xa3, 0x93, 0x48, 0xfb, 0x47, 0x24,
	0x69, 0x2d, 0x22, 0x6e, 0x77, 0xcf, 0xf3, 0x7e, 0xe1, 0xe5, 0xc5, 0x49, 0x31, 0x2f, 0x66, 0xda,
	0x28, 0xa7, 0x72, 0x35, 0x4d, 0x2b, 0x48, 0x2b, 0x60, 0xe1, 0x97, 0x1c, 0xff, 0x36, 0xac, 0x82,
	0xe6, 0xe9, 0x58, 0x8d, 0x55, 0x00, 0xa9, 0xff, 0xda, 0xc4, 0xda, 0x05, 0x8e, 0x07, 0x46, 0xe4,
	0x30, 0xe0, 0xc2, 0x90, 0x33, 0x1c, 0x97, 0xdc, 0xbc, 0x80, 0x1b, 0x8a, 0x22, 0x41, 0x2d, 0xd4,
	0x39, 0xca, 0x1a, 0x1b, 0x70, 0x5f, 0x90, 0x73, 0x8c, 0xad, 0x56, 0x6e, 0xa8, 0x7d, 0x3c, 0xd9,
	0x6b, 0xa1, 0xce, 0x61, 0x16, 0x7b, 0x12, 0xee, 0xfd, 0xad, 0x96, 0xd3, 0xad, 0xad, 0x05, 0xdb,
	0xd0, 0x72, 0x1a, 0x64, 0xfb, 0x0d, 0x9f, 0xf4, 0x39, 0x94, 0x4a, 0x3e, 0x2a, 0x07, 0xb7, 0x33,
	0x07, 0xd2, 0x0a, 0x25, 0xc9, 0x35, 0xae, 0x87, 0xbc, 0x4d, 0x50, 0xab, 0xd6, 0x39, 0xb8, 0x6c,
	0xb2, 0x3f, 0xa5, 0xd9, 0xae, 0x5b, 0x6f, 0x7f, 0xf1, 0x79, 0x11, 0x65, 0xdb, 0x3c, 0x61, 0x98,
	0xd8, 0x3e, 0x17, 0x37, 0x4a, 0x56, 0x60, 0xfc, 0x5b, 0x19, 0x77, 0x9b, 0x52, 0x71, 0xf6, 0x8f,
	0xe9, 0x3d, 0x2f, 0x56, 0x14, 0x2d, 0x57, 0x14, 0x7d, 0xad, 0x28, 0x7a, 0x5f, 0xd3, 0x68, 0xb9,
	0xa6, 0xd1, 0xc7, 0x9a, 0x46, 0x4f, 0xfd, 0xb1, 0x70, 0x93, 0xd7, 0x11, 0xcb, 0x55, 0x99, 0x3e,
	0x38, 0x03, 0xbc, 0xbc, 0x13, 0x92, 0xcb, 0x1c, 0xba, 0x83, 0x9f, 0x59, 0x6d, 0xc0, 0xdd, 0x7c,
	0xc2, 0x85, 0x4c, 0x77, 0x63, 0x73, 0xad, 0xfd, 0xe0, 0x6e, 0xae, 0xc1, 0x8e, 0xea, 0x01, 0x5f,
	0x7d, 0x07, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x31, 0x6c, 0x39, 0x90, 0x01, 0x00, 0x00,
}

func (m *PricePair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PricePair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PricePair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PnlPrice) > 0 {
		i -= len(m.PnlPrice)
		copy(dAtA[i:], m.PnlPrice)
		i = encodeVarintVe(dAtA, i, uint64(len(m.PnlPrice)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpotPrice) > 0 {
		i -= len(m.SpotPrice)
		copy(dAtA[i:], m.SpotPrice)
		i = encodeVarintVe(dAtA, i, uint64(len(m.SpotPrice)))
		i--
		dAtA[i] = 0x12
	}
	if m.MarketId != 0 {
		i = encodeVarintVe(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DaemonVoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaemonVoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaemonVoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SDaiConversionRate) > 0 {
		i -= len(m.SDaiConversionRate)
		copy(dAtA[i:], m.SDaiConversionRate)
		i = encodeVarintVe(dAtA, i, uint64(len(m.SDaiConversionRate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prices) > 0 {
		for iNdEx := len(m.Prices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVe(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVe(dAtA []byte, offset int, v uint64) int {
	offset -= sovVe(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PricePair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovVe(uint64(m.MarketId))
	}
	l = len(m.SpotPrice)
	if l > 0 {
		n += 1 + l + sovVe(uint64(l))
	}
	l = len(m.PnlPrice)
	if l > 0 {
		n += 1 + l + sovVe(uint64(l))
	}
	return n
}

func (m *DaemonVoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Prices) > 0 {
		for _, e := range m.Prices {
			l = e.Size()
			n += 1 + l + sovVe(uint64(l))
		}
	}
	l = len(m.SDaiConversionRate)
	if l > 0 {
		n += 1 + l + sovVe(uint64(l))
	}
	return n
}

func sovVe(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVe(x uint64) (n int) {
	return sovVe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PricePair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PricePair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PricePair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotPrice = append(m.SpotPrice[:0], dAtA[iNdEx:postIndex]...)
			if m.SpotPrice == nil {
				m.SpotPrice = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PnlPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PnlPrice = append(m.PnlPrice[:0], dAtA[iNdEx:postIndex]...)
			if m.PnlPrice == nil {
				m.PnlPrice = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaemonVoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonVoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonVoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prices = append(m.Prices, PricePair{})
			if err := m.Prices[len(m.Prices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDaiConversionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SDaiConversionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVe
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVe
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVe
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVe        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVe          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVe = fmt.Errorf("proto: unexpected end of group")
)
