"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../src/types");
const ComplianceDataTable = __importStar(require("../../src/stores/compliance-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const constants_1 = require("../helpers/constants");
const luxon_1 = require("luxon");
describe('Compliance data store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    it('Successfully creates compliance data', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
    });
    it('Successfully finds all compliance data', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(2);
        expect(complianceData[0]).toEqual(constants_1.blockedComplianceData);
        expect(complianceData[1]).toEqual(constants_1.nonBlockedComplianceData);
    });
    it('Successfully finds compliance data with address', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findAll({
            address: [constants_1.blockedAddress],
        }, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        expect(complianceData[0]).toEqual(expect.objectContaining(constants_1.blockedComplianceData));
    });
    it('Successfully finds compliance data with updatedBeforeOrAt', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findAll({
            updatedBeforeOrAt: constants_1.blockedComplianceData.updatedAt,
        }, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        expect(complianceData[0]).toEqual(constants_1.blockedComplianceData);
    });
    it('Successfully finds compliance data with provider', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findAll({
            provider: types_1.ComplianceProvider.ELLIPTIC,
        }, [], { readReplica: true });
        expect(complianceData.length).toEqual(2);
        expect(complianceData[0]).toEqual(constants_1.blockedComplianceData);
        expect(complianceData[1]).toEqual(constants_1.nonBlockedComplianceData);
    });
    it('Successfully finds compliance data with blocked', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findAll({
            blocked: false,
        }, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        expect(complianceData[0]).toEqual(constants_1.nonBlockedComplianceData);
    });
    it('Successfully finds compliance data by address and provider', async () => {
        await Promise.all([
            ComplianceDataTable.create(constants_1.blockedComplianceData),
            ComplianceDataTable.create(constants_1.nonBlockedComplianceData),
        ]);
        const complianceData = await ComplianceDataTable.findByAddressAndProvider(constants_1.blockedAddress, types_1.ComplianceProvider.ELLIPTIC, { readReplica: true });
        expect(complianceData).toBeDefined();
        expect(complianceData).toEqual(constants_1.blockedComplianceData);
    });
    it('Unable finds compliance data', async () => {
        const complianceData = await ComplianceDataTable.findByAddressAndProvider(constants_1.blockedAddress, types_1.ComplianceProvider.ELLIPTIC, { readReplica: true });
        expect(complianceData).toEqual(undefined);
    });
    it('Successfully updates compliance data', async () => {
        await ComplianceDataTable.create(constants_1.nonBlockedComplianceData);
        const complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        const updatedTime = luxon_1.DateTime.fromISO(constants_1.nonBlockedComplianceData.updatedAt).plus(10).toUTC().toISO();
        await ComplianceDataTable.update({
            address: constants_1.nonBlockedComplianceData.address,
            provider: constants_1.nonBlockedComplianceData.provider,
            riskScore: '30.00',
            blocked: true,
            updatedAt: updatedTime,
        });
        const updatedComplianceData = await ComplianceDataTable.findByAddressAndProvider(constants_1.nonBlockedComplianceData.address, constants_1.nonBlockedComplianceData.provider, { readReplica: true });
        expect(updatedComplianceData).toEqual({
            ...constants_1.nonBlockedComplianceData,
            riskScore: '30.00',
            blocked: true,
            updatedAt: updatedTime,
        });
    });
    it('Successfully upserts a new compliance data', async () => {
        await ComplianceDataTable.upsert(constants_1.nonBlockedComplianceData);
        const complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        expect(complianceData[0]).toEqual(constants_1.nonBlockedComplianceData);
    });
    it('Successfully upserts an existing compliance data', async () => {
        await ComplianceDataTable.upsert(constants_1.nonBlockedComplianceData);
        const complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        const updatedTime = luxon_1.DateTime.fromISO(constants_1.nonBlockedComplianceData.updatedAt).plus(10).toUTC().toISO();
        await ComplianceDataTable.upsert({
            address: constants_1.nonBlockedComplianceData.address,
            provider: constants_1.nonBlockedComplianceData.provider,
            riskScore: '30.00',
            blocked: true,
            updatedAt: updatedTime,
        });
        const updatedComplianceData = await ComplianceDataTable.findByAddressAndProvider(constants_1.nonBlockedComplianceData.address, constants_1.nonBlockedComplianceData.provider, { readReplica: true });
        expect(updatedComplianceData).toEqual({
            ...constants_1.nonBlockedComplianceData,
            riskScore: '30.00',
            blocked: true,
            updatedAt: updatedTime,
        });
    });
    it('Successfully bulk upserts compliance data', async () => {
        await ComplianceDataTable.create(constants_1.nonBlockedComplianceData);
        let complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(1);
        const updatedTime1 = luxon_1.DateTime.fromISO(constants_1.nonBlockedComplianceData.updatedAt).plus(10).toUTC().toISO();
        const updatedTime2 = luxon_1.DateTime.fromISO(constants_1.nonBlockedComplianceData.updatedAt).plus(20).toUTC().toISO();
        const otherAddress = 'dydx1scu097p2sstqzupe6t687kpc2w4sv665fedctf';
        await ComplianceDataTable.bulkUpsert([
            constants_1.blockedComplianceData,
            {
                ...constants_1.nonBlockedComplianceData,
                riskScore: '30.00',
                blocked: true,
                updatedAt: updatedTime1,
            },
            {
                ...constants_1.nonBlockedComplianceData,
                address: otherAddress,
                riskScore: undefined,
                blocked: false,
                updatedAt: updatedTime2,
            },
        ]);
        complianceData = await ComplianceDataTable.findAll({}, [], { readReplica: true });
        expect(complianceData.length).toEqual(3);
        expect(complianceData[0]).toEqual(constants_1.blockedComplianceData);
        expect(complianceData[1]).toEqual({
            ...constants_1.nonBlockedComplianceData,
            riskScore: '30.00',
            blocked: true,
            updatedAt: updatedTime1,
        });
        expect(complianceData[2]).toEqual({
            ...constants_1.nonBlockedComplianceData,
            address: otherAddress,
            riskScore: null,
            blocked: false,
            updatedAt: updatedTime2,
        });
    });
});
//# sourceMappingURL=data:application/json;base64,