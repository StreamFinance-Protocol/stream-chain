syntax = "proto3";
package klyraprotocol.prices;

option go_package = "github.com/StreamFinance-Protocol/stream-chain/protocol/x/prices/types";

// MarketPrice is used by the application to store/retrieve oracle prices.
message MarketPrice {
  // Unique, sequentially-generated value that matches `MarketParam`.
  uint32 id = 1;

  // Static value. The exponent of the price. See the comment on the duplicate
  // MarketParam field for more information.
  sint32 exponent = 2;

  // The spot price value that is updated by oracle price updates. `0` if it has
  // never been updated, `>0` otherwise.
  uint64 spot_price = 3;

  // The pnl price value that is updated by oracle price updates. `0` if it has
  // never been updated, `>0` otherwise.
  uint64 pnl_price = 4;
}

// MarketSpotPrice is used by the application to store/retrieve spot prices.
message MarketSpotPrice {
  // Unique, sequentially-generated value that matches `MarketParam`.
  uint32 id = 1;

  // Static value. The exponent of the price. See the comment on the duplicate
  // MarketParam field for more information.
  sint32 exponent = 2;

  // The spot price value that is updated by oracle price updates. `0` if it has
  // never been updated, `>0` otherwise.
  uint64 spot_price = 3;
}

// MarketPriceUpdate is used to update the price of a single market.
message MarketPriceUpdate {
  // The id of market to update
  uint32 market_id = 1;
  // The updated spot price
  uint64 spot_price = 2;
  // The updated pnl price
  uint64 pnl_price = 3;
}

// MarketSpotPriceUpdate is used to update the spot price of a single market.
message MarketSpotPriceUpdate {
  // The id of market to update
  uint32 market_id = 1;
  // The updated spot price
  uint64 spot_price = 2;
}

// MarketPnlPriceUpdate is used to update the pnl price of a single market.
message MarketPnlPriceUpdate {
  // The id of market to update
  uint32 market_id = 1;
  // The updated pnl price
  uint64 pnl_price = 2;
}

// MarketPriceUpdates is a collection of MarketPriceUpdate messages.
message MarketPriceUpdates {
  repeated MarketPriceUpdate market_price_updates = 1;
}