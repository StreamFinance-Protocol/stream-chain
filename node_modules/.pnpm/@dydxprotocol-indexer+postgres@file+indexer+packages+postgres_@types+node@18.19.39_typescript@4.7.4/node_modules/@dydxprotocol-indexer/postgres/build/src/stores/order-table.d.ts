import { IndexerOrderId } from '@dydxprotocol-indexer/v4-protos';
import { Options, OrderCreateObject, OrderFromDatabase, OrderQueryConfig, OrderStatus, OrderUpdateObject, QueryableField } from '../types';
export declare function uuid(subaccountId: string, clientId: string, clobPairId: string, orderFlags: string): string;
/**
 * Expects orderId.subaccountId, and orderId.clientId to exist.
 * @param order
 */
export declare function orderIdToUuid(orderId: IndexerOrderId): string;
export declare function findAll({ limit, id, subaccountId, clientId, clobPairId, side, size, totalFilled, price, type, statuses, reduceOnly, orderFlags, goodTilBlockBeforeOrAt, goodTilBlockTimeBeforeOrAt, clientMetadata, triggerPrice, }: OrderQueryConfig, requiredFields: QueryableField[], options?: Options): Promise<OrderFromDatabase[]>;
export declare function create(orderToCreate: OrderCreateObject, options?: Options): Promise<OrderFromDatabase>;
export declare function update({ ...fields }: OrderUpdateObject, options?: Options): Promise<OrderFromDatabase | undefined>;
export declare function findById(id: string, options?: Options): Promise<OrderFromDatabase | undefined>;
export declare function findBySubaccountIdAndClobPair(subaccountId: string, clobPairId: string, options?: Options): Promise<OrderFromDatabase[]>;
export declare function findBySubaccountIdAndClobPairAfterHeight(subaccountId: string, clobPairId: string, height: number, options?: Options): Promise<OrderFromDatabase[]>;
export declare function upsert(orderToUpsert: OrderCreateObject, options?: Options): Promise<OrderFromDatabase>;
/**
 * Checks if the order is a long term or conditional order.
 * @param orderFlags
 */
export declare function isLongTermOrConditionalOrder(orderFlags: string): boolean;
/**
 * Finds all open long term or conditional orders.
 * @param options
 */
export declare function findOpenLongTermOrConditionalOrders(options?: Options): Promise<OrderFromDatabase[]>;
export declare function updateStaleOrderStatusByIds(oldStatus: OrderStatus, newStatus: OrderStatus, latestBlockHeight: string, ids: string[], options?: Options): Promise<OrderFromDatabase[]>;
