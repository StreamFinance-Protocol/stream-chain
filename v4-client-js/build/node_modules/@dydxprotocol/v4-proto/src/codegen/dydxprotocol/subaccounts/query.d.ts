/// <reference types="long" />
import { PageRequest, PageRequestSDKType, PageResponse, PageResponseSDKType } from "../../cosmos/base/query/v1beta1/pagination";
import { Subaccount, SubaccountSDKType } from "./subaccount";
import * as _m0 from "protobufjs/minimal";
/** QueryGetSubaccountRequest is request type for the Query RPC method. */
export interface QueryGetSubaccountRequest {
    owner: string;
    number: number;
}
/** QueryGetSubaccountRequest is request type for the Query RPC method. */
export interface QueryGetSubaccountRequestSDKType {
    owner: string;
    number: number;
}
/** QuerySubaccountResponse is response type for the Query RPC method. */
export interface QuerySubaccountResponse {
    subaccount?: Subaccount;
}
/** QuerySubaccountResponse is response type for the Query RPC method. */
export interface QuerySubaccountResponseSDKType {
    subaccount?: SubaccountSDKType;
}
/** QueryAllSubaccountRequest is request type for the Query RPC method. */
export interface QueryAllSubaccountRequest {
    pagination?: PageRequest;
}
/** QueryAllSubaccountRequest is request type for the Query RPC method. */
export interface QueryAllSubaccountRequestSDKType {
    pagination?: PageRequestSDKType;
}
/** QuerySubaccountAllResponse is response type for the Query RPC method. */
export interface QuerySubaccountAllResponse {
    subaccount: Subaccount[];
    pagination?: PageResponse;
}
/** QuerySubaccountAllResponse is response type for the Query RPC method. */
export interface QuerySubaccountAllResponseSDKType {
    subaccount: SubaccountSDKType[];
    pagination?: PageResponseSDKType;
}
export declare const QueryGetSubaccountRequest: {
    encode(message: QueryGetSubaccountRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): QueryGetSubaccountRequest;
    fromPartial(object: {
        owner?: string | undefined;
        number?: number | undefined;
    }): QueryGetSubaccountRequest;
};
export declare const QuerySubaccountResponse: {
    encode(message: QuerySubaccountResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): QuerySubaccountResponse;
    fromPartial(object: {
        subaccount?: {
            id?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            assetPositions?: {
                assetId?: number | undefined;
                quantums?: Uint8Array | undefined;
                index?: string | number | import("long").Long | undefined;
            }[] | undefined;
            perpetualPositions?: {
                perpetualId?: number | undefined;
                quantums?: Uint8Array | undefined;
                fundingIndex?: Uint8Array | undefined;
            }[] | undefined;
            marginEnabled?: boolean | undefined;
        } | undefined;
    }): QuerySubaccountResponse;
};
export declare const QueryAllSubaccountRequest: {
    encode(message: QueryAllSubaccountRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): QueryAllSubaccountRequest;
    fromPartial(object: {
        pagination?: {
            key?: Uint8Array | undefined;
            offset?: string | number | import("long").Long | undefined;
            limit?: string | number | import("long").Long | undefined;
            countTotal?: boolean | undefined;
            reverse?: boolean | undefined;
        } | undefined;
    }): QueryAllSubaccountRequest;
};
export declare const QuerySubaccountAllResponse: {
    encode(message: QuerySubaccountAllResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): QuerySubaccountAllResponse;
    fromPartial(object: {
        subaccount?: {
            id?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            assetPositions?: {
                assetId?: number | undefined;
                quantums?: Uint8Array | undefined;
                index?: string | number | import("long").Long | undefined;
            }[] | undefined;
            perpetualPositions?: {
                perpetualId?: number | undefined;
                quantums?: Uint8Array | undefined;
                fundingIndex?: Uint8Array | undefined;
            }[] | undefined;
            marginEnabled?: boolean | undefined;
        }[] | undefined;
        pagination?: {
            nextKey?: Uint8Array | undefined;
            total?: string | number | import("long").Long | undefined;
        } | undefined;
    }): QuerySubaccountAllResponse;
};
