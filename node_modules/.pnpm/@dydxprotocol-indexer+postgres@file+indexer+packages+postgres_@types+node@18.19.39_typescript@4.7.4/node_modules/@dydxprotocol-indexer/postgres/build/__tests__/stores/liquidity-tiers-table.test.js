"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const LiquidityTierTable = __importStar(require("../../src/stores/liquidity-tiers-table"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
const objection_1 = require("objection");
const constants_1 = require("../helpers/constants");
describe('LiquidityTier store', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
        jest.resetAllMocks();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
        jest.clearAllMocks();
    });
    it('Successfully creates a liquidity tier', async () => {
        await LiquidityTierTable.create(constants_1.defaultLiquidityTier);
    });
    it('Fails to create second liquidity tier with the same ID', async () => {
        try {
            await Promise.all([
                LiquidityTierTable.create(constants_1.defaultLiquidityTier),
                LiquidityTierTable.create(constants_1.defaultLiquidityTier),
            ]);
        }
        catch (e) {
            expect(e).toBeInstanceOf(objection_1.UniqueViolationError);
        }
    });
    it('Successfully finds all liquidity tiers', async () => {
        await Promise.all([
            LiquidityTierTable.create(constants_1.defaultLiquidityTier),
            LiquidityTierTable.create(constants_1.defaultLiquidityTier2),
        ]);
        const liquidityTiers = await LiquidityTierTable.findAll({}, [], { readReplica: true });
        expect(liquidityTiers.length).toEqual(2);
        expect(liquidityTiers[0]).toEqual(expect.objectContaining(constants_1.defaultLiquidityTier));
        expect(liquidityTiers[1]).toEqual(expect.objectContaining(constants_1.defaultLiquidityTier2));
    });
    it('Successfully finds a liquidity tier', async () => {
        await LiquidityTierTable.create(constants_1.defaultLiquidityTier);
        const liquidityTier = await LiquidityTierTable.findById(constants_1.defaultLiquidityTier.id);
        expect(liquidityTier).toEqual(expect.objectContaining(constants_1.defaultLiquidityTier));
    });
    it('Unable to find a liquidity tier', async () => {
        const liquidityTier = await LiquidityTierTable.findById(constants_1.defaultLiquidityTier.id);
        expect(liquidityTier).toEqual(undefined);
    });
    it('Successfully updates a liquidity tier', async () => {
        await LiquidityTierTable.create(constants_1.defaultLiquidityTier);
        const liquidityTier = await LiquidityTierTable.update({
            id: constants_1.defaultLiquidityTier.id,
            initialMarginPpm: '1000',
        });
        expect(liquidityTier).toEqual(expect.objectContaining({
            ...constants_1.defaultLiquidityTier,
            initialMarginPpm: '1000',
        }));
    });
    it('Successfully upserts an existing liquidity tier', async () => {
        await LiquidityTierTable.create(constants_1.defaultLiquidityTier);
        const liquidityTier = await LiquidityTierTable.upsert({
            ...constants_1.defaultLiquidityTier,
            initialMarginPpm: '1000',
        });
        expect(liquidityTier).toEqual(expect.objectContaining({
            ...constants_1.defaultLiquidityTier,
            initialMarginPpm: '1000',
        }));
    });
    it('Successfully upserts a liquidity tier', async () => {
        const liquidityTier = await LiquidityTierTable.upsert(constants_1.defaultLiquidityTier);
        expect(liquidityTier).toEqual(expect.objectContaining(constants_1.defaultLiquidityTier));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlxdWlkaXR5LXRpZXJzLXRhYmxlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc3RvcmVzL2xpcXVpZGl0eS10aWVycy10YWJsZS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSwyRkFBNkU7QUFDN0UsNkRBSXNDO0FBQ3RDLHlDQUFpRDtBQUNqRCxvREFBbUY7QUFFbkYsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxJQUFBLG9CQUFPLEdBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNuQixNQUFNLElBQUEsc0JBQVMsR0FBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNsQixNQUFNLElBQUEscUJBQVEsR0FBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyRCxNQUFNLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQ0FBb0IsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdEQUF3RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3RFLElBQUk7WUFDRixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7Z0JBQ2hCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxnQ0FBb0IsQ0FBQztnQkFDL0Msa0JBQWtCLENBQUMsTUFBTSxDQUFDLGdDQUFvQixDQUFDO2FBQ2hELENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxDQUFD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