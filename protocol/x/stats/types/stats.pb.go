// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dydxprotocol/stats/stats.proto

package types

import (
	fmt "fmt"
	github_com_StreamFinance_Protocol_stream_chain_protocol_dtypes "github.com/StreamFinance-Protocol/stream-chain/protocol/dtypes"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlockStats is used to store stats transiently within the scope of a block.
type BlockStats struct {
	// The fills that occured on this block.
	Fills []*BlockStats_Fill `protobuf:"bytes,1,rep,name=fills,proto3" json:"fills,omitempty"`
}

func (m *BlockStats) Reset()         { *m = BlockStats{} }
func (m *BlockStats) String() string { return proto.CompactTextString(m) }
func (*BlockStats) ProtoMessage()    {}
func (*BlockStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{0}
}
func (m *BlockStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockStats.Merge(m, src)
}
func (m *BlockStats) XXX_Size() int {
	return m.Size()
}
func (m *BlockStats) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockStats.DiscardUnknown(m)
}

var xxx_messageInfo_BlockStats proto.InternalMessageInfo

func (m *BlockStats) GetFills() []*BlockStats_Fill {
	if m != nil {
		return m.Fills
	}
	return nil
}

// Fill records data about a fill on this block.
type BlockStats_Fill struct {
	// Taker wallet address
	Taker string `protobuf:"bytes,1,opt,name=taker,proto3" json:"taker,omitempty"`
	// Maker wallet address
	Maker string `protobuf:"bytes,2,opt,name=maker,proto3" json:"maker,omitempty"`
	// Notional USDC filled in quantums
	Notional github_com_StreamFinance_Protocol_stream_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,3,opt,name=notional,proto3,customtype=github.com/StreamFinance-Protocol/stream-chain/protocol/dtypes.SerializableInt" json:"notional"`
}

func (m *BlockStats_Fill) Reset()         { *m = BlockStats_Fill{} }
func (m *BlockStats_Fill) String() string { return proto.CompactTextString(m) }
func (*BlockStats_Fill) ProtoMessage()    {}
func (*BlockStats_Fill) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{0, 0}
}
func (m *BlockStats_Fill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockStats_Fill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockStats_Fill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockStats_Fill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockStats_Fill.Merge(m, src)
}
func (m *BlockStats_Fill) XXX_Size() int {
	return m.Size()
}
func (m *BlockStats_Fill) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockStats_Fill.DiscardUnknown(m)
}

var xxx_messageInfo_BlockStats_Fill proto.InternalMessageInfo

func (m *BlockStats_Fill) GetTaker() string {
	if m != nil {
		return m.Taker
	}
	return ""
}

func (m *BlockStats_Fill) GetMaker() string {
	if m != nil {
		return m.Maker
	}
	return ""
}

// StatsMetadata stores metadata for the x/stats module
type StatsMetadata struct {
	// The oldest epoch that is included in the stats. The next epoch to be
	// removed from the window.
	TrailingEpoch uint32 `protobuf:"varint,1,opt,name=trailing_epoch,json=trailingEpoch,proto3" json:"trailing_epoch,omitempty"`
}

func (m *StatsMetadata) Reset()         { *m = StatsMetadata{} }
func (m *StatsMetadata) String() string { return proto.CompactTextString(m) }
func (*StatsMetadata) ProtoMessage()    {}
func (*StatsMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{1}
}
func (m *StatsMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsMetadata.Merge(m, src)
}
func (m *StatsMetadata) XXX_Size() int {
	return m.Size()
}
func (m *StatsMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_StatsMetadata proto.InternalMessageInfo

func (m *StatsMetadata) GetTrailingEpoch() uint32 {
	if m != nil {
		return m.TrailingEpoch
	}
	return 0
}

// EpochStats stores stats for a particular epoch
type EpochStats struct {
	// Epoch end time
	EpochEndTime time.Time `protobuf:"bytes,1,opt,name=epoch_end_time,json=epochEndTime,proto3,stdtime" json:"epoch_end_time"`
	// Stats for each user in this epoch. Sorted by user.
	Stats []*EpochStats_UserWithStats `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *EpochStats) Reset()         { *m = EpochStats{} }
func (m *EpochStats) String() string { return proto.CompactTextString(m) }
func (*EpochStats) ProtoMessage()    {}
func (*EpochStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{2}
}
func (m *EpochStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStats.Merge(m, src)
}
func (m *EpochStats) XXX_Size() int {
	return m.Size()
}
func (m *EpochStats) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStats.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStats proto.InternalMessageInfo

func (m *EpochStats) GetEpochEndTime() time.Time {
	if m != nil {
		return m.EpochEndTime
	}
	return time.Time{}
}

func (m *EpochStats) GetStats() []*EpochStats_UserWithStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// A user and its associated stats
type EpochStats_UserWithStats struct {
	User  string     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Stats *UserStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *EpochStats_UserWithStats) Reset()         { *m = EpochStats_UserWithStats{} }
func (m *EpochStats_UserWithStats) String() string { return proto.CompactTextString(m) }
func (*EpochStats_UserWithStats) ProtoMessage()    {}
func (*EpochStats_UserWithStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{2, 0}
}
func (m *EpochStats_UserWithStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochStats_UserWithStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochStats_UserWithStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochStats_UserWithStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochStats_UserWithStats.Merge(m, src)
}
func (m *EpochStats_UserWithStats) XXX_Size() int {
	return m.Size()
}
func (m *EpochStats_UserWithStats) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochStats_UserWithStats.DiscardUnknown(m)
}

var xxx_messageInfo_EpochStats_UserWithStats proto.InternalMessageInfo

func (m *EpochStats_UserWithStats) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *EpochStats_UserWithStats) GetStats() *UserStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// GlobalStats stores global stats
type GlobalStats struct {
	// Notional USDC traded in quantums
	NotionalTraded github_com_StreamFinance_Protocol_stream_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,1,opt,name=notional_traded,json=notionalTraded,proto3,customtype=github.com/StreamFinance-Protocol/stream-chain/protocol/dtypes.SerializableInt" json:"notional_traded"`
}

func (m *GlobalStats) Reset()         { *m = GlobalStats{} }
func (m *GlobalStats) String() string { return proto.CompactTextString(m) }
func (*GlobalStats) ProtoMessage()    {}
func (*GlobalStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{3}
}
func (m *GlobalStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GlobalStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GlobalStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GlobalStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalStats.Merge(m, src)
}
func (m *GlobalStats) XXX_Size() int {
	return m.Size()
}
func (m *GlobalStats) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalStats.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalStats proto.InternalMessageInfo

// UserStats stores stats for a User
type UserStats struct {
	// Taker USDC in quantums
	TakerNotional github_com_StreamFinance_Protocol_stream_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,1,opt,name=taker_notional,json=takerNotional,proto3,customtype=github.com/StreamFinance-Protocol/stream-chain/protocol/dtypes.SerializableInt" json:"taker_notional"`
	// Maker USDC in quantums
	MakerNotional github_com_StreamFinance_Protocol_stream_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,2,opt,name=maker_notional,json=makerNotional,proto3,customtype=github.com/StreamFinance-Protocol/stream-chain/protocol/dtypes.SerializableInt" json:"maker_notional"`
}

func (m *UserStats) Reset()         { *m = UserStats{} }
func (m *UserStats) String() string { return proto.CompactTextString(m) }
func (*UserStats) ProtoMessage()    {}
func (*UserStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_07475747e6dcccdc, []int{4}
}
func (m *UserStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStats.Merge(m, src)
}
func (m *UserStats) XXX_Size() int {
	return m.Size()
}
func (m *UserStats) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStats.DiscardUnknown(m)
}

var xxx_messageInfo_UserStats proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BlockStats)(nil), "dydxprotocol.stats.BlockStats")
	proto.RegisterType((*BlockStats_Fill)(nil), "dydxprotocol.stats.BlockStats.Fill")
	proto.RegisterType((*StatsMetadata)(nil), "dydxprotocol.stats.StatsMetadata")
	proto.RegisterType((*EpochStats)(nil), "dydxprotocol.stats.EpochStats")
	proto.RegisterType((*EpochStats_UserWithStats)(nil), "dydxprotocol.stats.EpochStats.UserWithStats")
	proto.RegisterType((*GlobalStats)(nil), "dydxprotocol.stats.GlobalStats")
	proto.RegisterType((*UserStats)(nil), "dydxprotocol.stats.UserStats")
}

func init() { proto.RegisterFile("dydxprotocol/stats/stats.proto", fileDescriptor_07475747e6dcccdc) }

var fileDescriptor_07475747e6dcccdc = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4d, 0x6b, 0xdb, 0x30,
	0x18, 0xc7, 0xa3, 0xb4, 0x19, 0xad, 0xd2, 0x64, 0x20, 0x7a, 0x08, 0x81, 0x39, 0x21, 0x63, 0x90,
	0xc3, 0x2a, 0x43, 0x0b, 0x83, 0x5d, 0x0d, 0xe9, 0xd8, 0x60, 0x65, 0x38, 0xdd, 0x0b, 0xbb, 0x18,
	0xd9, 0x56, 0x1d, 0x51, 0xd9, 0x0a, 0xb6, 0x02, 0xed, 0x60, 0xec, 0xbc, 0xcb, 0xe8, 0xa7, 0xd8,
	0x67, 0xe9, 0xb1, 0xc7, 0xb1, 0x43, 0x37, 0x92, 0x2f, 0xb0, 0xd3, 0xce, 0x43, 0x8f, 0x6a, 0x27,
	0x65, 0x3d, 0x15, 0x72, 0x09, 0x7a, 0xfe, 0xcf, 0xcb, 0xef, 0xc9, 0x5f, 0xc2, 0xd8, 0x89, 0xcf,
	0xe3, 0xb3, 0x69, 0xae, 0xb4, 0x8a, 0x94, 0x74, 0x0b, 0xcd, 0x74, 0x61, 0x7f, 0x29, 0x88, 0x84,
	0xac, 0xe6, 0x29, 0x64, 0xba, 0xbb, 0x89, 0x4a, 0x14, 0x68, 0xae, 0x39, 0xd9, 0xca, 0x6e, 0x2f,
	0x51, 0x2a, 0x91, 0xdc, 0x85, 0x28, 0x9c, 0x9d, 0xb8, 0x5a, 0xa4, 0xbc, 0xd0, 0x2c, 0x9d, 0xda,
	0x82, 0xc1, 0x1f, 0x84, 0xb1, 0x27, 0x55, 0x74, 0x3a, 0x36, 0x53, 0xc8, 0x73, 0xdc, 0x38, 0x11,
	0x52, 0x16, 0x1d, 0xd4, 0xdf, 0x18, 0x36, 0xf7, 0x1f, 0xd3, 0xff, 0x49, 0x74, 0x59, 0x4e, 0x0f,
	0x85, 0x94, 0xbe, 0xed, 0xe8, 0x7e, 0x47, 0x78, 0xd3, 0xc4, 0x64, 0x17, 0x37, 0x34, 0x3b, 0xe5,
	0x79, 0x07, 0xf5, 0xd1, 0x70, 0xdb, 0xb7, 0x81, 0x51, 0x53, 0x50, 0xeb, 0x56, 0x85, 0x80, 0xe4,
	0x78, 0x2b, 0x53, 0x5a, 0xa8, 0x8c, 0xc9, 0xce, 0x46, 0x1f, 0x0d, 0x77, 0xbc, 0x77, 0x97, 0xd7,
	0xbd, 0xda, 0xcf, 0xeb, 0xde, 0x51, 0x22, 0xf4, 0x64, 0x16, 0xd2, 0x48, 0xa5, 0xee, 0x58, 0xe7,
	0x9c, 0xa5, 0x87, 0x22, 0x63, 0x59, 0xc4, 0xf7, 0xde, 0x2c, 0x8d, 0x31, 0xf2, 0x5e, 0x34, 0x61,
	0x22, 0x73, 0x2b, 0xbb, 0x62, 0x7d, 0x3e, 0xe5, 0x05, 0x1d, 0xf3, 0x5c, 0x30, 0x29, 0x3e, 0xb1,
	0x50, 0xf2, 0x97, 0x99, 0xf6, 0x2b, 0xce, 0xe0, 0x19, 0x6e, 0xc1, 0xf6, 0xaf, 0xb9, 0x66, 0x31,
	0xd3, 0x8c, 0x3c, 0xc1, 0x6d, 0x9d, 0x33, 0x21, 0x45, 0x96, 0x04, 0x7c, 0xaa, 0xa2, 0x09, 0x6c,
	0xde, 0xf2, 0x5b, 0xa5, 0x3a, 0x32, 0xe2, 0xe0, 0x2f, 0xc2, 0x18, 0x4e, 0xd6, 0xaa, 0x57, 0xb8,
	0x0d, 0xc5, 0x01, 0xcf, 0xe2, 0xc0, 0xd8, 0x0a, 0x5d, 0xcd, 0xfd, 0x2e, 0xb5, 0x9e, 0xd3, 0xd2,
	0x73, 0x7a, 0x5c, 0x7a, 0xee, 0x6d, 0x99, 0x3f, 0x77, 0xf1, 0xab, 0x87, 0xfc, 0x1d, 0xe8, 0x1d,
	0x65, 0xb1, 0x49, 0x12, 0x0f, 0x37, 0xc0, 0xdb, 0x4e, 0x1d, 0x6c, 0x7f, 0x7a, 0x97, 0xed, 0x4b,
	0x34, 0x7d, 0x5b, 0xf0, 0xfc, 0xbd, 0xd0, 0x36, 0xf2, 0x6d, 0x6b, 0xf7, 0x03, 0x6e, 0xdd, 0xd2,
	0x09, 0xc1, 0x9b, 0xb3, 0xa2, 0xba, 0x06, 0x38, 0x93, 0x83, 0x25, 0xc8, 0xec, 0xfa, 0xe8, 0x2e,
	0x90, 0x99, 0xb2, 0x3a, 0x79, 0xf0, 0x0d, 0xe1, 0xe6, 0x0b, 0xa9, 0x42, 0x26, 0xed, 0xe0, 0x2f,
	0xf8, 0x61, 0x69, 0x66, 0xa0, 0x73, 0x16, 0xf3, 0x18, 0x18, 0xeb, 0xbb, 0xbb, 0x76, 0x89, 0x3b,
	0x06, 0xda, 0xe0, 0x6b, 0x1d, 0x6f, 0x57, 0x5b, 0x92, 0xcf, 0xb8, 0x0d, 0x4f, 0x2c, 0xa8, 0x5e,
	0xd2, 0x7a, 0xb7, 0x69, 0x01, 0xed, 0xe8, 0x06, 0x66, 0xf0, 0xe9, 0x6d, 0x7c, 0x7d, 0xbd, 0xf8,
	0x74, 0x15, 0xef, 0x05, 0x97, 0x73, 0x07, 0x5d, 0xcd, 0x1d, 0xf4, 0x7b, 0xee, 0xa0, 0x8b, 0x85,
	0x53, 0xbb, 0x5a, 0x38, 0xb5, 0x1f, 0x0b, 0xa7, 0xf6, 0x71, 0x74, 0x5f, 0xf0, 0xd9, 0xcd, 0x27,
	0x07, 0xf8, 0xe1, 0x03, 0xd0, 0x0f, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x39, 0x0b, 0x13, 0x20,
	0x95, 0x04, 0x00, 0x00,
}

func (m *BlockStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fills) > 0 {
		for iNdEx := len(m.Fills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockStats_Fill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockStats_Fill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockStats_Fill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Notional.Size()
		i -= size
		if _, err := m.Notional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Maker) > 0 {
		i -= len(m.Maker)
		copy(dAtA[i:], m.Maker)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Maker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Taker) > 0 {
		i -= len(m.Taker)
		copy(dAtA[i:], m.Taker)
		i = encodeVarintStats(dAtA, i, uint64(len(m.Taker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrailingEpoch != 0 {
		i = encodeVarintStats(dAtA, i, uint64(m.TrailingEpoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStats(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EpochEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EpochEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStats(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EpochStats_UserWithStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochStats_UserWithStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochStats_UserWithStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stats != nil {
		{
			size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStats(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintStats(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GlobalStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GlobalStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GlobalStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NotionalTraded.Size()
		i -= size
		if _, err := m.NotionalTraded.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MakerNotional.Size()
		i -= size
		if _, err := m.MakerNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TakerNotional.Size()
		i -= size
		if _, err := m.TakerNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStats(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	offset -= sovStats(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fills) > 0 {
		for _, e := range m.Fills {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *BlockStats_Fill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Taker)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Maker)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = m.Notional.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *StatsMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TrailingEpoch != 0 {
		n += 1 + sovStats(uint64(m.TrailingEpoch))
	}
	return n
}

func (m *EpochStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EpochEndTime)
	n += 1 + l + sovStats(uint64(l))
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *EpochStats_UserWithStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovStats(uint64(l))
	}
	return n
}

func (m *GlobalStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NotionalTraded.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func (m *UserStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TakerNotional.Size()
	n += 1 + l + sovStats(uint64(l))
	l = m.MakerNotional.Size()
	n += 1 + l + sovStats(uint64(l))
	return n
}

func sovStats(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fills = append(m.Fills, &BlockStats_Fill{})
			if err := m.Fills[len(m.Fills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockStats_Fill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Taker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notional", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Notional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrailingEpoch", wireType)
			}
			m.TrailingEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrailingEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EpochEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &EpochStats_UserWithStats{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochStats_UserWithStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserWithStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserWithStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &UserStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GlobalStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GlobalStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GlobalStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotionalTraded", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NotionalTraded.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerNotional", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerNotional", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStats
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStats
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStats
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStats        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStats = fmt.Errorf("proto: unexpected end of group")
)
