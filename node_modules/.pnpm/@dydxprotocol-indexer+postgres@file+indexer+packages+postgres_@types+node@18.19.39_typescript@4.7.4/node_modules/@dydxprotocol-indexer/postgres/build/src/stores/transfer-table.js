"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findById = exports.create = exports.getNetTransfersPerSubaccount = exports.getNetTransfersBetweenBlockHeightsForSubaccount = exports.findAllToOrFromSubaccountId = exports.findAll = exports.uuid = void 0;
const big_js_1 = __importDefault(require("big.js"));
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const transfer_model_1 = __importDefault(require("../models/transfer-model"));
const types_1 = require("../types");
function uuid(eventId, assetId, senderSubaccountId, recipientSubaccountId, senderWalletAddress, recipientWalletAddress) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${senderSubaccountId}-${recipientSubaccountId}-${senderWalletAddress}-${recipientWalletAddress}-${eventId.toString('hex')}-${assetId}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
async function findAll({ limit, id, senderSubaccountId, recipientSubaccountId, senderWalletAddress, recipientWalletAddress, assetId, size, eventId, transactionHash, createdAt, createdAtHeight, createdBeforeOrAtHeight, createdBeforeOrAt, createdAfter, createdAfterHeight, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        senderSubaccountId,
        recipientSubaccountId,
        senderWalletAddress,
        recipientWalletAddress,
        assetId,
        size,
        eventId,
        transactionHash,
        createdAt,
        createdAtHeight,
        createdBeforeOrAtHeight,
        createdBeforeOrAt,
        createdAfter,
        createdAfterHeight,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(transfer_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.id, id);
    }
    if (senderSubaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.senderSubaccountId, senderSubaccountId);
    }
    if (recipientSubaccountId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.recipientSubaccountId, recipientSubaccountId);
    }
    if (senderWalletAddress !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.senderWalletAddress, senderWalletAddress);
    }
    if (recipientWalletAddress !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.recipientWalletAddress, recipientWalletAddress);
    }
    if (assetId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.assetId, assetId);
    }
    if (size !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.size, size);
    }
    if (eventId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.eventId, eventId);
    }
    if (transactionHash !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.transactionHash, transactionHash);
    }
    if (createdAt !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.createdAt, createdAt);
    }
    if (createdAtHeight !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.createdAtHeight, createdAtHeight);
    }
    if (createdBeforeOrAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAtHeight, '<=', createdBeforeOrAtHeight);
    }
    if (createdBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAt, '<=', createdBeforeOrAt);
    }
    if (createdAfterHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAtHeight, '>', createdAfterHeight);
    }
    if (createdAfter !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAt, '>', createdAfter);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
// finds all transfers to or from the subaccount id
async function findAllToOrFromSubaccountId({ limit, id, subaccountId, assetId, size, eventId, transactionHash, createdAt, createdAtHeight, createdBeforeOrAtHeight, createdBeforeOrAt, createdAfterHeight, createdAfter, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        limit,
        id,
        subaccountId,
        assetId,
        size,
        eventId,
        transactionHash,
        createdAt,
        createdAtHeight,
        createdBeforeOrAtHeight,
        createdBeforeOrAt,
        createdAfterHeight,
        createdAfter,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(transfer_model_1.default, options);
    if (id !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.id, id);
    }
    if (subaccountId !== undefined) {
        baseQuery = baseQuery.where((queryBuilder) => {
            // eslint-disable-next-line no-void
            void queryBuilder.whereIn(types_1.TransferColumns.recipientSubaccountId, subaccountId)
                .orWhereIn(types_1.TransferColumns.senderSubaccountId, subaccountId);
        });
    }
    if (assetId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.assetId, assetId);
    }
    if (size !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.size, size);
    }
    if (eventId !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.eventId, eventId);
    }
    if (transactionHash !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.transactionHash, transactionHash);
    }
    if (createdAt !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.createdAt, createdAt);
    }
    if (createdAtHeight !== undefined) {
        baseQuery = baseQuery.whereIn(types_1.TransferColumns.createdAtHeight, createdAtHeight);
    }
    if (createdBeforeOrAtHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAtHeight, '<=', createdBeforeOrAtHeight);
    }
    if (createdBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAt, '<=', createdBeforeOrAt);
    }
    if (createdAfterHeight !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAtHeight, '>', createdAfterHeight);
    }
    if (createdAfter !== undefined) {
        baseQuery = baseQuery.where(types_1.TransferColumns.createdAt, '>', createdAfter);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAllToOrFromSubaccountId = findAllToOrFromSubaccountId;
function convertToSubaccountAssetMap(transfers) {
    const assetGroups = lodash_1.default.groupBy(transfers, 'subaccountId');
    return lodash_1.default.mapValues(assetGroups, (group) => {
        return lodash_1.default.reduce(group, (result, asset) => {
            return { ...result, [asset.assetId]: asset.totalSize };
        }, {});
    });
}
async function getNetTransfersBetweenBlockHeightsForSubaccount(subaccountId, createdAfterHeight, createdBeforeOrAtHeight, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const queryString = `
    SELECT 
      "assetId",
      SUM(
        CASE 
          WHEN "senderSubaccountId" = '${subaccountId}' THEN -"size"
          ELSE "size"
        END
      ) AS "totalSize"
    FROM 
      "transfers"
    WHERE 
      (
        "senderSubaccountId" = '${subaccountId}' 
        OR "recipientSubaccountId" = '${subaccountId}'
      )
      AND "createdAtHeight" > ${createdAfterHeight} 
      AND "createdAtHeight" <= ${createdBeforeOrAtHeight}
    GROUP BY 
      "assetId";
  `;
    const result = await (0, stores_helpers_1.rawQuery)(queryString, options);
    return lodash_1.default.mapValues(lodash_1.default.keyBy(result.rows, 'assetId'), (row) => {
        return (0, big_js_1.default)(row.totalSize);
    });
}
exports.getNetTransfersBetweenBlockHeightsForSubaccount = getNetTransfersBetweenBlockHeightsForSubaccount;
async function getNetTransfersPerSubaccount(createdBeforeOrAtHeight, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    // Get the net value of transfers since beginning of time up until createdBeforeOrAtHeight
    // for all subaccounts. If a subaccount is sending an asset, the value will be negative.
    // If a subaccount is receiving an asset, the value will be positive.
    const queryString = `
  SELECT 
    sub."subaccountId",
    sub."assetId",
    SUM(sub."size") AS "totalSize"
  FROM (
    SELECT DISTINCT 
      "senderSubaccountId" AS "subaccountId",
      "assetId",
      -"size" AS "size",
      "id"
    FROM 
      "transfers"
    WHERE "transfers"."createdAtHeight" <= ${createdBeforeOrAtHeight}
    UNION 
    SELECT DISTINCT 
      "recipientSubaccountId" AS "subaccountId",
      "assetId",
      "size" AS "size",
      "id"
    FROM 
      "transfers"
    WHERE "transfers"."createdAtHeight" <= ${createdBeforeOrAtHeight}
  ) AS sub
  GROUP BY 
    sub."subaccountId",
    sub."assetId";
  `;
    const result = await (0, stores_helpers_1.rawQuery)(queryString, options);
    const assetsPerSubaccount = result.rows;
    return convertToSubaccountAssetMap(assetsPerSubaccount);
}
exports.getNetTransfersPerSubaccount = getNetTransfersPerSubaccount;
async function create(transferToCreate, options = { txId: undefined }) {
    return transfer_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(transferToCreate.eventId, transferToCreate.assetId, transferToCreate.senderSubaccountId, transferToCreate.recipientSubaccountId, transferToCreate.senderWalletAddress, transferToCreate.recipientWalletAddress),
        ...transferToCreate,
    }).returning('*');
}
exports.create = create;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(transfer_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
//# sourceMappingURL=data:application/json;base64,