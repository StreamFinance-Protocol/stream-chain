{"fileNames":["../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es5.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2016.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.date.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.promise.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2018.regexp.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.array.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.object.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.string.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.symbol.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2019.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.bigint.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.date.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.promise.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.string.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.es2020.number.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.esnext.intl.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.decorators.d.ts","../node_modules/.pnpm/typescript@5.6.3/node_modules/typescript/lib/lib.decorators.legacy.d.ts","../__tests__/helpers/baseclients.ts","../../v4-proto-js/node_modules/.pnpm/protobufjs@6.11.4/node_modules/protobufjs/index.d.ts","../../v4-proto-js/node_modules/.pnpm/protobufjs@6.11.4/node_modules/protobufjs/minimal.d.ts","../../v4-proto-js/src/codegen/helpers.ts","../../v4-proto-js/src/codegen/cosmos/base/query/v1beta1/pagination.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/addresses.d.ts","../node_modules/.pnpm/readonly-date@1.0.0/node_modules/readonly-date/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/dates.d.ts","../node_modules/.pnpm/xstream@11.14.0/node_modules/xstream/index.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/id.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/compatibility.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/types.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/jsonrpcclient.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/parse.d.ts","../node_modules/.pnpm/@cosmjs+json-rpc@0.32.4/node_modules/@cosmjs/json-rpc/build/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/rpcclient.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpclient.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/httpbatchclient.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/websocketclient.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/rpcclients/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/comet38/requests.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/types.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/comet38/responses.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/comet38/comet38client.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/comet38/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/requests.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/responses.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/tendermint34client.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint34/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/requests.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/responses.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/tendermint37client.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermint37/index.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/tendermintclient.d.ts","../node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/index.d.ts","../node_modules/.pnpm/bignumber.js@9.1.2/node_modules/bignumber.js/bignumber.d.ts","../../v4-proto-js/src/codegen/tendermint/crypto/proof.ts","../../v4-proto-js/src/codegen/tendermint/version/types.ts","../../v4-proto-js/src/codegen/google/protobuf/timestamp.ts","../../v4-proto-js/src/codegen/tendermint/crypto/keys.ts","../../v4-proto-js/src/codegen/tendermint/types/validator.ts","../../v4-proto-js/src/codegen/tendermint/types/types.ts","../../v4-proto-js/src/codegen/google/protobuf/any.ts","../../v4-proto-js/src/codegen/google/protobuf/duration.ts","../../v4-proto-js/src/codegen/cosmos/base/v1beta1/coin.ts","../../v4-proto-js/src/codegen/tendermint/types/params.ts","../../v4-proto-js/src/codegen/tendermint/abci/types.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/staking.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/query.ts","../../v4-proto-js/src/codegen/tendermint/types/evidence.ts","../../v4-proto-js/src/codegen/tendermint/types/block.ts","../../v4-proto-js/src/codegen/cosmos/base/abci/v1beta1/abci.ts","../src/clients/modules/proto-includes.ts","../src/clients/types.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/pubkeys.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/addresses.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/coins.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/encoding.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/multisig.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/omitdefault.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/bip39.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/hash.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/hmac.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/keccak.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/libsodium.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/random.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/ripemd.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/secp256k1signature.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/secp256k1.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/sha.d.ts","../node_modules/.pnpm/@cosmjs+math@0.32.4/node_modules/@cosmjs/math/build/integers.d.ts","../node_modules/.pnpm/@cosmjs+math@0.32.4/node_modules/@cosmjs/math/build/decimal.d.ts","../node_modules/.pnpm/@cosmjs+math@0.32.4/node_modules/@cosmjs/math/build/index.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/slip10.d.ts","../node_modules/.pnpm/@cosmjs+crypto@0.32.4/node_modules/@cosmjs/crypto/build/index.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/paths.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/signdoc.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/signature.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/signer.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/wallet.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/secp256k1hdwallet.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/secp256k1wallet.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/stdtx.d.ts","../node_modules/.pnpm/@cosmjs+amino@0.32.4/node_modules/@cosmjs/amino/build/index.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/binary.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/any.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/accounts.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/crypto/multisig/v1beta1/multisig.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/signing/v1beta1/signing.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/base/v1beta1/coin.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/tx.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/decode.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signer.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/wallet.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1hdwallet.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/directsecp256k1wallet.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/paths.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/pubkey.d.ts","../node_modules/.pnpm/protobufjs@7.4.0/node_modules/protobufjs/index.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/registry.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/signing.d.ts","../node_modules/.pnpm/@cosmjs+proto-signing@0.32.4/node_modules/@cosmjs/proto-signing/build/index.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/aminotypes.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/events.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/fee.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/logs.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/crypto/proof.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/queryclient/queryclient.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/base/query/v1beta1/pagination.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/queryclient/utils.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/queryclient/index.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/auth/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/authz/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/authz/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/timestamp.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/authz/v1beta1/authz.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/helpers.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/authz/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/authz/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/bank/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/bank/v1beta1/bank.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/bank/v1beta1/tx.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/bank/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/bank/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/bank/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/crisis/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/distribution/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/distribution/v1beta1/distribution.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/distribution/v1beta1/tx.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/distribution/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/distribution/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/distribution/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/evidence/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/feegrant/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/feegrant/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/google/protobuf/duration.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/feegrant/v1beta1/feegrant.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/feegrant/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/feegrant/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/gov/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/gov/v1beta1/gov.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/gov/v1beta1/tx.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/gov/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/gov/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/gov/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/group/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/group/messages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/ibc/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/upgrade/v1beta1/upgrade.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/client/v1/client.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/applications/transfer/v1/tx.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/ibc/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/applications/transfer/v1/transfer.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/applications/transfer/v1/query.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/channel/v1/channel.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/channel/v1/query.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/client/v1/query.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/ics23/v1/proofs.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/commitment/v1/commitment.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/connection/v1/connection.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/core/connection/v1/query.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/version/types.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/crypto/keys.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/types/validator.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/types/types.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/ibc/lightclients/tendermint/v1/tendermint.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/ibc/queries.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/mint/v1beta1/mint.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/mint/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/slashing/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/slashing/v1beta1/slashing.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/slashing/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/slashing/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/staking/aminomessages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/types/params.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/abci/types.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/staking/v1beta1/staking.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/staking/v1beta1/tx.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/staking/messages.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/staking/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/staking/queries.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/base/abci/v1beta1/abci.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/types/evidence.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/tendermint/types/block.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/tx/v1beta1/service.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/tx/queries.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/vesting/aminomessages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/vesting/messages.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/modules/index.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/multisignature.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/search.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/stargateclient.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/signingstargateclient.d.ts","../node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/index.d.ts","../src/lib/constants.ts","../src/clients/constants.ts","../src/lib/utils.ts","../src/types.ts","../__tests__/helpers/constants.ts","../node_modules/.pnpm/bech32@1.1.4/node_modules/bech32/index.d.ts","../src/lib/errors.ts","../src/lib/validation.ts","../node_modules/.pnpm/@scure+bip32@1.5.0/node_modules/@scure/bip32/lib/index.d.ts","../node_modules/.pnpm/@scure+bip39@1.4.0/node_modules/@scure/bip39/index.d.ts","../node_modules/.pnpm/@scure+bip39@1.4.0/node_modules/@scure/bip39/wordlists/english.d.ts","../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/utils.d.ts","../node_modules/.pnpm/@noble+hashes@1.4.0/node_modules/@noble/hashes/sha3.d.ts","../node_modules/.pnpm/ethereum-cryptography@2.2.1/node_modules/ethereum-cryptography/keccak.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/ascii.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/base64.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/bech32.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/hex.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/rfc3339.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/utf8.d.ts","../node_modules/.pnpm/@cosmjs+encoding@0.32.4/node_modules/@cosmjs/encoding/build/index.d.ts","../src/lib/helpers.ts","../src/lib/onboarding.ts","../src/clients/lib/registry.ts","../src/clients/lib/errors.ts","../src/clients/modules/signer.ts","../src/clients/modules/local-wallet.ts","../src/clients/subaccount.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/_version.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/base58.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/data.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/base64.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/address/address.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/address/contract-address.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/address/checks.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/address/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/hmac.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/keccak.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/ripemd160.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/pbkdf2.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/random.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/scrypt.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/sha2.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/signature.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/signing-key.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/crypto/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/transaction/accesslist.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/transaction/address.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/transaction/transaction.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/transaction/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/contracts.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/fetch.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/plugins-network.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/network.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/formatting.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/ens-resolver.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/abstract-provider.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/id.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/namehash.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/message.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/solidity.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/typed-data.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/hash/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/signer.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/abstract-signer.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/community.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-socket.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-websocket.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/default-provider.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/signer-noncemanager.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-fallback.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-browser.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-alchemy.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-ankr.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-cloudflare.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-chainstack.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/contract/types.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/contract/wrappers.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/contract/contract.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/contract/factory.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/contract/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-etherscan.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-infura.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-pocket.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-quicknode.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert/strict.d.ts","../node_modules/.pnpm/buffer@6.0.3/node_modules/buffer/index.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/header.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/readable.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/assert.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/async_hooks.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/buffer.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/cluster.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/constants.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/crypto.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dgram.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dns.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/domain.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/events.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs/promises.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/inspector.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/module.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/os.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/perf_hooks.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/querystring.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/repl.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/stream.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/string_decoder.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/trace_events.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/url.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/util.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/wasi.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/worker_threads.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/zlib.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.global.d.ts","../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/index.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/file.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/fetch.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/formdata.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/connector.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/client.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/errors.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/dispatcher.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/global-dispatcher.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/global-origin.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/pool-stats.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/pool.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/handlers.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/balanced-pool.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/agent.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-interceptor.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-agent.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-client.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-pool.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/mock-errors.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/proxy-agent.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/env-http-proxy-agent.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/retry-handler.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/retry-agent.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/api.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/interceptors.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/util.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/cookies.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/patch.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/websocket.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/eventsource.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/filereader.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/diagnostics-channel.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/content-type.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/cache.d.ts","../node_modules/.pnpm/undici-types@6.19.8/node_modules/undici-types/index.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/globals.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/async_hooks.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/cluster.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/console.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/constants.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/crypto.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dgram.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/diagnostics_channel.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dns.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dns/promises.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/domain.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dom-events.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/events.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/fs.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/fs/promises.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/inspector.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/module.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/process.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/querystring.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline/promises.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/repl.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sea.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sqlite.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream/promises.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream/consumers.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream/web.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/string_decoder.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/test.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers/promises.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tls.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/trace_events.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tty.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/url.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/util.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/wasi.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/zlib.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/globals.global.d.ts","../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/provider-ipcsocket.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/providers/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/errors.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/events.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/fixednumber.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/maths.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/properties.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/rlp-decode.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/rlp.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/rlp-encode.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/units.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/utf8.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/uuid.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/utils/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/fragments.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/abi-coder.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/bytes32.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/typed.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/interface.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/abi/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/constants/addresses.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/constants/hashes.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/constants/numbers.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/constants/strings.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/constants/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/base-wallet.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/wordlist.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/lang-en.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/wordlists.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wordlists/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/mnemonic.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/hdwallet.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/json-crowdsale.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/json-keystore.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/wallet.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/wallet/index.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/ethers.d.ts","../node_modules/.pnpm/ethers@6.13.4/node_modules/ethers/lib.commonjs/index.d.ts","../src/clients/helpers/chain-helpers.ts","../src/clients/helpers/request-helpers.ts","../node_modules/.pnpm/axios@1.1.3/node_modules/axios/index.d.ts","../src/clients/lib/axios/errors.ts","../src/clients/lib/axios/types.ts","../src/clients/lib/axios/axiosrequest.ts","../src/clients/lib/axios/index.ts","../src/clients/modules/rest.ts","../src/clients/modules/account.ts","../src/clients/modules/markets.ts","../src/clients/modules/utility.ts","../src/clients/indexer-client.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/auth/v1beta1/auth.d.ts","../node_modules/.pnpm/cosmjs-types@0.9.0/node_modules/cosmjs-types/cosmos/auth/v1beta1/query.d.ts","../node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/arrays.d.ts","../node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/assert.d.ts","../node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/sleep.d.ts","../node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/typechecks.d.ts","../node_modules/.pnpm/@cosmjs+utils@0.32.4/node_modules/@cosmjs/utils/build/index.d.ts","../src/clients/modules/tendermintclient.ts","../src/clients/modules/get.ts","../src/clients/modules/composer.ts","../src/clients/modules/post.ts","../src/clients/validator-client.ts","../src/clients/composite-client.ts","../node_modules/.pnpm/protobufjs@7.4.0/node_modules/protobufjs/minimal.d.ts","../src/clients/lib/cctpproto.ts","../src/clients/noble-client.ts","../src/clients/faucet-client.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/compatibility/disposable.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/compatibility/indexable.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/compatibility/iterators.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/compatibility/index.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/globals.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert/strict.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/async_hooks.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/child_process.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/cluster.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/console.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/constants.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/crypto.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dgram.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/diagnostics_channel.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dns.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dns/promises.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/domain.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dom-events.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/events.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/fs.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/fs/promises.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/inspector.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/module.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/process.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/querystring.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline/promises.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/repl.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sea.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sqlite.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream/promises.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream/consumers.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream/web.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/string_decoder.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/test.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers/promises.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tls.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/trace_events.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tty.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/url.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/util.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/wasi.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/zlib.d.ts","../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/index.d.ts","../node_modules/.pnpm/@types+ws@8.5.4/node_modules/@types/ws/index.d.ts","../src/clients/socket-client.ts","../src/network_optimizer.ts","../src/index.ts","../__tests__/lib/helpers.test.ts","../__tests__/lib/util.test.ts","../__tests__/lib/validation.test.ts","../__tests__/modules/onboarding.test.ts","../__tests__/modules/client/constants.ts","../__tests__/modules/client/accountendpoints.test.ts","../__tests__/modules/client/faucetendpoint.test.ts","../__tests__/modules/client/marketsendpoints.test.ts","../examples/constants.ts","../__tests__/modules/client/transfers.test.ts","../__tests__/modules/client/utilityendpoints.test.ts","../__tests__/modules/client/validatorgetendpoints.test.ts","../__tests__/modules/client/validatorpostendpoints.test.ts","../examples/account_endpoints.ts","../examples/human_readable_orders.json","../examples/composite_example.ts","../examples/faucet_endpoint.ts","../examples/json-encoding.ts","../examples/long_term_order_cancel_example.ts","../examples/markets_endpoints.ts","../src/clients/native.ts","../examples/native_examples.ts","../examples/noble_example.ts","../examples/optimal_node.ts","../examples/short_term_order_cancel_example.ts","../examples/human_readable_short_term_orders.json","../examples/short_term_order_composite_example.ts","../examples/test.ts","../examples/transfer_example_deposit.ts","../examples/transfer_example_send.ts","../examples/transfer_example_subaccount_transfer.ts","../examples/transfer_example_withdraw.ts","../examples/transfer_example_withdraw_other.ts","../examples/utility_endpoints.ts","../examples/validator_get_example.ts","../examples/raw_orders.json","../examples/validator_post_example.ts","../examples/wallet_address.ts","../examples/websocket_example.ts","../../v4-proto-js/src/codegen/amino/amino.ts","../../v4-proto-js/src/codegen/amino/bundle.ts","../../v4-proto-js/src/codegen/cosmos_proto/cosmos.ts","../../v4-proto-js/src/codegen/cosmos_proto/bundle.ts","../../v4-proto-js/src/codegen/cosmos/app/runtime/v1alpha1/module.ts","../../v4-proto-js/src/codegen/cosmos/app/v1alpha1/config.ts","../../v4-proto-js/src/codegen/cosmos/app/v1alpha1/module.ts","../../v4-proto-js/src/codegen/cosmos/app/v1alpha1/query.ts","../../v4-proto-js/src/codegen/cosmos/auth/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/auth.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/authz/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/authz.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/event.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/bank/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/authz.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/bank.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/base/node/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/base/reflection/v1beta1/reflection.ts","../../v4-proto-js/src/codegen/cosmos/base/reflection/v2alpha1/reflection.ts","../../v4-proto-js/src/codegen/cosmos/base/tendermint/v1beta1/types.ts","../../v4-proto-js/src/codegen/tendermint/p2p/types.ts","../../v4-proto-js/src/codegen/cosmos/base/tendermint/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/circuit/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/types.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/query.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/tx.ts","../../v4-proto-js/src/codegen/cosmos/consensus/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/consensus/v1/query.ts","../../v4-proto-js/src/codegen/cosmos/consensus/v1/tx.ts","../../v4-proto-js/src/codegen/cosmos/crisis/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/crisis/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/crisis/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/crypto/ed25519/keys.ts","../../v4-proto-js/src/codegen/cosmos/crypto/hd/v1/hd.ts","../../v4-proto-js/src/codegen/cosmos/crypto/keyring/v1/record.ts","../../v4-proto-js/src/codegen/cosmos/crypto/multisig/keys.ts","../../v4-proto-js/src/codegen/cosmos/crypto/secp256k1/keys.ts","../../v4-proto-js/src/codegen/cosmos/crypto/secp256r1/keys.ts","../../v4-proto-js/src/codegen/cosmos/distribution/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/distribution.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/evidence/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/evidence.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/feegrant.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/genutil/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/genutil/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/gov/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/gov.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/query.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/tx.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/gov.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/group/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/types.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/events.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/query.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/tx.ts","../../v4-proto-js/src/codegen/cosmos/mint/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/mint.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/msg/textual/v1/textual.ts","../../v4-proto-js/src/codegen/cosmos/msg/v1/msg.ts","../../v4-proto-js/src/codegen/cosmos/nft/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/event.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/nft.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/orm/module/v1alpha1/module.ts","../../v4-proto-js/src/codegen/cosmos/orm/query/v1alpha1/query.ts","../../v4-proto-js/src/codegen/cosmos/orm/v1/orm.ts","../../v4-proto-js/src/codegen/cosmos/orm/v1alpha1/schema.ts","../../v4-proto-js/src/codegen/cosmos/params/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/params/v1beta1/params.ts","../../v4-proto-js/src/codegen/cosmos/params/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/query/v1/query.ts","../../v4-proto-js/src/codegen/google/protobuf/descriptor.ts","../../v4-proto-js/src/codegen/cosmos/reflection/v1/reflection.ts","../../v4-proto-js/src/codegen/cosmos/slashing/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/slashing.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/staking/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/authz.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/genesis.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/store/internal/kv/v1beta1/kv.ts","../../v4-proto-js/src/codegen/cosmos/store/snapshots/v1/snapshot.ts","../../v4-proto-js/src/codegen/cosmos/store/v1beta1/listening.ts","../../v4-proto-js/src/codegen/cosmos/store/streaming/abci/grpc.ts","../../v4-proto-js/src/codegen/cosmos/store/v1beta1/commit_info.ts","../../v4-proto-js/src/codegen/cosmos/tx/config/v1/config.ts","../../v4-proto-js/src/codegen/cosmos/crypto/multisig/v1beta1/multisig.ts","../../v4-proto-js/src/codegen/cosmos/tx/signing/v1beta1/signing.ts","../../v4-proto-js/src/codegen/cosmos/tx/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/tx/v1beta1/service.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/upgrade.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/query.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/tx.ts","../../v4-proto-js/src/codegen/cosmos/vesting/module/v1/module.ts","../../v4-proto-js/src/codegen/cosmos/vesting/v1beta1/vesting.ts","../../v4-proto-js/src/codegen/cosmos/vesting/v1beta1/tx.ts","../../v4-proto-js/node_modules/.pnpm/@osmonauts+lcd@0.6.0/node_modules/@osmonauts/lcd/types/rest.d.ts","../../v4-proto-js/node_modules/.pnpm/@osmonauts+lcd@0.6.0/node_modules/@osmonauts/lcd/types/index.d.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/base/node/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/base/tendermint/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/consensus/v1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/params/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/query.lcd.ts","../../v4-proto-js/src/codegen/cosmos/tx/v1beta1/service.lcd.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/query.lcd.ts","../../v4-proto-js/node_modules/.pnpm/@cosmjs+stargate@0.32.4/node_modules/@cosmjs/stargate/build/index.d.ts","../../v4-proto-js/src/codegen/cosmos/app/v1alpha1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/base/node/v1beta1/query.rpc.service.ts","../../v4-proto-js/src/codegen/cosmos/base/tendermint/v1beta1/query.rpc.service.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/consensus/v1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/orm/query/v1alpha1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/params/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/tx/v1beta1/service.rpc.service.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/query.rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/auth/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/authz/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/bank/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/circuit/v1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/consensus/v1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/crisis/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/distribution/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/evidence/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/feegrant/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/gov/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/group/v1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/mint/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/nft/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/slashing/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/staking/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/upgrade/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/vesting/v1beta1/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/cosmos/lcd.ts","../../v4-proto-js/node_modules/.pnpm/@cosmjs+tendermint-rpc@0.32.4/node_modules/@cosmjs/tendermint-rpc/build/index.d.ts","../../v4-proto-js/src/codegen/cosmos/rpc.query.ts","../../v4-proto-js/src/codegen/cosmos/rpc.tx.ts","../../v4-proto-js/src/codegen/cosmos/bundle.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/asset.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/blocktime.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/params.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/block_rate_limit_config.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/clob_pair.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/equity_tier_limit_config.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/liquidations_config.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/asset_position.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/perpetual_position.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/subaccount.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/liquidations.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/order.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/matches.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/mev.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/order_removals.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/operation.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/process_proposer_matches_events.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/protocol/v1/subaccount.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/protocol/v1/clob.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/shared/removal_reason.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/off_chain_updates/off_chain_updates.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/daemons/deleveraging/deleveraging.ts","../../v4-proto-js/src/codegen/dydxprotocol/daemons/pricefeed/price_feed.ts","../../v4-proto-js/src/codegen/dydxprotocol/daemons/sdaioracle/sdai.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/block_message_ids.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/delayed_message.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/epochs/epoch_info.ts","../../v4-proto-js/src/codegen/dydxprotocol/epochs/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/epochs/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/params.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/govplus/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/govplus/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/govplus/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/protocol/v1/perpetual.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/events/events.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/indexer_manager/event.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/redis/redis_order.ts","../../v4-proto-js/src/codegen/dydxprotocol/indexer/socks/messages.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/perpetual.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/params.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/market_param.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/market_price.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/limit_params.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/capacity.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/pending_send_packet.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/params.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/reward_share.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/transfer.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/params.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/stats.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/ve/ve.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/vest_entry.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/genesis.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/query.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/epochs/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/query.lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/assets/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/epochs/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/govplus/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/query.rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/blocktime/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/clob/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/delaymsg/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/feetiers/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/govplus/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/perpetuals/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/prices/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/ratelimit/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/rewards/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/sending/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/stats/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/subaccounts/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/vest/tx.rpc.msg.ts","../../v4-proto-js/src/codegen/dydxprotocol/lcd.ts","../../v4-proto-js/src/codegen/dydxprotocol/rpc.query.ts","../../v4-proto-js/src/codegen/dydxprotocol/rpc.tx.ts","../../v4-proto-js/src/codegen/dydxprotocol/bundle.ts","../../v4-proto-js/src/codegen/gogoproto/gogo.ts","../../v4-proto-js/src/codegen/gogoproto/bundle.ts","../../v4-proto-js/src/codegen/google/api/annotations.ts","../../v4-proto-js/src/codegen/google/api/http.ts","../../v4-proto-js/src/codegen/google/bundle.ts","../../v4-proto-js/src/codegen/tendermint/libs/bits/types.ts","../../v4-proto-js/src/codegen/tendermint/bundle.ts","../../v4-proto-js/src/codegen/index.ts","../node_modules/.pnpm/@types+estree@1.0.6/node_modules/@types/estree/index.d.ts","../node_modules/.pnpm/@types+json-schema@7.0.15/node_modules/@types/json-schema/index.d.ts","../node_modules/.pnpm/@types+eslint@9.6.1/node_modules/@types/eslint/use-at-your-own-risk.d.ts","../node_modules/.pnpm/@types+eslint@9.6.1/node_modules/@types/eslint/index.d.ts","../node_modules/.pnpm/@types+eslint-scope@3.7.7/node_modules/@types/eslint-scope/index.d.ts","../node_modules/.pnpm/@types+eslint-visitor-keys@1.0.0/node_modules/@types/eslint-visitor-keys/index.d.ts","../node_modules/.pnpm/@types+ref-napi@3.0.12/node_modules/@types/ref-napi/index.d.ts","../node_modules/.pnpm/@types+ref-struct-di@1.1.12/node_modules/@types/ref-struct-di/index.d.ts","../node_modules/.pnpm/@types+ffi-napi@4.0.10/node_modules/@types/ffi-napi/index.d.ts","../node_modules/.pnpm/@types+prettier@2.7.3/node_modules/@types/prettier/index.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/zone.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/settings.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/_util.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/misc.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/duration.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/interval.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/datetime.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/info.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/src/luxon.d.ts","../../node_modules/.pnpm/@types+luxon@3.4.2/node_modules/@types/luxon/index.d.ts"],"fileIdsList":[[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,999],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,992],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,991,993,995,996,1000],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,993,994,997],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,991,994,997],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,993,995,997],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,991,992,994,995,996,997,998],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,991,997],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,993],[242,243,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[240,244,261,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601],[240,242,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[240,243,244,246,247,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,519,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,606],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,536,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,606],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,519,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,606],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,606],[99,241,242,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610],[147,244,262,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,519,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,610],[241,242,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,532,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610,616],[99,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,536,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,610],[81,261,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,242,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,532,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610],[241,264,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,610,622],[147,240,241,242,266,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,535,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,610],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,600],[241,242,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,532,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610,627],[80,147,241,244,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,610],[99,144,241,242,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610,637],[266,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,601,610],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,599,610],[100,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[100,101,102,103,104,105,121,122,123,124,125,126,127,128,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[120,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[120,122,124,125,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[122,124,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[102,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[122,123,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[107,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[106,107,108,109,110,111,112,113,114,115,119,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[113,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[118,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[254,255,256,257,258,259,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[52,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[55,57,58,59,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,57,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[57,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[56,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[116,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[116,117,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[136,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[120,136,138,139,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[136,138,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,137,138,139,140,141,142,143,145,146,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,131,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,136,144,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,136,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[131,134,135,136,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,147,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[118,129,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,129,132,147,148,149,150,151,156,234,235,236,237,238,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[149,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[131,156,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[148,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,163,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,148,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,167,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[135,156,166,169,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,174,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,176,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,183,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,187,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[118,156,186,189,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,196,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,195,199,200,201,202,206,211,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[157,158,159,164,165,168,170,171,172,175,177,178,179,180,184,185,188,190,191,192,193,197,212,214,215,218,219,224,226,231,232,233,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[118,156,213,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,217,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,223,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[156,222,225,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,131,156,230,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[129,133,136,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[153,155,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,152,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[118,153,154,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,129,135,136,147,148,150,195,237,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,132,135,149,156,227,234,236,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,65,66,68,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[66,68,69,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[52,53,67,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[51,53,65,67,70,74,78,79,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[60,61,62,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[60,61,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[61,62,63,64,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,60,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,60,61,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[71,72,73,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,65,71,72,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[75,76,77,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[54,65,75,76,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[65,70,74,78,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[53,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,522,523,524,525,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[251,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,981,984],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,981,982,983],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,984],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,987,988,989],[328,329,330,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,412,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[327,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,537,538,539,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,987,989],[130,131,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,162,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,520,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,160,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,160,161,162,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,154,162,166,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,162,166,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,221,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,154,162,173,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,162,173,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,160,181,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,162,182,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,154,160,162,181,186,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,162,186,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,154,160,162,181,216,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,160,181,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,154,160,162,181,207,210,222,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,160,181,207,208,210,221,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,135,160,162,181,222,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,133,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,133,134,135,136,154,160,162,207,208,209,210,221,227,228,229,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,133,134,135,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,154,162,198,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,135,162,195,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,195,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,162,195,200,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,160,194,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,162,195,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,203,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,204,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,131,154,162,195,205,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,160,181,195,203,204,207,208,209,210,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,152,160,162,181,207,208,210,220,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,160,207,208,209,210,228,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,160,207,208,209,210,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,181,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,152,160,207,208,209,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[130,208,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[251,252,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,481,482,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,482,483,484,485,486,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,481,482,483,485,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,481,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[272,273,274,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,488,489,490,491,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,295,318,319,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,480,487,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,318,319,320,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,480,487,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[318,319,320,321,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[319,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,487,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[295,318,320,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,480,487,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[276,277,278,279,280,281,282,283,284,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[283,285,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[268,275,285,289,303,322,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,480,487,492,499,505,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[298,299,300,301,302,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,506,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,293,294,295,296,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[289,295,303,304,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[295,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,297,309,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[295,297,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,289,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[290,292,293,294,295,296,297,304,305,306,307,308,309,310,311,312,313,314,315,316,317,323,324,325,326,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,467,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[289,292,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[291,295,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,297,306,307,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,307,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[292,293,295,297,322,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,297,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,297,306,307,309,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,307,308,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,466,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[289,293,295,297,303,304,305,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,295,297,307,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[293,307,308,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,285,289,290,293,294,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[295,303,304,305,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[275,289,290,295,303,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[289,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[286,287,288,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,289,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[270,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[291,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[269,270,271,291,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,469,470,471,472,473,474,475,476,477,478,479,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,475,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,474,476,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,303,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,480,493,499,500,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,493,500,501,502,503,504,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,480,499,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[285,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,468,493,501,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,494,495,496,497,498,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,495,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,494,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[144,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,388,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,379,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,381,384,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,379,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,332,333,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,380,383,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,391,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,332,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,382,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,405,406,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,380,384,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,405,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,378,379,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,378,379,380,381,382,383,384,385,386,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,406,407,408,409,410,411,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,399,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,391,392,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,382,384,392,393,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,383,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,332,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,379,384,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,384,388,392,393,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,388,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,382,384,387,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,332,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,381,384,391,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,377,379,384,405,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[78,144,147,239,241,243,247,264,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,507,508,519,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[50,99,240,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,514,515,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[98,99,241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,516,517,518,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,510,511,512,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[264,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,511,512,513,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,533,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[78,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[147,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,515,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[98,135,144,147,167,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[98,131,144,147,169,239,241,264,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,521,527,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,129,144,147,239,263,265,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[78,80,98,99,118,129,144,147,239,241,263,264,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,528,529,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[88,94,97,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,509,514,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,136,144,147,239,264,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[78,80,99,118,239,260,264,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,526,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,515,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,147,239,240,241,246,261,262,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,521,532,535,536,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,600],[147,239,241,266,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,534,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,598],[266,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,81,98,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,144,239,241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,527,528,530,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[242,243,247,261,262,266,267,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,519,531,532,535,536,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,599,600],[239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[81,240,243,260,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[248,249,250,253,261,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[99,241,245,246,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[243,261,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,519,531,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[80,99,129,241,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,769],[47,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,641],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,648],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,646],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,650],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,652,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,652],[48,49,50,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,650],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,653],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,650],[48,49,84,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,655],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,658,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,658],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,655],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,659],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,655],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,662],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,664,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,664],[48,49,50,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,662],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,665],[48,49,88,92,96,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,666,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,666],[48,49,84,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,671,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,671],[48,49,50,87,88,96,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,669,670],[48,49,83,84,87,95,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[50,90,93,94,97,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,759,760,761,762,763,764,765,766,767,768,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,834,835],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,674,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,674],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,673],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,675],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,673],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,677,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,677],[48,49,91,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,678],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,681],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,683],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,689],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,691,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,691],[48,49,50,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,689],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,692],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,696,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,696],[48,49,50,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,697],[48,49,84,88,89,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,699],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,701,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,701],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,699],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,702],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,706],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,708,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,708],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,706],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,709],[48,49,84,88,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,706],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,710],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,712,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,712],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,710],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,713],[48,49,88,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,710],[48,49,89,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,715],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,718,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,718],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,715],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,719],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,715],[48,49,84,88,89,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,721],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,723,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,723],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,724],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,729],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,731,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,731],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,729],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,732],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,734],[48,49,50,84,88,89,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,739,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,739],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,738],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,741],[80,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,744],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,746,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,746],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,744],[48,49,84,89,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,747],[48,49,93,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[49,94,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770],[48,49,94,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,50,93,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,84,87,88,89,90,92,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,751],[48,49,84,88,90,93,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,92,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,754],[48,49,92,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,88,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,758],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,761,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,761],[48,49,50,87,96,97,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,760],[48,49,88,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,758,759],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,764,770],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,764],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,763],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,765],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,768],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,767],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,650],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,643],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,837],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,839],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,839],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,837],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,842],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,844],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,844],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,841,842],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,845],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,846,847,848,849],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,853],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,853,855],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,847,853],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,855,856,858,859],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,855],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,866],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,866],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,846,847,848,849,857,865],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,859],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,846,847,848,849,853,855,856,858],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,854],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,871],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,873],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,873],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,874],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,875],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,877],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,877],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,875],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,878],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,880],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,880],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,881],[49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,884],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,862,863,864,885],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,863,864],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,862],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,863],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,928,929,930,931,932,933,934,935,936,937,938,939,940],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,890,891],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,893],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,893],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,890,891],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,894],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,895,896],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,898],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,898],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,895,896],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,899],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,895],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,900],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,904],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,904],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,900,901,903],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,905],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,906],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,908],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,908],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,910],[80,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,956,957,958,959,960,961,962,963,964,965,966,967,968],[48,49,90,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,853],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,913,914],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,913],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,915],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,918],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,918],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,915,917],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,919],[49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,921],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,921],[48,49,50,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,853],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,851,852],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,922],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,924],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,770,926],[48,49,239,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,926],[48,49,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,927],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,973],[84,88,89,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,741,975,976],[48,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,642,644,836,972,974,977,979],[48,49,82,84,85,86,91,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[82,83,85,86,87,91,92,95,96,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,670,978],[48,49,87,95,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,84,86,87,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,82,83,84,86,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596],[48,49,85,328,329,330,334,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,414,415,416,417,418,419,420,421,422,423,424,425,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,542,544,545,546,547,548,549,550,551,552,553,554,555,556,557,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596]],"fileInfos":[{"version":"44e584d4f6444f58791784f1d530875970993129442a847597db702a073ca68c","affectsGlobalScope":true,"impliedFormat":1},{"version":"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","impliedFormat":1},{"version":"3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","impliedFormat":1},{"version":"9a68c0c07ae2fa71b44384a839b7b8d81662a236d4b9ac30916718f7510b1b2d","impliedFormat":1},{"version":"5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","impliedFormat":1},{"version":"68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","impliedFormat":1},{"version":"5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","impliedFormat":1},{"version":"6920e1448680767498a0b77c6a00a8e77d14d62c3da8967b171f1ddffa3c18e4","affectsGlobalScope":true,"impliedFormat":1},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true,"impliedFormat":1},{"version":"515d0b7b9bea2e31ea4ec968e9edd2c39d3eebf4a2d5cbd04e88639819ae3b71","affectsGlobalScope":true,"impliedFormat":1},{"version":"45d8ccb3dfd57355eb29749919142d4321a0aa4df6acdfc54e30433d7176600a","affectsGlobalScope":true,"impliedFormat":1},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true,"impliedFormat":1},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true,"impliedFormat":1},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true,"impliedFormat":1},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true,"impliedFormat":1},{"version":"93495ff27b8746f55d19fcbcdbaccc99fd95f19d057aed1bd2c0cafe1335fbf0","affectsGlobalScope":true,"impliedFormat":1},{"version":"6fc23bb8c3965964be8c597310a2878b53a0306edb71d4b5a4dfe760186bcc01","affectsGlobalScope":true,"impliedFormat":1},{"version":"ea011c76963fb15ef1cdd7ce6a6808b46322c527de2077b6cfdf23ae6f5f9ec7","affectsGlobalScope":true,"impliedFormat":1},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true,"impliedFormat":1},{"version":"69ab18c3b76cd9b1be3d188eaf8bba06112ebbe2f47f6c322b5105a6fbc45a2e","affectsGlobalScope":true,"impliedFormat":1},{"version":"4738f2420687fd85629c9efb470793bb753709c2379e5f85bc1815d875ceadcd","affectsGlobalScope":true,"impliedFormat":1},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true,"impliedFormat":1},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true,"impliedFormat":1},{"version":"9fc46429fbe091ac5ad2608c657201eb68b6f1b8341bd6d670047d32ed0a88fa","affectsGlobalScope":true,"impliedFormat":1},{"version":"ac9538681b19688c8eae65811b329d3744af679e0bdfa5d842d0e32524c73e1c","affectsGlobalScope":true,"impliedFormat":1},{"version":"0a969edff4bd52585473d24995c5ef223f6652d6ef46193309b3921d65dd4376","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true,"impliedFormat":1},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true,"impliedFormat":1},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true,"impliedFormat":1},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true,"impliedFormat":1},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true,"impliedFormat":1},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true,"impliedFormat":1},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true,"impliedFormat":1},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true,"impliedFormat":1},{"version":"1a94697425a99354df73d9c8291e2ecd4dddd370aed4023c2d6dee6cccb32666","affectsGlobalScope":true,"impliedFormat":1},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true,"impliedFormat":1},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true,"impliedFormat":1},{"version":"bf14a426dbbf1022d11bd08d6b8e709a2e9d246f0c6c1032f3b2edb9a902adbe","affectsGlobalScope":true,"impliedFormat":1},{"version":"e3f9fc0ec0b96a9e642f11eda09c0be83a61c7b336977f8b9fdb1e9788e925fe","affectsGlobalScope":true,"impliedFormat":1},{"version":"59fb2c069260b4ba00b5643b907ef5d5341b167e7d1dbf58dfd895658bda2867","affectsGlobalScope":true,"impliedFormat":1},{"version":"479553e3779be7d4f68e9f40cdb82d038e5ef7592010100410723ceced22a0f7","affectsGlobalScope":true,"impliedFormat":1},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true,"impliedFormat":1},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true,"impliedFormat":1},{"version":"33358442698bb565130f52ba79bfd3d4d484ac85fe33f3cb1759c54d18201393","affectsGlobalScope":true,"impliedFormat":1},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true,"impliedFormat":1},{"version":"5ac99576c1d6d9c84d1f8d10547309a9007a8146f1811ea6d3ff57c6040f1e6a","signature":"db943bdd3a6774bc819968ed8e33b9849301dd8c3fed8ca735baba4ebcb8d62a"},{"version":"1558c642e03689d42843e7b047b9c20e77ee09ab388ff854484db5dcfbed11da","impliedFormat":1},{"version":"932cade1c5802123b5831f332ad8a6297f0f7d14d0ee04f5a774408f393e2200","impliedFormat":1},{"version":"83708ee8b5bc7f266045bf636de9b80d3ecc1dc69a71305cfafc032293a44b38","signature":"b9ce966a08b9590b14f9ffd6c3553f1467a387e80816bcba37625696c1821618"},{"version":"5971112b3a369f8b038b707943caf84345ee39d6b420feb05b199d5a7b68c8d9","signature":"4844f63005404f4d2eb6784c80dc01876977ddece83a491694a6a53f88774abf"},{"version":"a173e9be041c233603b1aa145d8c18d09ac69e4291b4ba76256ec773d3934164","impliedFormat":1},{"version":"6ba292cc3df1eea225aacb3182f9b0b8eab9d8637a9c698af1e5b58aa5492e9e","impliedFormat":1},{"version":"f9f55a2f6f8e07d3ea10e1154a0fc129ec72c21e57ffe9b8720bbb80ce6407ac","impliedFormat":1},{"version":"07d39f8730ecb29d631e57e8a8a7491fc10d7ef8b0eb035781bdaf81b948e6b3","impliedFormat":1},{"version":"66ea2ca4caba80ab1ace4e661ed9eff6d7e2c2838f8b8e5801e73e30108f1aeb","impliedFormat":1},{"version":"cf802ef15265bde5e8c931459fc13d15fec46ebdfab3845b86d22897eb4cdf36","impliedFormat":1},{"version":"513dc812720ffd3f2ce2a709cf474177cfb4ec7e2386bf64a664e7b6946f1dae","impliedFormat":1},{"version":"376a324ad9678bc3d6cadf4bbef4ae7ea2624c8ebf4bc149064f4b4b4c00024c","impliedFormat":1},{"version":"43760728760f66940ad6012894dbf7808a9399628a7a21de89ce26389a94d98d","impliedFormat":1},{"version":"0fc31521f9064f13d54215d6ef35bafb61b68acd7e87f7bc53bb85d3404668f1","impliedFormat":1},{"version":"0cbfce53b86891a1581b878fb3361fb175cc866c98f7f446433e45f3e8befa26","impliedFormat":1},{"version":"e579636afe1fd2da1596a2ecd07134c973359c14ef96a357b4ec67e406d89113","impliedFormat":1},{"version":"c0a4f50a1c0623e1c0a311447b578314ad927feb4abbdcc71bacd573a7b9462b","impliedFormat":1},{"version":"34623a91c4f3f0f2203b06c51b37d229a3ef1007352bd5bcc41086370cca6e0b","impliedFormat":1},{"version":"8f405903772553f71e9cad2b830bb002c83cc1456a5da43439a9a5841ca42611","impliedFormat":1},{"version":"4147899a0f0822159cf1eb9944e62c69bb74c41dd2acce73b5f8444a8dcd26d3","impliedFormat":1},{"version":"e05747a1c227cc4016ab8069fbffecec81ccd75c933112641243fa9b57a727a4","impliedFormat":1},{"version":"081c44b708018590fe9300d74889c78c72d444915c81adda1850c6bd7f393c2c","impliedFormat":1},{"version":"5ecbb68a59f7e45d450fa17399f254910a5b7b46940452fd6fd775b07b814de7","impliedFormat":1},{"version":"722745986f8325fecd8bf8a257e9483c3c71845c8e15aa88c36afab0cea84112","impliedFormat":1},{"version":"4147899a0f0822159cf1eb9944e62c69bb74c41dd2acce73b5f8444a8dcd26d3","impliedFormat":1},{"version":"b096394821a4a2ecf4f5486d8e6417b36d53b75733fee9e7fc48072bdd0003bb","impliedFormat":1},{"version":"8b078be87832ebcd318d89d7d629349a452ecc8b02e4f49cfcfd7d883a162f17","impliedFormat":1},{"version":"88819391bc47dc1baece98bcf696c3be4356a1caed3ac5b8e2379e3ada6879b9","impliedFormat":1},{"version":"4147899a0f0822159cf1eb9944e62c69bb74c41dd2acce73b5f8444a8dcd26d3","impliedFormat":1},{"version":"4ffb8b357abd704bfe3f0301bb556287063d5feb89b5d7ca301b013dadb57536","impliedFormat":1},{"version":"046a278aeadb95bacbcd257942d6bc35845f1fddcb6eaebf84cef1afeeb3df8d","impliedFormat":1},{"version":"d04598f25506fa473de73dff5b819cce92452a9853289bb0ec45bc052b2f1821","impliedFormat":1},{"version":"83298a5e9877723b46368eb3d301e4e58ea976c016f7d86803530397fc2991e4","impliedFormat":1},{"version":"b43fe27469461a1b41ca8d0f829ca9b838e1a5c16e2eaadfb7cc474f89737045","impliedFormat":1},{"version":"e9b48596baefe465d46567a4beccd564035024a154d99f54c7fed02380707333","impliedFormat":1},{"version":"cb2b6808083ba0c74e99107702509cffe7047862e84a02506f50e6860690ef44","signature":"76ff87ac55c36814a855787a69ffe9c2fd16b6fa80c7973f4ef534af95eb4daa"},{"version":"bcac51040c57029c477bd9a249f8e72501950f9d9716a0863fe787ff736830e8","signature":"a2d4d9d4a30be2ef4c9a816a1cb47d37782464bd6ef33eef3ea6bddb8560d2fa"},{"version":"d53b890de0860cec7dcf3bb8e780c0f15c7e0b02736240a7aed4b58fa1f0a491","signature":"572319c41c9d0faeca1ea0776b37e10334d1527b4450b6e1b5aaf11d89fa510e"},{"version":"3ae4eafdb090ff1d9133da28fed7875b08840243fa572761140439bc2da9194d","signature":"a50f3d7c0f81c69581a72cbe240e1e11c3c7c934a4f3eb2e5b1ba9f663bf4a68"},{"version":"39baa693f4effaec842483efc83b1e601c2df335e2ae0f40d90b12028b648a39","signature":"01648549228f199e4fb6bd9796e5e8b536d1e332a48db7cbe94abb0fe509f0a8"},{"version":"de13222c90a890b013538bdc93ab3289713add5d51932011d3287b77121407fa","signature":"544996539a7aad6feecf71c64d509faa32fe022576d5799aa5b4a0a8716a3404"},{"version":"903fd680365a5807cec70887fc144de1d69ce67d352ee1454376694ee7ca1caa","signature":"908422a217661a9bb50b9abcf175d8f541949f4293b99b22236c0851c3710e49"},{"version":"11ddadf01e9da16e9e9c59e5e2021fef0721d2ef56eb5b456327cb3b5f479b6c","signature":"44e8c37205afb5a495da2023fed08b2d127d66ff25cb5268f1a561a711c0303a"},{"version":"0c71eabcd986adcb8d55ee24b71472afc80286f4439e01f7773ba11eae5e8257","signature":"4a59bfff39bbd584ff30de473c26f260110a3c0769db076e0cb5a49759c76985"},{"version":"cb27bacd51a16dab0221692bf3c53e155705329fd85006785e4dafa0fa38bb15","signature":"3d00eefdb87eb727206fdd916d19b3fe031b1fd594045a22ee3c61c3700d4c9b"},{"version":"e7c87f1c8eb2f9f34b8343dbac25866ca317ce7a212aa7de64f5764889c9e2ca","signature":"c606633d49d6f74ca7f5627aa674913c75f14612ef7b96c669ae3412153c41f4"},{"version":"9f73209712c6a1fc1390c10bc57963a9e70249872e790acb31334298db0750d4","signature":"94c33aaec7be5edcc4efe945c6ab5129b798a3ddc0907a117a9320560817b1d6"},{"version":"86a63255e84420f7460cbfc1b0a118e062b4af3171f8b9f5ae1b1541c0f4f275","signature":"fc0e55d18d925d9f3e10dc9ffb5c4d2df0cad2104d8aba993586ef38674dff90"},{"version":"f1d6dee219c88b868c1c3d0ae0e03d075d345c18674aedc5bc9856d621df475a","signature":"4716e17aad40375114601b465eadb61431cc251cbdb3761c5a990e6b6620a25b"},{"version":"8ad6cf519e75956ad4e74ac24ee0bf8633f9bfc1b99695848b22bdf55183c9d4","signature":"1c193c521d3649a125bbb1806f9b206fe48f704ad6e6014285275e377af708d2"},{"version":"408635435f83a71df32a5e946acf51ee8859713d04965c33839f84a9938d3314","signature":"115e1c8cb8e93fc9d7aaf7bd893cdf819486843d5aeb8f0346b94bf35e1b7a30"},{"version":"7eb1f005e2a735e7bae8e9b89306931091031c7fcb129d5005425c182c724998","signature":"51e51f5223de931fdf9a85a272c3f32904c1226a3f995214b5d5f15f84a0f757"},{"version":"95453abc5570369da28b64db2ffeee0abbdc4e42f9c0393e968ed06af5b25bef","signature":"8182ebb9877c78f57ae6d2dc488867814ecfa62c1dc1222043aa5ba910b00a00"},{"version":"1b07773ee3ca8a62873be6a6b8b3aa29455c7b53db2cd4399ec4c6e362cef92b","impliedFormat":1},{"version":"bb82c2f6ce46746ddff974720459546747854d8e83a5ab2bf1ea5e11dbc535fe","impliedFormat":1},{"version":"3ef6c822342f271295a588afa47c00dc9c221a07e535342cfeaff6ff76fd384f","impliedFormat":1},{"version":"66f6d5d5d383ef51a7205d10543944c0be74b98190c16ec077ad40640f369147","impliedFormat":1},{"version":"684b95e60a1346cb54c7a45cb424091d97c9d573cecdaf2b5954a4d63d4bb5a9","impliedFormat":1},{"version":"4d708c75dad09198ae2b98abe2bfb355d7eb517c29e3f1ddd101fe2ca4884159","impliedFormat":1},{"version":"2321e25e34075320eeedbc5cd56051c9ce0341cb6a51e4faafb8f827d8045ceb","impliedFormat":1},{"version":"1cc2355816ba43eb2d6eb2670ac83d29a3ef02a01c09a4e2d5c0cc21e35249f7","impliedFormat":1},{"version":"ce47207ec1bd458b7966f0bbb5d9d15be0b00116fec4efda52ec8fcae8321586","impliedFormat":1},{"version":"a1f914818a2cc3bf3a693b99902d9cb0c1a6613df3cdd2bd8134cc63e695565c","impliedFormat":1},{"version":"3bd1d708281a33e7736f9c75c74221c077827d21c941f72ed3a8533b55fa5c7c","impliedFormat":1},{"version":"838c4154f06e964281fbfa88cf8cf8d76f194cbdd4d3f13e0a9e9a52e5faac6b","impliedFormat":1},{"version":"e32f79a7f77271780ecfcff5205300791429c2526b0b72307bb300ded25420c4","impliedFormat":1},{"version":"6ea46b5278f87aaf63479e72bb2d44474e458b4e603fa7ef46b3730c8a320073","impliedFormat":1},{"version":"22176ca5c9549edad90a532d5623a9b6ec552505178a7aeec3591f0b8f485d87","impliedFormat":1},{"version":"ba01df9e06cc51729deef602895fe3ceafd9ce2f17f2119db81eb67ff6ef7998","impliedFormat":1},{"version":"1dbb63933fe1404f9947c55f7f53308eb6fafd3b8646c4afc5f8a0376b1886ac","impliedFormat":1},{"version":"2dee5f01ddfa5375af2104e3d58e98afb881b63294187bab0a3df873a7bb2ad1","impliedFormat":1},{"version":"3dbe631d8fddc408346806ef5cf4195ba34a8ba1eb3cfde3aeffb813a38bffd2","impliedFormat":1},{"version":"8a0a3cdb27704e89ff1dbf93e43bb40bb2a96199a4483edc22fcf640a590a99d","impliedFormat":1},{"version":"3d444fa6e8057de7ea8ff4a9b737adc9538b2fcf7767969bdedc58bfc892582c","impliedFormat":1},{"version":"1906f0be92468440d7ab4b26dcced83ce978a939c64806cc75e4f484e9b649c0","impliedFormat":1},{"version":"070cec1d2c7f9ed3c8f02e2d471ed036f66d58e4fbea47b2bce35dddd9e921ef","impliedFormat":1},{"version":"3d135e55be21b9f506a4d7f441abf7fc159a54ad2b64556b0ba0f819695c3c47","impliedFormat":1},{"version":"85245e7f103feba8b3b9d2203ea9dd687545172564bdb275c5a70c0dea0abbfb","impliedFormat":1},{"version":"d72588d7853732dcbf1c5186389458d6a123dbe8f19cede386f424ba32afef8f","impliedFormat":1},{"version":"3babffecf1c0fb251b65b6167fa5909c87bd3e4c1a976d26a156a0cddb84f852","impliedFormat":1},{"version":"406a17e0a2cc399c644b5bc1fb807c9dc71f3247dac25a232864b13370d6f5e9","impliedFormat":1},{"version":"21f75cbb084ee0b35a8792e94e83d937532154a99c343a5bd3d86c26b5d7e0bb","impliedFormat":1},{"version":"d60853beea7347ada1f4774f9b727be6600a2dbbc510cbebfbd2276b8b47224a","impliedFormat":1},{"version":"9efc525cef2b9f35187095ce035d23ef8ab0090b672cd4a71cbffcef6884e80f","impliedFormat":1},{"version":"8dba17cdfdec5ae0a5db9b9038721f4655b6ddf2fdc589e5a90a16555a54d772","impliedFormat":1},{"version":"00f9fe96f593b39bd6b98fe4b4c8e4710887b1fbb01b39db453f1dbaf3dee090","impliedFormat":1},{"version":"c599f3670220bf7913f9f140ca85e66b50e0124050b3e4c629957ef0d9f59d23","impliedFormat":1},{"version":"0e4b7f73c3d89bb89e9732346b1d9c42bd9439fc1756ccbf6263e66dd492c066","impliedFormat":1},{"version":"ca91758a5f0e49810ebf641cfa9cadae8b42ee326d9b0e663c2eea9ca51749d7","impliedFormat":1},{"version":"1527eb02a15b0988c239df0a8d21e3960375fc431740add3402551b8913ff3c2","impliedFormat":1},{"version":"d99a8619851f168989eb222276717a22608fc98734da3fc2de57b74f695136d6","impliedFormat":1},{"version":"ad6c897c80570cd3544c378de9aec077651da02edb320966a1e92a24b34526f5","impliedFormat":1},{"version":"d72588d7853732dcbf1c5186389458d6a123dbe8f19cede386f424ba32afef8f","impliedFormat":1},{"version":"de0541b716cd138c87a796f259883a1c9794fc68ec3f5f7778ff9e0613859c05","impliedFormat":1},{"version":"47595460b73d788d6294b215d376fded84583696dcadd522d26fcffb5147b0bd","impliedFormat":1},{"version":"1906f0be92468440d7ab4b26dcced83ce978a939c64806cc75e4f484e9b649c0","impliedFormat":1},{"version":"d137f974150c32ccdad190f331cdd0b8acf68a18d8f473b86e90b092eac8ec06","impliedFormat":1},{"version":"3b273713f2e970a6e07aa043ac02b1280ea4b50e03d90a632eb401b2ca10cf1e","impliedFormat":1},{"version":"2d3dc11421426b03636da8afc8ef715caa0a8e9b7b4623b314f4a1936c44f14f","impliedFormat":1},{"version":"7b9806ac7cd54f9ee5170b1da84dfedc752541a073ecca325fb99123d0182576","impliedFormat":1},{"version":"bc75f464330a330e214bd37afa050cff44f4a74565c9d2bf7c5afbb73ecc6ddc","impliedFormat":1},{"version":"3969985016b15890111bf0e3a468fd0c449c99d53f543789315cb51a675e3223","impliedFormat":1},{"version":"0d13964e90364cf9c9366f54a477be462a0caa65da21dc8b01cfa7743dbcfa29","impliedFormat":1},{"version":"bcf02e8cb54f4b47b3d1002dff222d95d66384f3b7063783002923f90a975003","impliedFormat":1},{"version":"613f44b5f7d3b4e97c4765619c7475ec398b382a0e2837f78a23ea10aaebebcc","impliedFormat":1},{"version":"75bb977edf840141773284bfb115d07e6ade61e2b4fa5a0e7a950989dff6a8f9","impliedFormat":1},{"version":"c95c4c59dbc5a3544792fa323c99ca828102b740f59d42ddfe73e3036a3795e4","impliedFormat":1},{"version":"10bb5735932e068d97be66e2a9f4c9cad28909c2e2ec240c16382e360ab9f5a2","impliedFormat":1},{"version":"6ed31a206ff729a5b6d1f9bf0be610fd89391a32d12f4cf2c31c00becc410cb3","impliedFormat":1},{"version":"4e1bf1a9917549de0154b3be216ef90a6d48a82535203d581936f009837e7681","impliedFormat":1},{"version":"5bbe0df99c276b5519bd048205790825cfda7ced546cae8b84cac9841a047f6b","impliedFormat":1},{"version":"ec9a719ce1d43b91d9233852eedb8af5c3c86cb5d4d3adaea05cbe4ef799e8e8","impliedFormat":1},{"version":"7c3009f92b4440ddbd73963da9755493be2839b670a6a8211664228897fae84a","impliedFormat":1},{"version":"06ebd2ece60c4e9ae574b54e07207ef8068dc587118a0581b32a4ca119dbd22f","impliedFormat":1},{"version":"c4e7ee6ec6641e1843911956c5130e245d4edf2ce2c556118e899b2b55cbf120","impliedFormat":1},{"version":"961c21d2d069d2796479edbcc2444184af57340774718754bbd4289e3fcfe671","impliedFormat":1},{"version":"608db8a96ce862cc485bf5a09ab85601ff9bd5d1819370085c1d226628cbecd1","impliedFormat":1},{"version":"69a365562f7bf70fd4084fd00be9b24e36e1c50256b8fbd858ba446a087973f1","impliedFormat":1},{"version":"e79728ebbf14b6ec50c424fc06979f606ab62b9bb23175934b8ecd9425a0de99","impliedFormat":1},{"version":"c784461aa15ee0d2f45aabcfb3787fbab10496a58c3abd1ff97ce5b309869d9d","impliedFormat":1},{"version":"87dcc84f02d2cc7cdb46b98037c35e3a0d15f3c787d4baafb882dceb5cb75508","impliedFormat":1},{"version":"c35791af1d03a4641dbf057344d664f49638ecea433dd9390725ba74066fd4be","impliedFormat":1},{"version":"ba22b345edddfd6c61ff21084d73aedd52f7a10a34dc7ec836d40485ad35da16","impliedFormat":1},{"version":"4737ef9dc0b1eade93a3b232a1e95cc6184218e11093dfaca21a06dfddbf2b7a","impliedFormat":1},{"version":"2ef6dd37cc81266c00017d913a7df2afd08c1460d12b03d6dca16da9bfc223fb","impliedFormat":1},{"version":"246dc1f2b8eec8f1958ea5b732506de1c3c644a204169b22141752483ecd866a","impliedFormat":1},{"version":"1e9f2568a49bf670407a0655688ccd786877130aa1b01380ab5e08bf39ecec99","impliedFormat":1},{"version":"7f97f70e289881321ea2436de2861f77f057d808ec1dab11d4ac598ff909a207","impliedFormat":1},{"version":"7634c88ae7b38d03fd0ade5e2c8e19f14007bd1993be62c17327a8713dd58a0c","impliedFormat":1},{"version":"dd2b16e1ec1330c667d1792a0f0422aa2b1a998688dd8fe590f885cf2c893094","impliedFormat":1},{"version":"5d8367cabd5cbe281bbcda28a6de7e18528aba6176c57152443f691e3d98e9fc","impliedFormat":1},{"version":"d5f3f96b702fea4ef43d2d1e509cc828bb371a433941c3edf7b6848064156ba8","impliedFormat":1},{"version":"fdc22d7d9734b3399be0f23dd42b02e05cdb2c0d2a4e3379b6ee05055715ff89","impliedFormat":1},{"version":"56f50fa2dc498886c43ae862b2510826a52a6fe01617ff421a8c6a8bf1ebde5f","impliedFormat":1},{"version":"ae181dfec3f0e17c9f9cc2ef244363ccf906a156b5f34c94771bd9b76294194d","impliedFormat":1},{"version":"0cc405abdf38bbb35cfaeffeb0ede5573aa76b85d9d27d52cf0c1d22fe7a4fde","impliedFormat":1},{"version":"8f2708247dd098a0534adb4f09430ce4180476201d0de345ec80674277584b90","impliedFormat":1},{"version":"97ef98f0e4ba2587acfd2fb0a4a5e331479d23930aa13c36fd8a97f776916ca2","impliedFormat":1},{"version":"5d98daf0099acefd70419619fb5c619a2d84df23513ee8c4a152acb0951d4ecc","impliedFormat":1},{"version":"09e85b9699cbe7e7cc02d9f45695573b240fc179210a7c7b555759f7d7fb7a92","impliedFormat":1},{"version":"a5986efa22663959db1b66cc46773bb833931f32caea80a74ed3f7b5423c31ba","impliedFormat":1},{"version":"715aa3bef40dff0a2d755f94488cf542a301029f15a8c67e8d1fdf354bec4818","impliedFormat":1},{"version":"73ae6bc28c5ade3c3e0aead32b7e2067e6f7116790e1c494287aa781b6a4a0d1","impliedFormat":1},{"version":"63e798b17923bec72aa0df3e0fe47655fcf118478ee491cf3994af8f2cb915f2","impliedFormat":1},{"version":"52247be203cb4b7da26b630eaf03b5cca922cd3fece8d0ad0ad415fad0d12e36","impliedFormat":1},{"version":"1550807603077885db4fb0a8c9e5bb0afd4e9922e1c68bb67d2fe89349c8fafc","impliedFormat":1},{"version":"264e746fbb19aacd50401db65786283ef3e707ba5e2deb4c05a979e7a180d0ca","impliedFormat":1},{"version":"7ca179cbc6da077b07a867114768868618766714da67ff9323a61adee8dd8825","impliedFormat":1},{"version":"f108e470e1422dfa1d43ac99c04f7199394d110d866c0d2f065d29d431a7d360","impliedFormat":1},{"version":"8a6dc76e1fd2572f345faee5a259d278ff254f9bdd67bcf4aac94f12bd137eda","impliedFormat":1},{"version":"8e03b7c67e71d70bd18cffe926ce7cd4e178a1c7978bdce90d49a4fcd2c9e2dc","impliedFormat":1},{"version":"8dd86af556f4918cb722a9eccf6c33872b6ca40d6b8887e514b80176da3bfcb8","impliedFormat":1},{"version":"1f3d2ab1d3cfcedcd55bee513dd68639a12d097d5df1ff3f2985165f7e2ccf8f","impliedFormat":1},{"version":"eb697bb6c2fb335ba1e91a36c5855a0bfd723aa8eddff6d6c33abc4537f9d7cb","impliedFormat":1},{"version":"3c451dbab67c47cd6c4b94e255d9fce668e3b5fd3c79382544c9d4293bcf8866","impliedFormat":1},{"version":"85822e961b336227996ded5feab90423c4177c190a2b8a96b894146459b85e11","impliedFormat":1},{"version":"7606055f3069abadb01fe27a4fcd154d3252fedfa4761275028b49cdbf84d12e","impliedFormat":1},{"version":"fdf39260344513263b4625ba2bfbd3595b7d11eaefc663709421b971ae72a92c","impliedFormat":1},{"version":"b3e44872e61f58a9f81953dede603d7145fff0b8e8e615e169a5cb1acfcc6768","impliedFormat":1},{"version":"c75960710aa2335fb9b5fad81c7c71eaaf9b31aa93bea338bfc2e264cd493e77","impliedFormat":1},{"version":"c9cdc07c2f33fe9f447ed18ed5de55f1b3a2602c4297bc47a63692734b7c27eb","impliedFormat":1},{"version":"9f02e010baf9b563722a7de783f8d0622dfb75f27ddf0c3708acc18d293f8e67","impliedFormat":1},{"version":"e4cc8831d820d301f38c530b4b2c7a9f16116e693b61c7fd68d8a4e042635455","impliedFormat":1},{"version":"87ac962cde0bc685bf52047820b05dbc7660d35e9784fff14b2a06165e4ab9ba","impliedFormat":1},{"version":"8fad449d6f6f2a95becb8c23a78838990418a391fa11fae539e3e891e7168021","impliedFormat":1},{"version":"d01df54dc12686dddfc0970554efc1096d062919b75eb218bfd0e9997d179f74","impliedFormat":1},{"version":"b901fb7fca57fe6a15eb3386e8fe9e08d86c9c637332f8ba00cdcb247cc71ab9","impliedFormat":1},{"version":"2be41e8798aa2720dcdc9c2f3ac9a1a1bebc2cebb297d7a00b3a863317524ffd","impliedFormat":1},{"version":"868f8bf3619fff7852ba895408fdf979838a3ec163eaad1e25d94fcd831a31b0","impliedFormat":1},{"version":"5e9f1a2ba53d7d8366a2e319a943a51d1d8b543a32769bd0b4f529224a0d4dc9","impliedFormat":1},{"version":"ebb5fe63b951d7a2ea026a2c079771cbc70d751fa3281cd4d2a3714c864f5377","impliedFormat":1},{"version":"4e46da7a42ef0580d2a7f530ce40fdc39d4da01c93a19ec089878a5d2dd39098","impliedFormat":1},{"version":"411b935c0769514c6f00a28d2c5d3cd933409b2d3d684dedd8b0b99627c0e371","impliedFormat":1},{"version":"76c059f75e35ac764e2f60387087c9ccb5f2d58f4c25c3d7334929b96a02269a","impliedFormat":1},{"version":"d745aaf77b250490714670c3b6ce847d7431a446a02e2264117ca734c5002aea","impliedFormat":1},{"version":"2955b846f26fb95c9a7ee3d8b4b1b5a556d6286f3acc7b391894356eed3d3e6e","impliedFormat":1},{"version":"cb35bc0d460934da3a51a2215861a332318cfe062384a5d98855da1884340352","impliedFormat":1},{"version":"4aae07eb1cd3121144bc4a7b636f01d28289c60e8a57a892937da45d593e825e","impliedFormat":1},{"version":"34abadd9771163890c50f4fcfa0d56bd413594e39c1cffdd3c5fe8a01c3f7b40","impliedFormat":1},{"version":"172bc50cacd1995c6e994a73a8640f88c645e24ff5f25ccd04db9dfc071fbe5c","impliedFormat":1},{"version":"e1c87a8a9b59b511c882fd9a2b23c8d62e0b64b645f93d99fda7493717ca87bd","impliedFormat":1},{"version":"32178a24c7a79395c6c5f7f189ec735fe60c2ab604d1e6fb964d7717622e7e22","impliedFormat":1},{"version":"893c8bd678f5632582757da791020171e8f3988f93ea7dfea4b88aaf5b91b06a","impliedFormat":1},{"version":"bbcfac72a7b2ad10aefd1f24f203131dcbcf6bc64b8e8d7764f279c3c74c3525","impliedFormat":1},{"version":"bdb73f52284d8f2a6f0b3301f34dade21d7556402f194c260bd6012f89af5fff","impliedFormat":1},{"version":"7188604c5f18ac9ccda109dcd8f44eb7be87c8aae340edafa04eca6178985e91","impliedFormat":1},{"version":"b2ed1380abd77596d9b3bfea56c00fc2cb56085d570a3646b810d85e6f62b133","impliedFormat":1},{"version":"761a52ba15f7962d9c6f7fff90f680d96ca7dc74a69d1b61e33a85546af39d15","impliedFormat":1},{"version":"e5500cbfae5b31a8b054e26f8c53f8e01105b034d4102826d7e8e8173015d524","impliedFormat":1},{"version":"5426fb8e0f156a85cc55485eda8c2b893317ed98b76cd2f34a8c372303462d79","impliedFormat":1},{"version":"cf51c46bda456dc812291f33f7e07fafa536e0a69ccc2d89091a36c48f0884f3","impliedFormat":1},{"version":"66ad7e19a629899523f396a592bb4c287a29e20df9828709907f34968d6dc6b4","impliedFormat":1},{"version":"8ba68c9a3b7b8f64b110bdb745def3482bc9b5d454016d22e4a6f1472ac3d8bd","impliedFormat":1},{"version":"56cb2865df38267066d57672e8b9f1b3d46e73841bafabe795c7a0c2ccea6c2b","signature":"7f9ac0d93e98afcd734aec4c87598cec1c364dc31a96a2700991452f6a20bd2c"},{"version":"9a8501e1a948987738ce02ee0bfb61c4f75687257398548c397ce1b4ffb065a2","signature":"ded47a1e8e116e7a12b7b5bfa820f830d1f47220c13459aa31d57479b812fd04"},{"version":"41ebb09d2a3a99344082dc5c43973d1b6dd21e4cabcc9badfc93e7936efe00b2","signature":"1a29a48d2cd025a2cbc0f1a10325507bc3578a8d18d4718a6f355a605bcbf2c3"},{"version":"120795a3fd16573d27ce2ab1731376f0f1abec3e572538fe7497c7f0c7e52095","signature":"763d3332ac9a3983fe6125caa5f65a76aec0da6beb0e9677e274cdd346aa3d8e"},{"version":"98b81d1de3308c48574dbb948c119980f0adfbacef954404d201ee05160c3f2c","signature":"14f6ee4c9ada89cf6d8d3e0fabde486a4cbcb5b0328cdaf50ff07b98785e0528"},{"version":"bc620fe1f31026c4ca641e0e32140a4f9e4f0d42a18ac9a02d75262093858bb3","impliedFormat":1},{"version":"dc10d3a79fb838c08217fa274e28c3fa1ceac6a9cac8c8a1734fc4cc5db7d144","signature":"c68b426e3c43f38bfca1073a03b43e61797b2343202a16c5e7afee64d2bd5589"},{"version":"00d957f4c3241d8833e2fc2d957cad267a624c5289a33d05872e962f8196b5e1","signature":"89945c972758f154e1fabc6c6985a35b1d5e8c0a4e2da9294844537697adcc68"},{"version":"1ddd1ca692a6c656ade0a85c9a722b3679b3d0bf113b699908e0325cf3537dbe","impliedFormat":1},{"version":"e2bf27dbed14335aaeccc1d6740e6be997af9a0fa3eec82db409d2b63d73a517","impliedFormat":1},{"version":"6a1197b37f8f406bfb74528ca1fb90659c6d1a251d472b1c65affb5c6a6ba5f8","impliedFormat":1},{"version":"98f506ef1d9a5709fdd74c39e79d10922bde44e4ae6ff8827bf8a31f63833d18","impliedFormat":1},{"version":"ffc3212863d8ff2caa53d212bdfeee8d19e5528dd3a25337a211692ff6c5e7f5","impliedFormat":1},{"version":"05bb4c3441e49099eea24f828288b34cbccd18d8869039fd5c44832bfefa7408","impliedFormat":1},{"version":"c0b474f26cc3ff83a7bc92abc4f72ca78cbb22631a9cd5ce28f9ae68802f47b5","impliedFormat":1},{"version":"f68ad124636abfe69a69d6c87238656dbbf45d4fa0b483caa663cbe7211a67ca","impliedFormat":1},{"version":"7e4fc20c25807c9ef912f4c6d805ceae5399c5d962d445db2e3a4cff24a35793","impliedFormat":1},{"version":"7ddadda20f6682a87876634b7669d8e5c0e5c2341a1a1f94038f833c7b38ffcd","impliedFormat":1},{"version":"512ef5675be30738a2beeb4e151d03745c7b5207407a31806a81794a32732d53","impliedFormat":1},{"version":"831cea0366cc9085e7ded3a2d039a57d9fdda3670711f998a87d14d7b2fb45e1","impliedFormat":1},{"version":"39b470f069f0010b080280d2690679f04f962efd65ed3b452a1a67c834c51c0d","impliedFormat":1},{"version":"fcb72d914c18ed327015246699a7b6577b5ab347a3e12c024f9ee57ddd299c9b","signature":"4a1bba96f89d0d376013d69957640bda452bb69aa00f1e0a7494c95bdf4cc247"},{"version":"9429c7b7db1f088712fbe5bf268549d4425383f4d9495cef7f017ecd51ece9fc","signature":"69b0c6763557b546c8aa24fddcd2a96af0ba8e8a2ed07abc21f984460cb5ff34"},{"version":"e4e82953d9b6a70acfbd714bbac5535b5f52d6dabffcb007941286ab4643709e","signature":"2eac9bd7c51b0a9c7ee20ee8bb8abfdb0279f580e1e7ddb0ed6c1e074ed9d2ce"},{"version":"88b329a0dfeb9c677ed119f36a21b3b8b55612631cec073d02127f9cec5482f2","signature":"ac55334f7903e287ed3ce1956f9a2bab7b6e81ea3443dadca70f3f7f1aa5eaa4"},{"version":"16db6d8934b0ce7adcc1f7b99ab4b1d7ad3eda5e3b73fc5cf6fb07ccedc2779e","signature":"a8f5e5109352476b91dc0dd0d281d7fb0f6185fe38c43164216a03af8c4b15c2"},{"version":"ad392555f7c288356095393bd2396664acf7cf5d5fa8e61cba0b946b9ed02535","signature":"05f806f14f81ea91f3ebeb26643a84ee662cebc4b3593d7570c071228056294e"},{"version":"f78be369332569b1fc6797c1cf654327a961ab1914033817ab681bf9909032cc","signature":"a0f0ccf9fa18aec1442eade8edc175955271f049b077c25a990dc1dcc1389ddc"},{"version":"cbd8f7cbc0832353a1db0c80ffe50f4d623bcf992faac71b4aef9e0aa6f4f33e","impliedFormat":1},{"version":"643b5be3fb728581cdb973f3937606d4925a5270d367a38366e4ddc6b30ba688","impliedFormat":1},{"version":"f7b9aaeace9a3837c47fad74de94ba117751951904a6cb6f6a2340ca3a5052d2","impliedFormat":1},{"version":"b59a8f409202638d6530f1e9746035717925f196f8350ef188535d6b6f07ac30","impliedFormat":1},{"version":"10752162e9a90e7f4e6f92d096706911e209f5e6026bb0fe788b9979bf0c807b","impliedFormat":1},{"version":"91010341cfcb3809686aefe12ceaa794087fcd0c7d4d72fc81d567535c51f7b9","impliedFormat":1},{"version":"a5fa720bdcd335d6f01999c7f4c93fb00447782db3c2fad005cc775b1b37b684","impliedFormat":1},{"version":"e11b02953d2bf012fc8828336030f51c88c1f5b6774b3faef11a24e41fc07e94","impliedFormat":1},{"version":"18282a2d197d5d3b187d6cfe784b0bfeb36dc3caed79d24705c284506c6a7937","impliedFormat":1},{"version":"bc7f372120474ef5e195f4c5627aa9136af9dfc52c3e81f5404641f3eb921b20","impliedFormat":1},{"version":"c897edb7e0074c2cb1a118ad1f144d4095a76e13023c1c9d31499a97f0943c6d","impliedFormat":1},{"version":"5123f400963c1ae260ba78bd27826dd5ada91cc3df088a913fb709906c2f0fed","impliedFormat":1},{"version":"f6c69d4211c1c0dc144101b7d564eec8992315a5b652108ab44e617fdfb64a9f","impliedFormat":1},{"version":"3a0b914cd5a33a695925999bc0e20988f625ff92224224a60356531cc248324b","impliedFormat":1},{"version":"3b9ef4448417e777778007a2abbfb171fbb400c4012560331330c89a8fd08599","impliedFormat":1},{"version":"f7ecd4552cad04f600bd64a8cb309bf0696c6108285e85a57a8a5355467920ee","impliedFormat":1},{"version":"80ae4448e40828f253d49dd0cba14ddaa948c4988d54d6bbd558015c4727f1f7","impliedFormat":1},{"version":"36ccd9bc1c33bf3cce297133d37acfc376d89ea0aff3111cf1792498ae5732d4","impliedFormat":1},{"version":"a5bb15e8903456dedd2a0c6c7f29b520b75a02fc44b36248fbac98e8b3106f2e","impliedFormat":1},{"version":"6d2e4114ccd05fb0cd657cfb73419eeb7e1464446aabfe4e652d4ad460c1fd1a","impliedFormat":1},{"version":"cbd9ef1247380d38adbf15a9d687c3cbb2c91f8b61dfb37be0708a1186877c4e","impliedFormat":1},{"version":"dc9c4504acae3c2b33cf18392edaa470ccb4e5bf1e44759f44fa025214f7984f","impliedFormat":1},{"version":"8827ca3cd0a35d4a2da2b460620586a68dc0681b19f08559bc382f453ae0a915","impliedFormat":1},{"version":"5c56eea87bcede67b8df6a08185aaa023080fe74f21e7d262e5e0c5885ea6747","impliedFormat":1},{"version":"2a6140dea5f4014fbf2c301bcefcac865d9b5354ccc09865b309ec25b170eb24","impliedFormat":1},{"version":"62fbeac38ecc6d7b5ffe8b9c10c60a519963c8bc5a06d7260446a45fe920c01f","impliedFormat":1},{"version":"4e6e07e3b04d0ff8526bdc5f091fc2b42e18e245d2cfacabb81bb58acd670f4a","impliedFormat":1},{"version":"b0b3685d31aaec437a1976c20e2b372e51df0d857fa809d62490f03a0ae8f638","impliedFormat":1},{"version":"6cdb8c1473687522f8ef65e1620bb8d703a02f4c570c662bd99ebf442ec9c3ff","impliedFormat":1},{"version":"799e4c2b1aae2c8531a20544168c528c7994f13bbce20f4813e30cde1ca72cb9","impliedFormat":1},{"version":"c0a7ac0e0b21d67124311e0a70138df950cfa22360ae582c5d7b95a9a31f3436","impliedFormat":1},{"version":"c39a02bcdde4e5cf742febb47995c209f651249aa3f339d8981b47eb157dbc7f","impliedFormat":1},{"version":"3b63f1706adba31dd86669c3745ce127e1d80b83b1376942a5ae3653089b526f","impliedFormat":1},{"version":"d93c86ac706e8a3eb5c4fd2c3965d793c192438b44b21f94a422029d037113cd","impliedFormat":1},{"version":"c775b9469b2cbb895386691568a08c5f07e011d79531c79cb65f89355d324339","impliedFormat":1},{"version":"cfa66f842c639b28c9d54ef1b95730f05d3751dd98aa1edab898e6c75ccaac9a","impliedFormat":1},{"version":"a0564e9ad75067bfcf0dce1cfe4bfbc7dd6b191c985723e45be69c47f43fe268","impliedFormat":1},{"version":"faf27ee80055fc9f216a481466dae366ff96bf2d2e3205e82cc5f19e26532aaa","impliedFormat":1},{"version":"60258fd6c811627dabb45bc71ca506554d1595e8c23b929c69cc4050298e834a","impliedFormat":1},{"version":"fc8503a9751c177608cde9bc81482fcfd85e5eb53bd75e4d5bf2fbdd2ca1dd44","impliedFormat":1},{"version":"b21157929842b9593200c73299fffde810be1b6c2554437e319db0025ecd53ae","impliedFormat":1},{"version":"cb929086d0d062bb948a1726e87c604db6387d885a846838a4da40e006c51deb","impliedFormat":1},{"version":"cb2e0b454aed00d0109fa243d681650916750a960736755edb673d4c2fc495dc","impliedFormat":1},{"version":"2a5c6f30ace32a85b24dec0f03525ed0a40190104be5876bd9107f92cca0166b","impliedFormat":1},{"version":"4d752856defdcbb39e2915429f85a92aac94406eb1bdef2855b908dde5bc013b","impliedFormat":1},{"version":"475ea5c202926ee3ea22429c775087b479a0040e9a9cf710b6838a11b91520a1","impliedFormat":1},{"version":"6cde23545d1e8d78b222c594e0a66de065311e0c6b0e3989feffb5c7f6b66560","impliedFormat":1},{"version":"d7781fc81737645eeef3b7107c6796f95fb4791cb1a908b1f0254117b2536477","impliedFormat":1},{"version":"156d4829532c7d26f824ab7bb26b1eced1bfaf5711d426e95357004c43f40d98","impliedFormat":1},{"version":"2d9a0ac7d80da8b003ac92445f47891c3acdca1517fb0a0ca3006e2d71e1d2ab","impliedFormat":1},{"version":"c500c79e0c7b0aef46656f76d49625c38c7bdbea8f63dc1005a2d2982cc1f4d4","impliedFormat":1},{"version":"8c04e9d03324f465d5fb381371c06799cd06234f2aa83bdf4318cb9728132b80","impliedFormat":1},{"version":"616102e59c37f0f84d209b865f84fb186a29bb0bf112bd975be097113f854b89","impliedFormat":1},{"version":"a14590df3ef464f8a9dff9514df70c7aeff05c999f447e761ec13b8158a6cab0","impliedFormat":1},{"version":"98cbb6e3aa1b6610e7234ff6afa723b9cb52caf19ecb67cf1d96b04aa72b8f88","impliedFormat":1},{"version":"9c8c50b4d0c83256193970e68a1c495b09e92ef1b8e48c38e1e9cb05122014b9","impliedFormat":1},{"version":"f9575d2a80566ba8d17d2260526ffb81907386aa7cb21508888fb2e967911dca","impliedFormat":1},{"version":"d388e40b946609b83a5df1a1d12a0ea77168ee2407f28eac6958d6638a3fbf69","impliedFormat":1},{"version":"83e8adc1946281f15747109c98bd6af5ce3853f3693263419707510b704b70e5","impliedFormat":1},{"version":"613b21ccdf3be6329d56e6caa13b258c842edf8377be7bc9f014ed14cdcfc308","affectsGlobalScope":true,"impliedFormat":1},{"version":"2d1319e6b5d0efd8c5eae07eb864a00102151e8b9afddd2d45db52e9aae002c4","affectsGlobalScope":true,"impliedFormat":1},{"version":"f6114eb1e8f70ec08816bdaa6ec740a0a7a01f25743e36f655f00157be394374","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"4967529644e391115ca5592184d4b63980569adf60ee685f968fd59ab1557188","impliedFormat":1},{"version":"5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","impliedFormat":1},{"version":"24bd580b5743dc56402c440dc7f9a4f5d592ad7a419f25414d37a7bfe11e342b","impliedFormat":1},{"version":"f5331cb9cc00970e4831e7f0de9688e04986bcde808cac10caa3e7005e203907","impliedFormat":1},{"version":"d20bbe9029b614c171212c50c842fa7ddfc61a6bbc697710ac70e4f7f0c77d15","affectsGlobalScope":true,"impliedFormat":1},{"version":"a9d67f9ae6bb38f732c51d1081af6a0ac6cae5e122472cacc2d54db178013699","impliedFormat":1},{"version":"1296a364908ba9c646372edc18ee0e140d9a388956b0e9510eec906b19fa5b36","impliedFormat":1},{"version":"1c863a53fb796e962c4b3e54bc7b77fd04a518444263d307290ff04f619c275e","impliedFormat":1},{"version":"ff98afc32b01e580077faf85b60232b65c40df0c3ecaa765fabc347a639b4225","impliedFormat":1},{"version":"30133f9ceaa46c9a20092c382fed7b8d09393cf1934392149ea8202991edb3ea","affectsGlobalScope":true,"impliedFormat":1},{"version":"30c05e45ec7e1247ba9b87ad2acfae4fda401737f0e8a59f78beda8a4e22b110","impliedFormat":1},{"version":"2da83cc57a94f7aee832f2a71e1a294d857492761c1f5db717ea42c1a22467bc","impliedFormat":1},{"version":"aa5cc73a5f548f5bc1b4279a730c03294dfa6e98bed228d4ed6322a4183b26ad","impliedFormat":1},{"version":"b3f1ac9fe3d18d6cd04ab1e67a5da8c33ceb47f26b47e67896a5b2f8293c8a32","impliedFormat":1},{"version":"ca88e8b07c8186ef3180bf9b6b4456311ae41bf3fe5652c27a2a3feba04136b0","affectsGlobalScope":true,"impliedFormat":1},{"version":"592d937b7df1b74af7fa81656503fc268fee50f0e882178e851b667def34414b","affectsGlobalScope":true,"impliedFormat":1},{"version":"fdfdf2eab2bded61ee321ec88b8e083fe8d9fedad25a16ae040740869bc64e48","impliedFormat":1},{"version":"e8067fc8b0247f8b5ad781bd22f5dd19f6a39961ba60fa6fc13cfe9e624ca92f","impliedFormat":1},{"version":"842ef57ce3043fba0b0fb7eece785140af9d2381e4bed4f2744d3060352f2fd5","impliedFormat":1},{"version":"9095b6f13d9e48704b919d9b4162c48b04236a4ce664dc07549a435d8f4e612e","impliedFormat":1},{"version":"111b4c048fe89d25bb4d2a0646623ff4c456a313ed5bfb647b2262dda69a4ff8","impliedFormat":1},{"version":"f70f62f5f87ff8900090069554f79d9757f8e385322d0e26268463e27c098204","impliedFormat":1},{"version":"0932ed41e23d22fa5359f74805c687314e4b707b3428e52419d0fbefc0d66661","impliedFormat":1},{"version":"af07f4baaca7e5cf70cb8887e7d4f23d6bb0c0dd6ca1329c3d959ea749b7a14d","impliedFormat":1},{"version":"c80402af7b0420f57372ac99885f1ab058121db72418e43d25f440abda7bbe23","impliedFormat":1},{"version":"71aba6ce66e76ccfd3ba92b8b5c6658bad293f1313f012821c4bff1dd64ca278","impliedFormat":1},{"version":"17d944cab17bc9e32975250e8abe8073702f9493582d847805e446641bd7798f","impliedFormat":1},{"version":"c6bfc70bbdee282436ee11e887cceaa5988ac4eec60d5eb9b3711748c811831a","affectsGlobalScope":true,"impliedFormat":1},{"version":"f9ca5159f56c1fe99cdfc5f942585de20695a2a343db8543383b239c050f6aa4","impliedFormat":1},{"version":"84634ac706042ac8ee3a1e141bcdee03621725ab55455dba878a5503c6c7e037","impliedFormat":1},{"version":"d796c62c3c91c22c331b7465be89d009459eb1eb689304c476275f48676eaf9e","impliedFormat":1},{"version":"51cbf03ad34c3e84d1998bd57d1fd8da333d66dd65904625d22dc01b751d99c7","impliedFormat":1},{"version":"c31bbdc27ef936061eaa9d423c5da7c5b439a4ff6b5f1b18f89b30cf119d5a56","impliedFormat":1},{"version":"2a4ae2a8f834858602089792c9e8bab00075f5c4b1708bd49c298a3e6c95a30c","impliedFormat":1},{"version":"71e29ae391229f876d8628987640c3c51c89a1c2fd980d1a72d69aeee4239f80","impliedFormat":1},{"version":"51c74d73649a4d788ed97b38bd55ebac57d85b35cbf4a0357e3382324e10bbe9","impliedFormat":1},{"version":"c8641524781fa803006a144fd3024d5273ab0c531d8a13bbeaa8c81d8241529f","impliedFormat":1},{"version":"73e218d8914afc428a24b7d1de42a2cb37f0be7ac1f5c32c4a66379572700b52","impliedFormat":1},{"version":"56ff5262d76c01b3637ca82f9749d3ec0d70cf57d87964bf3e9ba4204241849e","affectsGlobalScope":true,"impliedFormat":1},{"version":"9e3a18040e5a95f61556e09c932393b49c3b21ce42abe0f4ed74b97173f320db","impliedFormat":1},{"version":"344922fac39b5732179b606e16781b354c160f0e9bd7f5921a0fdc9fe4ede1fb","impliedFormat":1},{"version":"c1449f51f9496bb23f33ee48ff590b815393ef560a9e80493614869fe50915da","impliedFormat":1},{"version":"87a49241df2b37e59f86619091dec2beb9ad8126d7649f0b0edb8fc99eca2499","impliedFormat":1},{"version":"07efd1f649e91967fada88d53ad64b61c1b2853d212f3eaffc946e7e13d03d67","impliedFormat":1},{"version":"6d79a0938f4b89c1c1fee2c3426754929173c8888fdfaab6b6d645269945f7bf","impliedFormat":1},{"version":"2708349d5a11a5c2e5f3a0765259ebe7ee00cdcc8161cb9990cb4910328442a1","affectsGlobalScope":true,"impliedFormat":1},{"version":"c6c0bd221bb1e94768e94218f8298e47633495529d60cae7d8da9374247a1cf5","impliedFormat":1},{"version":"25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","impliedFormat":1},{"version":"c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","impliedFormat":1},{"version":"78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","impliedFormat":1},{"version":"c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","impliedFormat":1},{"version":"1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","impliedFormat":1},{"version":"5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","impliedFormat":1},{"version":"6bdc71028db658243775263e93a7db2fd2abfce3ca569c3cca5aee6ed5eb186d","impliedFormat":1},{"version":"cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","impliedFormat":1},{"version":"385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","impliedFormat":1},{"version":"9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","impliedFormat":1},{"version":"0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","impliedFormat":1},{"version":"11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","impliedFormat":1},{"version":"ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","impliedFormat":1},{"version":"4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","impliedFormat":1},{"version":"c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","impliedFormat":1},{"version":"13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","impliedFormat":1},{"version":"9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","impliedFormat":1},{"version":"4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","impliedFormat":1},{"version":"24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","impliedFormat":1},{"version":"ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","impliedFormat":1},{"version":"24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","impliedFormat":1},{"version":"dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","impliedFormat":1},{"version":"405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","impliedFormat":1},{"version":"0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","impliedFormat":1},{"version":"4d2b0eb911816f66abe4970898f97a2cfc902bcd743cbfa5017fad79f7ef90d8","impliedFormat":1},{"version":"bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","impliedFormat":1},{"version":"89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","impliedFormat":1},{"version":"e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","impliedFormat":1},{"version":"24b8685c62562f5d98615c5a0c1d05f297cf5065f15246edfe99e81ec4c0e011","impliedFormat":1},{"version":"93507c745e8f29090efb99399c3f77bec07db17acd75634249dc92f961573387","impliedFormat":1},{"version":"339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","impliedFormat":1},{"version":"4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","impliedFormat":1},{"version":"2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","impliedFormat":1},{"version":"c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","impliedFormat":1},{"version":"bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107","impliedFormat":1},{"version":"bb2cd9339d0201e7e78ccb6ff2f71aac103934bf35eaaa37e139ac2b68af0db8","affectsGlobalScope":true,"impliedFormat":1},{"version":"76103716ba397bbb61f9fa9c9090dca59f39f9047cb1352b2179c5d8e7f4e8d0","impliedFormat":1},{"version":"53eac70430b30089a3a1959d8306b0f9cfaf0de75224b68ef25243e0b5ad1ca3","affectsGlobalScope":true,"impliedFormat":1},{"version":"4314c7a11517e221f7296b46547dbc4df047115b182f544d072bdccffa57fc72","impliedFormat":1},{"version":"115971d64632ea4742b5b115fb64ed04bcaae2c3c342f13d9ba7e3f9ee39c4e7","impliedFormat":1},{"version":"c2510f124c0293ab80b1777c44d80f812b75612f297b9857406468c0f4dafe29","affectsGlobalScope":true,"impliedFormat":1},{"version":"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","impliedFormat":1},{"version":"46e07db372dd75edc1a26e68f16d1b7ffb34b7ab3db5cdb3e391a3604ad7bb7c","affectsGlobalScope":true,"impliedFormat":1},{"version":"24642567d3729bcc545bacb65ee7c0db423400c7f1ef757cab25d05650064f98","impliedFormat":1},{"version":"e6f5a38687bebe43a4cef426b69d34373ef68be9a6b1538ec0a371e69f309354","impliedFormat":1},{"version":"a6bf63d17324010ca1fbf0389cab83f93389bb0b9a01dc8a346d092f65b3605f","impliedFormat":1},{"version":"e009777bef4b023a999b2e5b9a136ff2cde37dc3f77c744a02840f05b18be8ff","impliedFormat":1},{"version":"1e0d1f8b0adfa0b0330e028c7941b5a98c08b600efe7f14d2d2a00854fb2f393","impliedFormat":1},{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true,"impliedFormat":1},{"version":"42a872b757f365f61369e869f8403ec1e78b5a85418622801011009a1430d87f","affectsGlobalScope":true,"impliedFormat":1},{"version":"c956ba45704d4a97f7a96923a307a6203bc0e7c4c532930d4c8ca261eaaff32a","impliedFormat":1},{"version":"ab0e88d33ccf15d8b3c891038b5a16094b0dd7e860ab0e2ba08da4384afce02b","impliedFormat":1},{"version":"954580f86c8e2a4abd5dcd1bcdf1a4c7e012495f1c39e058dc738bc93024642a","impliedFormat":1},{"version":"fa56be9b96f747e93b895d8dc2aa4fb9f0816743e6e2abb9d60705e88d4743a2","impliedFormat":1},{"version":"8257c55ff6bff6169142a35fce6811b511d857b4ae4f522cdb6ce20fd2116b2c","impliedFormat":1},{"version":"6d386bc0d7f3afa1d401afc3e00ed6b09205a354a9795196caed937494a713e6","impliedFormat":1},{"version":"3a9e5dddbd6ca9507d0c06a557535ba2224a94a2b0f3e146e8215f93b7e5b3a8","affectsGlobalScope":true,"impliedFormat":1},{"version":"94c4187083503a74f4544503b5a30e2bd7af0032dc739b0c9a7ce87f8bddc7b9","impliedFormat":1},{"version":"b1b6ee0d012aeebe11d776a155d8979730440082797695fc8e2a5c326285678f","impliedFormat":1},{"version":"45875bcae57270aeb3ebc73a5e3fb4c7b9d91d6b045f107c1d8513c28ece71c0","impliedFormat":1},{"version":"3c36ab47df4668254ccc170fc42e7d5116fd86a7e408d8dc220e559837cd2bbb","affectsGlobalScope":true,"impliedFormat":1},{"version":"6f6abdaf8764ef01a552a958f45e795b5e79153b87ddad3af5264b86d2681b72","affectsGlobalScope":true,"impliedFormat":1},{"version":"3f16a7e4deafa527ed9995a772bb380eb7d3c2c0fd4ae178c5263ed18394db2c","impliedFormat":1},{"version":"c6b4e0a02545304935ecbf7de7a8e056a31bb50939b5b321c9d50a405b5a0bba","impliedFormat":1},{"version":"c86b9afa9b39b12db8e877d23b48888d80f26e1fe72a95f58552746a6e1fa4fe","impliedFormat":1},{"version":"e432b0e3761ca9ba734bdd41e19a75fec1454ca8e9769bfdf8b31011854cf06a","impliedFormat":1},{"version":"e1120271ebbc9952fdc7b2dd3e145560e52e06956345e6fdf91d70ca4886464f","impliedFormat":1},{"version":"15c5e91b5f08be34a78e3d976179bf5b7a9cc28dc0ef1ffebffeb3c7812a2dca","impliedFormat":1},{"version":"a8f06c2382a30b7cb89ad2dfc48fc3b2b490f3dafcd839dadc008e4e5d57031d","impliedFormat":1},{"version":"07b9d3b7204d931acc29269c98ac3aac87ebcba6e05141552d42a4c17f895aa4","impliedFormat":1},{"version":"269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","impliedFormat":1},{"version":"93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","impliedFormat":1},{"version":"1425f76ac97ce8617d1e2fa79e9a14e0fd1cfdaa155e13d4e92403a468177bc2","affectsGlobalScope":true,"impliedFormat":1},{"version":"2754d8221d77c7b382096651925eb476f1066b3348da4b73fe71ced7801edada","impliedFormat":1},{"version":"cca97c55398b8699fa3a96ef261b01d200ed2a44d2983586ab1a81d7d7b23cd9","affectsGlobalScope":true,"impliedFormat":1},{"version":"bef91efa0baea5d0e0f0f27b574a8bc100ce62a6d7e70220a0d58af6acab5e89","affectsGlobalScope":true,"impliedFormat":1},{"version":"f59493f68eade5200559e5016b5855f7d12e6381eb6cab9ad8a379af367b3b2d","impliedFormat":1},{"version":"125e3472965f529de239d2bc85b54579fed8e0b060d1d04de6576fb910a6ec7f","impliedFormat":1},{"version":"66ba1b2c3e3a3644a1011cd530fb444a96b1b2dfe2f5e837a002d41a1a799e60","impliedFormat":1},{"version":"7e514f5b852fdbc166b539fdd1f4e9114f29911592a5eb10a94bb3a13ccac3c4","impliedFormat":1},{"version":"18f5c7c4ad71748cffdd42e829398acdfd2d150a887e5f07aae4f2acab68e71b","affectsGlobalScope":true,"impliedFormat":1},{"version":"72ed3074450a4a315063278f046637afdeea90aa72b2292a7976958ceafc344a","affectsGlobalScope":true,"impliedFormat":1},{"version":"a5c09990a37469b0311a92ce8feeb8682e83918723aedbd445bd7a0f510eaaa3","impliedFormat":1},{"version":"6b29aea17044029b257e5bd4e3e4f765cd72b8d3c11c753f363ab92cc3f9f947","impliedFormat":1},{"version":"ac5ed35e649cdd8143131964336ab9076937fa91802ec760b3ea63b59175c10a","impliedFormat":1},{"version":"d008cf1330c86b37a8128265c80795397c287cecff273bc3ce3a4883405f5112","affectsGlobalScope":true,"impliedFormat":1},{"version":"78dc0513cc4f1642906b74dda42146bcbd9df7401717d6e89ea6d72d12ecb539","impliedFormat":1},{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true,"impliedFormat":1},{"version":"f2b6058d3dd78c1b4dafc97083c5d44bdfbf4155194044bd17b8fcca554e766a","impliedFormat":1},{"version":"64fb32566d6ac361bdff2fafb937b67ee96b0f4b0ea835c2164620ec2ad8ea09","impliedFormat":1},{"version":"135c8de69bf2cf6d65e3768b16918fc896f2959a4de6a061bfd9a32b9e8652f4","impliedFormat":1},{"version":"b0b8ac2d71ea2251f4f513c7d644db07a46446a6e4bccbcc23ccbefbe9ac3ac4","impliedFormat":1},{"version":"c7cae4f5befd90da675906c456cc35244edad7cdcedb51fb8f94d576f2b52e5e","impliedFormat":1},{"version":"757767485a9b48e58684d16a3a22471b061d2cc10919a60abeec94e643bb0027","impliedFormat":1},{"version":"66ef9bd718776792705d01be029559b4f13c7978727dc364318fde5645d26abc","impliedFormat":1},{"version":"c4e720b6dd8053526bedd57807a9914e45bb2ffbda801145a086b93cf1cda6d5","impliedFormat":1},{"version":"1dc465a4431aaa00bb80452b26aa7e7ec33aca666e4256c271bdf04f18fef54d","impliedFormat":1},{"version":"ea5916d20a81cc0fd49bd783fce0837b690f2d39e456d979bc4b912cb89ceefc","impliedFormat":1},{"version":"dccc0a4cbe7cbabcf629ef783d3226ed28649f1215eb577a2e2cdb1129347a37","impliedFormat":1},{"version":"add54a06a7a910f6ed0195282144d58f24e375b7d16bd4a5c5b9d91bb4b5e184","impliedFormat":1},{"version":"dc03aa8332b32c2d7cd0f4f72b4a8cc61bbc2806eb18fa841ec3de56b8e806a6","impliedFormat":1},{"version":"dd56e1c623e5b14260b6d817f4f26d6cc63c77f5bf55321306d118617fc20c7d","impliedFormat":1},{"version":"d4cb93b91ab77070c8baebdcc5c951954ee219900795cc7e34aaef6be0081a2b","impliedFormat":1},{"version":"93ff68f1f2b1be14e488d472820e2cbc3c1744e4b55aea9a12288f612e8cf56f","impliedFormat":1},{"version":"7e4d2c8b02fc2529a60bd495322092644b5cf2f391b10bea4bcae8efea227c32","impliedFormat":1},{"version":"219b5d42961185874397f62f12d64e74e0825d260054984e0248010de538015e","impliedFormat":1},{"version":"27b5570022c0f24a093c0718de58a4f2d2b4124df0f7ff9b9786874c84c8af27","impliedFormat":1},{"version":"ad37fb454bd70dd332bb8b5047fbc0cf00ddfc48972d969a8530ab44998b7e70","impliedFormat":1},{"version":"265bdbd67761e88d8be1d91a21ec53bb8915e769a71bdc3f0e1e48fdda0a4c6e","impliedFormat":1},{"version":"817e174de32fb2f0d55d835c184c1248877c639885fcaed66bab759ff8be1b59","impliedFormat":1},{"version":"ea76d1231ea876a2a352eae09d90ae6ef20126052e0adfdc691437d624ebcc47","impliedFormat":1},{"version":"0961671995b68a718e081179cfa23c89410b97031880cf0fea203f702193385a","impliedFormat":1},{"version":"b6592f9a1102da83ba752d678e5e94af9443bf1ab70666f2f756ba1a85b8adfc","impliedFormat":1},{"version":"d1c933acc6c2847d38c7a29c3d154ef5a6b51e2ad728f682e47717524683e563","impliedFormat":1},{"version":"44380b6f061bbb7d7b81b3d9973c9a18b176e456eee4316a56c9e2932df77bfd","impliedFormat":1},{"version":"f6e2eefc6ebbb202d08fb7510178696fd33b4775949b317993e10e35003765f8","impliedFormat":1},{"version":"32d5ec19fbe22a610e11aa721d9947c1249e59a5b8e68f864d954f68795982d1","impliedFormat":1},{"version":"e1fa85a34e9710a03fb4e68a8b318b50cde979325a874a311c0429be2e9a6380","impliedFormat":1},{"version":"998c9ae7ae683f16a68d9204b8dea071377d886ed649f7da777dce408ede67b7","impliedFormat":1},{"version":"e02fe9a276b87b4c10c56cbcee81f8c6437d21a0a68eeb705e23105c3620677e","impliedFormat":1},{"version":"d56bc539844eceaaae11714c214add744ace0227da77c91e62d8c3cd0ee78964","impliedFormat":1},{"version":"9199f6ead2ae205b4a0efe8b427706b7b9856f2fb51587ca25e9161cfee2b163","impliedFormat":1},{"version":"120a62730ef5b8b61b4a82005c421506d0bf4f5a2fbe84b88149c79c894900da","impliedFormat":1},{"version":"3ca2a4b5f57c480c798f8310b3d3c10dc24fa73d5618889a27835eb80f783fa3","impliedFormat":1},{"version":"faf92d569360b567c70c11b08aadd997fb2ca1847687f370eaea8eda19f807f2","impliedFormat":1},{"version":"38e878406954753d87c2b0db8b5146da5abb86c44139526cba2046cc70fbd1d4","impliedFormat":1},{"version":"c500d215a2e0490d77f0f926507adac154bfc5cfcb855ffdbe2c600e67fbf36f","impliedFormat":1},{"version":"6a22003e006988f31654d8bf884208ff753d64bcb980a89e4c5eb933bf446d09","impliedFormat":1},{"version":"11bd81c4066fb0794dd9bbbe7657028d49ffdc7418e2cc120e1a6c32cd10131b","impliedFormat":1},{"version":"7f02dfc714a76c78325cdfbc138b57531103490dc9d88affdb3f4a54fdd879a0","impliedFormat":1},{"version":"75d6eb28fcd65b1275f963425d98c2fa9c64e639cc4334e00477867333edaa91","signature":"7e6ba8b70a4dbb47c11708330127b9aba7c49e6492f838203706ad0261c3e036"},{"version":"23fd3f187c019b16fc5a7ff13c74d602beec28b83033dae7d9054bd4a1d92c64","signature":"711b1e1939108dd9f92a8eea26f0b28824b0fffb7d7ae339d06b8c92feca8057"},{"version":"5fb152fe0210156fd6e04d23167e8f49a065d6940f9d968b21604b3b7bdce7c8","impliedFormat":99},{"version":"183ecddaaf66e342c5ca376f275065531bf2ea7325a2cf12177ab5bdcae809e9","signature":"e47491fb92d2baf66c606293549c4b62899de081ccd0fb1f8aef84ec1a02d63a"},{"version":"fc00f8880386a65fcaa2845d6ed0f19d2140ff34c8e08c4e512b1cb8af2386dc","signature":"1e887ddff48be1a10c7f85baeddaf17594a5df4777e506902cd1c142d486709d"},{"version":"38665ba11f09e5c08d098fb4abc02d4af906ebf462fa9666bfdab2c88c9171a4","signature":"bac9337ff46b2d5ff7c3c4be0aa0f36fe6c00d6625b912b3374785142d0d16e5"},{"version":"78952b5c5e677f15d0479df6f25b2032c5fd64a4a524aceed16139143d5f59ef","signature":"db1b96bd0e22f7f11b7af4ab035f96e3ea5e1f5da2071f8405a4161f1793a952"},{"version":"19fa6831733aa59a3005d17352dd2a6099564d0bfce72b7d1c0c5cef751da506","signature":"97eb66a1f1ee48836bb85f2f67b47cfb43658e4c6c88f20f3e598088a8709a2c"},{"version":"55932bb77aed9819967b90ed5970924d29c11d9aeac647b5405a944cbbf5f229","signature":"60da939b497a1468c3590199b2b51b3c6952114487ad806e56ad2b42cd3c1afa"},{"version":"0c97f1e2947571e4cce35ecf4422e44263ce4c39488f1f1146409ef6bb8a2e4b","signature":"2e9db6c4dfd7456f22bc135a06af839aa8d94233fa221fca46e4ea6e79f31964"},{"version":"6f133ec56e5cacc9a56c22686ac18a1b17987526c1490b470c05dcc4b060efee","signature":"479ad04e16886d5a7583f5b1698302351b69050e345ee690d8d901a20d0afdc8"},{"version":"f3d8753d4979a1db982375495bcb7ca4972df6f69902ace299363987783126bc","signature":"e54cb93f841c7d65b42361c1569f734831a787f0b547019a7270235637187471"},{"version":"27dcc33a4332b4db6d5668850cd9045ce7620f16888788eea769c1ad8513a690","impliedFormat":1},{"version":"d95d00c62732719bd76fed57ed4745c2c693b279ae99f684d39accbe29235497","impliedFormat":1},{"version":"9e135f79e625e7ac0a9c85125f1aee8ea3f6cef6458444a1c5d022f25cfa3e8d","impliedFormat":1},{"version":"b43aa247d5a35b8ffecf96d5f3c8554db231b5c3265da6d32a9f3c5d35b594d0","impliedFormat":1},{"version":"613c9a86acf1144a9549772a7f6cee63aca9d82ddbb9a0f2ba196815acf74973","impliedFormat":1},{"version":"d2a6c189c97b4c9a293e56f0ffc392ae47b5f4883f4b44195c3092d588514ffd","impliedFormat":1},{"version":"52cdfb2dbc9fdccc510133b38262ed2ab3c1e72c826813f3d537cea148a85ac3","impliedFormat":1},{"version":"4c5a739f05acef3e834edc393b625c6095901e1b88395d7f5c175ea33a96b8aa","signature":"0017a022b7db4e5452053b8abc52642b23573fe44a05a0adf3938050b1831589"},{"version":"e0f615bf4946fcc78e995d81de7ef12b11692c57f6e9029d8420f8c3968770e1","signature":"6f37709fab6a8520bd54f7741de1a822b55d25f56de85948b09e1f90d6e6e3e5"},{"version":"eba5e557b40c9592814ae293b7676a52537de8cb43fdea3ef4d4fcba60e153d1","signature":"5a06efaec24af7a9ae164b659264dcf11476b177555b39a33142b0bf6de1fec7"},{"version":"ec1cef90e4a9349f06d41a680ca6fc2bcf4c9cd214cc18f70e7b8f5c80077807","signature":"53f26413327f54a8ec46824d3b45afaff8cd3801b21dd6b712cae4e358805695"},{"version":"affc1347e34ed79cdb22239fd701b7fafef816b7016e1dae1cbf38a2a3716222","signature":"bcf5aa23c85167c00ed3c7a6b28860dcd251475ac65c3991ec2f9fabaacb5bfb"},{"version":"242ab6a5f325913d47525543ab14733216a78585c76830cdb581467cabd09244","signature":"14fb669ab8fd38a1c622282593303425b8089f2e476db4ebc53c83d43a21b02b"},{"version":"932cade1c5802123b5831f332ad8a6297f0f7d14d0ee04f5a774408f393e2200","impliedFormat":1},{"version":"47126080457cba37c333615b3bb6291f393d1d23aae63977ec8c77ef97c3b831","signature":"fe1686bf874144db20d0ce276c069cc7289347521bcf938b7d2eefd2e8bbb7bb"},{"version":"5e5bd6654fc0e814c6865a2574672385fdc665b145e3d7e8da719624c7cd5f99","signature":"a9aa8bb7d1fc86d1db24757281bc7bdecc3f0b67ad9eca2db3209b441efa2783"},{"version":"a2542511fcea51e134804b29d0733b28a1695535adecac74eebc5b1a733b6060","signature":"db01be00afb0da6e3139409861b06bf60cfceecd10ab64dd7358f3e9ac774d24"},{"version":"70521b6ab0dcba37539e5303104f29b721bfb2940b2776da4cc818c07e1fefc1","affectsGlobalScope":true,"impliedFormat":1},{"version":"030e350db2525514580ed054f712ffb22d273e6bc7eddc1bb7eda1e0ba5d395e","affectsGlobalScope":true,"impliedFormat":1},{"version":"d153a11543fd884b596587ccd97aebbeed950b26933ee000f94009f1ab142848","affectsGlobalScope":true,"impliedFormat":1},{"version":"21d819c173c0cf7cc3ce57c3276e77fd9a8a01d35a06ad87158781515c9a438a","impliedFormat":1},{"version":"613b21ccdf3be6329d56e6caa13b258c842edf8377be7bc9f014ed14cdcfc308","affectsGlobalScope":true,"impliedFormat":1},{"version":"2d1319e6b5d0efd8c5eae07eb864a00102151e8b9afddd2d45db52e9aae002c4","affectsGlobalScope":true,"impliedFormat":1},{"version":"81184fe8e67d78ac4e5374650f0892d547d665d77da2b2f544b5d84729c4a15d","affectsGlobalScope":true,"impliedFormat":1},{"version":"f52e8dacc97d71dcc96af29e49584353f9c54cb916d132e3e768d8b8129c928d","impliedFormat":1},{"version":"7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","impliedFormat":1},{"version":"76103716ba397bbb61f9fa9c9090dca59f39f9047cb1352b2179c5d8e7f4e8d0","impliedFormat":1},{"version":"53eac70430b30089a3a1959d8306b0f9cfaf0de75224b68ef25243e0b5ad1ca3","affectsGlobalScope":true,"impliedFormat":1},{"version":"4314c7a11517e221f7296b46547dbc4df047115b182f544d072bdccffa57fc72","impliedFormat":1},{"version":"115971d64632ea4742b5b115fb64ed04bcaae2c3c342f13d9ba7e3f9ee39c4e7","impliedFormat":1},{"version":"c2510f124c0293ab80b1777c44d80f812b75612f297b9857406468c0f4dafe29","affectsGlobalScope":true,"impliedFormat":1},{"version":"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb","impliedFormat":1},{"version":"a76037255d4e7af8b20d191a4d3ad13236fba352239d3d9d54868a98dbb222f5","affectsGlobalScope":true,"impliedFormat":1},{"version":"24642567d3729bcc545bacb65ee7c0db423400c7f1ef757cab25d05650064f98","impliedFormat":1},{"version":"e6f5a38687bebe43a4cef426b69d34373ef68be9a6b1538ec0a371e69f309354","impliedFormat":1},{"version":"a6bf63d17324010ca1fbf0389cab83f93389bb0b9a01dc8a346d092f65b3605f","impliedFormat":1},{"version":"e009777bef4b023a999b2e5b9a136ff2cde37dc3f77c744a02840f05b18be8ff","impliedFormat":1},{"version":"1e0d1f8b0adfa0b0330e028c7941b5a98c08b600efe7f14d2d2a00854fb2f393","impliedFormat":1},{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true,"impliedFormat":1},{"version":"875928df2f3e9a3aed4019539a15d04ff6140a06df6cd1b2feb836d22a81eaca","affectsGlobalScope":true,"impliedFormat":1},{"version":"20b97c3368b1a63d2156deea35d03b125bb07908906eb35e0438042a3bbb3e71","impliedFormat":1},{"version":"f65eecc63138013d13fefea9092e83c3043cb52a5e351d22ea194e81021c1cd5","impliedFormat":1},{"version":"4617299caf33afef24b5e074e6d20ce8f510dd212cebd75884ef27c64457a77b","impliedFormat":1},{"version":"fa56be9b96f747e93b895d8dc2aa4fb9f0816743e6e2abb9d60705e88d4743a2","impliedFormat":1},{"version":"8257c55ff6bff6169142a35fce6811b511d857b4ae4f522cdb6ce20fd2116b2c","impliedFormat":1},{"version":"6d386bc0d7f3afa1d401afc3e00ed6b09205a354a9795196caed937494a713e6","impliedFormat":1},{"version":"5990bd8b9bc91f6e90269685ff5a154eeda52c18238f89f0101fb4d08cd80476","affectsGlobalScope":true,"impliedFormat":1},{"version":"94c4187083503a74f4544503b5a30e2bd7af0032dc739b0c9a7ce87f8bddc7b9","impliedFormat":1},{"version":"b1b6ee0d012aeebe11d776a155d8979730440082797695fc8e2a5c326285678f","impliedFormat":1},{"version":"45875bcae57270aeb3ebc73a5e3fb4c7b9d91d6b045f107c1d8513c28ece71c0","impliedFormat":1},{"version":"3eb62baae4df08c9173e6903d3ca45942ccec8c3659b0565684a75f3292cffbb","affectsGlobalScope":true,"impliedFormat":1},{"version":"6f6abdaf8764ef01a552a958f45e795b5e79153b87ddad3af5264b86d2681b72","affectsGlobalScope":true,"impliedFormat":1},{"version":"3f16a7e4deafa527ed9995a772bb380eb7d3c2c0fd4ae178c5263ed18394db2c","impliedFormat":1},{"version":"c6b4e0a02545304935ecbf7de7a8e056a31bb50939b5b321c9d50a405b5a0bba","impliedFormat":1},{"version":"fab29e6d649aa074a6b91e3bdf2bff484934a46067f6ee97a30fcd9762ae2213","impliedFormat":1},{"version":"8145e07aad6da5f23f2fcd8c8e4c5c13fb26ee986a79d03b0829b8fce152d8b2","impliedFormat":1},{"version":"e1120271ebbc9952fdc7b2dd3e145560e52e06956345e6fdf91d70ca4886464f","impliedFormat":1},{"version":"15c5e91b5f08be34a78e3d976179bf5b7a9cc28dc0ef1ffebffeb3c7812a2dca","impliedFormat":1},{"version":"a8f06c2382a30b7cb89ad2dfc48fc3b2b490f3dafcd839dadc008e4e5d57031d","impliedFormat":1},{"version":"553870e516f8c772b89f3820576152ebc70181d7994d96917bb943e37da7f8a7","impliedFormat":1},{"version":"37ba7b45141a45ce6e80e66f2a96c8a5ab1bcef0fc2d0f56bb58df96ec67e972","impliedFormat":1},{"version":"93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633","impliedFormat":1},{"version":"745c4240220559bd340c8aeb6e3c5270a709d3565e934dc22a69c304703956bc","affectsGlobalScope":true,"impliedFormat":1},{"version":"2754d8221d77c7b382096651925eb476f1066b3348da4b73fe71ced7801edada","impliedFormat":1},{"version":"918d3b03a75858dcd5dbb275f19448b6b9a222aa8fc8471aca38c28a32ecb40f","affectsGlobalScope":true,"impliedFormat":1},{"version":"bef91efa0baea5d0e0f0f27b574a8bc100ce62a6d7e70220a0d58af6acab5e89","affectsGlobalScope":true,"impliedFormat":1},{"version":"282fd2a1268a25345b830497b4b7bf5037a5e04f6a9c44c840cb605e19fea841","impliedFormat":1},{"version":"5360a27d3ebca11b224d7d3e38e3e2c63f8290cb1fcf6c3610401898f8e68bc3","impliedFormat":1},{"version":"66ba1b2c3e3a3644a1011cd530fb444a96b1b2dfe2f5e837a002d41a1a799e60","impliedFormat":1},{"version":"7e514f5b852fdbc166b539fdd1f4e9114f29911592a5eb10a94bb3a13ccac3c4","impliedFormat":1},{"version":"7d6ff413e198d25639f9f01f16673e7df4e4bd2875a42455afd4ecc02ef156da","affectsGlobalScope":true,"impliedFormat":1},{"version":"6bd91a2a356600dee28eb0438082d0799a18a974a6537c4410a796bab749813c","affectsGlobalScope":true,"impliedFormat":1},{"version":"a5c09990a37469b0311a92ce8feeb8682e83918723aedbd445bd7a0f510eaaa3","impliedFormat":1},{"version":"ae25afbbf1ed5df63a177d67b9048bf7481067f1b8dc9c39212e59db94fc9fc6","impliedFormat":1},{"version":"ac5ed35e649cdd8143131964336ab9076937fa91802ec760b3ea63b59175c10a","impliedFormat":1},{"version":"89332fc3cc945c8df2bc0aead55230430a0dabd3277c39a43315e00330de97a6","affectsGlobalScope":true,"impliedFormat":1},{"version":"78dc0513cc4f1642906b74dda42146bcbd9df7401717d6e89ea6d72d12ecb539","impliedFormat":1},{"version":"171fd8807643c46a9d17e843959abdf10480d57d60d38d061fb44a4c8d4a8cc4","impliedFormat":1},{"version":"77c5c7f8578d139c74102a29384f5f4f0792a12d819ddcdcaf8307185ff2d45d","impliedFormat":1},{"version":"6e39e59a2b013f84723a0e34dfd66a893a8263e5e151cff1ef3d71fb6f8a5d46","signature":"5998fcae2b6cc176b739bd9946fbfbd73f7688d2bc77f5e3a247b9a487e935ae"},{"version":"9b51da6541ac3b00b1a7ee62d21155170541b61a9256618646b99ac2ec309034","signature":"fb4f4183272ac65bdb85924882a12eeb912b643d6fbfd3118bf9329ceca248ce"},{"version":"f195108f52f2701abf57d866bff876dd90379089004c2bc89412b3c757771862","signature":"5fb62cdc6fa44daebb95ac7a7bf7fdacbcea4cb93a83dee6aace377c8fd5ce0b"},{"version":"ab1d3d909876be1395fd6481117ae778cf9ce139e466b6f0080c901b660d5db4","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"939a9df38fb92598a8e8ca0bc3422aee591424140e526188866dd8fd3bd11df3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"138453cf86fbc70b72b362225a9d2ffb0b2a9b4da3c770323af4eb129fe72270","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"6fb859883986a38afa2bf4384963ce828c8f7f7027b51ece905ac05521438e36","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"2b9ff7a6852e5bb89cfb160f4da441ee8ca5ef5f6038485130ab39b4a33a7e0c","signature":"373ae509b473fb4df76f9254a4e630d7bca7c50e4af327209fb5053c8a10f92a"},{"version":"f5f6aa153e45944fe1bfc0789a323caa544362cfc328a34b9a9eee97cad8a7a7","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"9d9282c239fdd81fb113558ae9692ccabf477e90f147d78b0b905e4cef9ad2a7","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"1959724ffd4efbc89eb6aa72e997bf351dc840e217653ad29bffcf1195edd9af","signature":"06788f123329fd259c86a2959223c0c8dfdbbd3abde87a20ea448e17dc3b2bff"},{"version":"35bcff60addc429ff9c2458393db313f06b83699c7cd2dd92cee9022a5832723","signature":"fcfa393ae1d7f5702474fd674cefdfd6eff82ef96ceb3e724a557c18abe7c214"},{"version":"49d14a13360dd38d4abaed314eeb34751dd5a0d5be9adebb11f901e71ca7fae9","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0149a4f2f772aa5b1e803760d930c7303ae1a8334844c37cb6de1048f55b3445","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"6f28af411a4e59a35ab3a5723a75d195c9c22ed158ec3c56d3ad6efcca6204c5","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"c01f753576238fef2e1a160105cfbafef989012b436d9b7ff0bf4d164ea3bf7a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"48a429983a364bcd4d459cad7f030f746d36b69798300b564548d84b64aefabe","signature":"bdb99b221e11cf6868494c1f88385715a7168bb3a7d13406ca1931a985c420f2"},"5f158e52e4ceb84a4523f0813f07d0eadc9ed59a42ee2b3c0d5d92304896cff9",{"version":"a2ac44e98301fff354176cca1f4da5327a5bdb47b7efc654cde9d70d4e84d191","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0e1cf275f2536fe67464b8fc4cf29de2e6ac28b9e1dc45e0eb7490adc20911d7","signature":"d41413aadd1e62e7eebe8a939699551e898a102c974f15aa312ca0f56a604b99"},{"version":"adec6c7623f9c96814d174f427f9277f12f02186ffcbfe6f5485941849f2c08e","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"fb839eee99ddc518018732fa7056c71c54b6d606d8b9d8bbfc223f797bbdb899","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"5125ea3e482b216178a1891a8a37a3a3b9287cf3412d3f822d5ebe1b661c81df","signature":"e2abc4071963e8d772ea2ece908443c49ad0e02a659fd3aea7448b9230e87109"},{"version":"257aeed746676b76ebaa44e49ea6ed6b2601d0bfdb068810702719a83ed103a6","signature":"48106442f0d3183e95c8b4b611f0f2ef895348459d3e5823ad94ca5b7bbbf2d5","affectsGlobalScope":true},{"version":"125d740d4326dda104c7dbff44ccbd9a2e43b2e79208958f05d283e42fafffb1","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"3764eeb9317047ca1b9036610c8e0dd2ee76a246c0c06823fae39c26653669b6","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"8a189a13c3b8f3bb060e447799581fc6cce4e4803d3b092a69e2cff6c9914fd6","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"87d034f55374cdfa289297f4eb4019b157f3b4d5ab4c9c49e0aedf2d55f807b5","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"124057c62c2f950a3e17149ff6aaec93e16123d7ceb84246f852cefb10bb5996",{"version":"91d7f355550be1f6ac912d950f8bc691483a4cff465201b35680b45aa7b6f97e","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"a2ac44e98301fff354176cca1f4da5327a5bdb47b7efc654cde9d70d4e84d191","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0a8f5ac9d5ba32f581aa454d3d52d2121d6ade481e54b9af8b2b7ffce11be3eb","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"412294299362c5472cd452488428692135a4a3ef201d71611d3b796db9d57a48","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"d88810d5f1e2729475568ad36615d877cc4f2f8f3c949446ecb65c0d379d43c4","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0e8c0c48f532a3e204f2517043f323a9b27bdecffc24f3ba18c05f205804619c","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"d24b42d158f8f6a334a770a4415463849dd930060778bb97b13b9365156648c3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"be504b5f011c32753a22f6abe29fb21598e3bb8ac0ff65334d6ffc7dc30afeef","signature":"25557f8f17d0854d13a6fef0476c5c9650c02de28273473c15bc2d78e7c21629"},{"version":"6127eb0cd51d85ba1524277c07b4c914daee52a073c3149dc09ca9f52439260d","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"96db1edd71653fb64449efab936270d5bb0c23b208ae4e6400b5a10591dad021",{"version":"50d0dcb9b91d0fe96d89faacb88013364a6479754876441c5a46c0239c68e92f","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"837738fa9f01eeb29b14c908d12ffcb3412d9b20e875b2c0b9d387508be57883","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"f465d468f33379f19c5cdb9eedad8ee9af1b42f8d257a9831a2dcffd05701a1e","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"1ad14c2452d603f0d8fdc7defea7a65ac34580cb923a331ff6045eb4c32f2f3a","signature":"6ab57aa347e65f48cf7a7798491ecdd2966c93c6790052c643bc19fb78c2fa8b"},{"version":"ca672a286116f2bc918b8a14b9604c42104e685cd2239a946aac295e2153162b","signature":"ca11d22c0393ae1dcab940775b2549e4c3cd1a8133fd91a132d4aa1c66678986"},{"version":"3fd5bab4949f17354b6a4a1a694f4dec5eae6b06a9f7fdab93da9bb547e32a87","signature":"d4d66bb72dd34443f8801a484f75ab65eaa0917ba5482107ff6ffb85043746d8"},{"version":"1885bd12c3c67f9a128b2be66317be5d10824d9e533f1d3884a2e61152ffb8f8","signature":"3c6c4bebec826f443faf316980cc61cf3249c1814f4947619e655a5b69b6d181"},{"version":"bf45a55aa04c423618ffa8795741c2fad03e5c6016b019da6136d138ac46d14a","signature":"cbc7c17261e9f661fbf8aec8db6a693d9404a72537b0a93ad8dfc24e669cdc7a"},{"version":"f27bdded727b4994111c0d3d47b5c862898806c03d50a42d8958772ea6673bea","signature":"79b5a8578d373475c9364f02880681f816b33d950bf681daa9bdaf58d0e105e8"},{"version":"f6f0ec6ce29c841b4d001296cac6352468516c658cb1be27ada9d17fa8729408","signature":"b7c438190ffe732090e457a493e7404b13baa6cf6f03bdfaaa35f6c6a351d803"},{"version":"12460073f00bca9f170e8d4d711c8eaa0eebb2ee41f3d2d9d6f8f5ab7dfd254a","signature":"2ee9bb3c804a2b1cfb2eab718b371b418a989d17cffa8149d091a9440b4f70e4"},{"version":"9418ef39f46e935a754fe0803a3e09d6a135dc88bc3d6dd7362ad8d3187a12ed","signature":"071a25bb93b81af95efeb10e0d3d52aeb855ff055f6553af158461ba75284294"},{"version":"480b21aa21c14e0593f7e02f097ea3de6031d05a56a7f8ebb24c5d939d8ddceb","signature":"cd8af062acac9964809859079f003385de9309d6cc28b7c22f07fd9335ee1c4a"},{"version":"62b14e45c93f853f85c2a420e040de91c7c32661ba81612657956e98d7a7e8b0","signature":"267994dc9d7adfef3ae0228e45da0480a8a48c47ff5692621ca8f5d0d2f8e801"},{"version":"27ba249eb437d8ca059df373b9e792b79922577f512dd46004f8e1c4e28d8734","signature":"4a0e827cffd0a4c3afb4b27a427824d7b44f49eefe2b22a24a758247bbd2fcd7"},{"version":"b76174a123d5ef854380e6a511ab3ebac01aef27c4454af2ef0fc0c1d96142f1","signature":"a28ac66bb8e6e473e55a039cab832f7a172dfaec19d27b289fe2df8fcdf79ee4"},{"version":"d589ff3096cc51d6a10fba4ee15f89f751f88a0714d4e87c30139eaaa67993f5","signature":"477a26f853c1a0995d0b141c1db2d4f9e8974f8b5a4d137789c388faa7be7bb0"},{"version":"119668980d18e6c0bb5079e71d93b17f5413b46cfa6757462e775acb52bf31de","signature":"b435fabe43b39496815087a8e6e37989cc04fb3a5b07ad06ca8aa2ddc4797b23"},{"version":"0b2c045f75c9fbcda3014fd16d3b3536f827b66e46b5497f5553bdc201262ce7","signature":"69c668bcbb8f96eacaa3b378b44f82b9eda02a4fafa108d2443a0009381a9d8e"},{"version":"c24b8ac1a533ca12e29fea19564dbcd5f35257cb5eab7fe733e8e996c3be3d8d","signature":"a10a964484da53ae283cf885820ac11e1ca487b28fb5c3e7bff87aa068a4d074"},{"version":"e9da056fcb57f71728097c071df3be392d4a628be6229561a30cae14a783f08a","signature":"435a8b6bc9d3254c97a522b059376a70dea316c58d7cfea85522eb5977c87def"},{"version":"b8c827ed7cd03cf4731e89d0a1f979fd3edaf30016c5a748fee57873be84a655","signature":"48bdb830dba5e13016eb3ce49f656513377375307b2f81475e39e419fa5a8ad7"},{"version":"96032e2f7e245b6454e43892b4e3961c4543605d4ff4bbc1adb74594d5c01b11","signature":"3ae32f4f01a566f2756aafde76359738b0ce1cc4e1b95a485190175d705b3a12"},{"version":"878374ec6790c0bfb32510efbc520c181045c41d5197c5c4158032058933358e","signature":"9a20f598655b1801aa66c9c52034f37b92a0c072c7a30fbe2d0ba8bc996217ad"},{"version":"b4410293c55169c1bc7fbbffd765f3a9206208f8b4828e247a840b86b7a05da4","signature":"955f7c5b663ddfbac965b07b868defebd53410c26b6600c1a569a13e20b1279f"},{"version":"89c61953daa850482c74b4214387880ad88d7b0f5c16eb352da31834c7be06c2","signature":"23a408585135003f6599bf050d364587812ed30a8578792533153f7ef01aeeac"},{"version":"5a1b9339b6ae21f9d88ac4297f33f5e056d406b6bfb06c0024ea89dc79ff6570","signature":"f1e00801466e676c08fb5eeba19e7da34b08a1d262b74e4676d136e3dd2c0f29"},{"version":"fc7a02ed535d778723dc250ee17120fc70e2dacb20f903f38af763236340ae01","signature":"f84d81f2b6fe2adf3941503031f66b3a0bba768c5c2c1565156e0edb0efc61f1"},{"version":"35b671524d8df22a8d199295b9b52ce73e885fe9cf5507b1e7a59c791f601da5","signature":"4f9fb3991f64629d9fda21496b9b533bc726253017c92dedaa5eee51ab82dd77"},{"version":"57171878d542e1d96fc28f05c695d024ed2887dfec573c5c3239330cdaf2c960","signature":"0dac5650207aa02bd275a55f9ec1d619bbbe54a0421fc84cf772e6fc28353995"},{"version":"f77c3f5ccb83ae6324d51bde7993bbc9eafb19b30db92729fafb647fa775d1fe","signature":"d71e965b65a54c9ab71bc6f42321c4f0e6f071c1e81ba1584e0344d44f38ed75"},{"version":"332f910d9972ce8dcbac2fb3e8649bba2fa6195540f996010adbfbe341bfdf5a","signature":"438dff3f8052348c1aba3e10a4b203a3845e045dc0c2f4775f00d69d3c2a1056"},{"version":"d9c06b525438067008ef08dc1cf2ec6210ccdf747a9db06e8746e8f23fac9d7f","signature":"c2154b59b59d3ee5c7bd0a1a48150a761fd0ff272f24367953f82ad7bea1276a"},{"version":"8bf9e719cc6f9d9b445cf56748a73d8188d09978bce40af9f7f9696250ceee7b","signature":"beed91a93089611cce8cc89eed36e5d418948aa85ee609a69985e81cc6c93976"},{"version":"6b84a68912ce44b5c83bef8745e5b7460cd30fa4dd174133430d542a00f8312b","signature":"288c3d6cce8f680611d813dc9082bb083117b36ef1f78e25c06969c89de8e59a"},{"version":"7d351ed37fc8e53376e0114ac993fb7d10b331cd2412d876e6dc4b7b77d7332d","signature":"50fa2a6804cb48ff494de3b827e4ed6a2fce26329326846f68c5b8eb2ad13496"},{"version":"a053093457e13f4f3baf83275157828bbbecb725fa6376479249c55a4d8b15d0","signature":"b6cd5d053c15462f24b1639a55e9b1697e9133c93ff24a16208477bc1c23d6f2"},{"version":"8151af5d88c78f4fa381aee6e07ad7069cb939a70e52e0bdd34aaff722bdb138","signature":"05fba06a15d20591fc01867a833edf8206d7672cfe0e2f7de4bffdc168e1b998"},{"version":"6f698d2e39b41fbb10cf265c2d5788595ea090137a84e130405f251fdb0fea47","signature":"88f1f24003a4bdcd7f8545efb1f427114fda846f88b703f1ab9de49544602dce"},{"version":"0dc91f00b8579c677c27aa2b446701e48031faccfde05b1c4af146da2852246f","signature":"82cbe3a3254e99d9842683407158be80d03a4e6baa23ad5742bfd07cb8af10bf"},{"version":"99c960bbda8682b2f0bd2c929c89a322d5c5fda884cd4dfd04ffa3ef6a479053","signature":"2e8295a4d735356d8b42f8bc59f8a693ebf2aa8da0dd52c4a3c83a873d98e8dd"},{"version":"42261f20533dc6fbd2237212f6a161dcf44c124959dc1fb9c500af01686cc8d7","signature":"95b5443b1a86b3f9b85f3e4ba01041d9fba7f5950b145cfaf50d81da53efab60"},{"version":"3c4d386282574b6e45b625b525508c328286b67f9b2785fbe0debad6bb511d2d","signature":"0d76aa8746adbe2c84ad759613f2ab667cb974ec0977fb9cc257871108196a10"},{"version":"3f864e8f1db193e3e90780dd26ea3573ae4141334642f186e5361155a59cb7e1","signature":"17a24a80e7db2e0b1595fc78c79063cb4c7bb7bc9960f2da0f43c8295db5f059"},{"version":"71b6305b19642f92a43d0ddd98b3ceadcf081590aa3c3fc5bc3f3e157088a29c","signature":"da3b3fecc3a2f822ef1a17bf99817c2cfed3d9b638899df02a36b57515270864"},{"version":"3bf959fa43463e183adde6aa124804d0d6ca78166ac35eb676b5436bd6234264","signature":"0400fccd9d6d5b4781ac2377c5c4c6fd3b6adc3bb4b9a5bb8e5cfbb2367575df"},{"version":"6b31659ed38b65c66d408c6cfed77fdb960f47f5e8dbc8eb7fd356d0cbabd8a9","signature":"6297f8a0e282131c0e50787d9b10621db766686c6802b704e7dbe254cd5d68a5"},{"version":"d45a05461d95ade561c4b36945987fc85eec2fa7cd4b1edffe52dc0ab38d1ac2","signature":"c67fbc84a10636c25eb69b3e869a23126519449ad8f13ded5f05321856a61ab8"},{"version":"3d0e609f1577b32017519c018b89c9ec2c5007296d3b9042a5c42c505ccbdbdf","signature":"62efbf5dec18f9acd496da0fc1fde3bf58c90422d4f6816fd4887b915a641660"},{"version":"8c1caf66fafc87601d880ae8136763a752883beaec22b869a7c609a5ef2de4bc","signature":"47b7bb3fdbc594ff53c3c3b20f9dcf6c78ddbb08472e804f77eb78505a70aa7d"},{"version":"e024cbad2f0950b5657cbd53a6850fb124f81878b38ed05680a9c121b9b2530d","signature":"2f72058e892f88c496a81bb2bef8e8d6e0c6820555da9c1f85a728f3455fa68e"},{"version":"e2a16cfa8eef0c734b28f7029eea9a94b4bbcfd78075250304bffd1bc4cd9c7e","signature":"2cfc7ef52997251b105e9642d8114dbf8df47508ff3f32e77118df03b748df56"},{"version":"325e278979ecd4aed34cd9a023513f253b5524122edbb965066d8fec0077faec","signature":"d7d4fe39e42fe3c612652f537e028762ab8517124a923f14bf7b45c0b8aa97ff"},{"version":"7fda94ae3d5111f36ffae7b385aab6ef78bc535b6bc01c1bd42ec0a5291daf4e","signature":"af580bb23d86976417dd5487e2a221afcf8289c7dfdf7611dbf8e9dd6af3e378"},{"version":"756be994fac3f5b6acf4c3eedc4057a8cdc8294fca10f35b084c802a5bfe5856","signature":"688a30238cb0714ed1c7c0179e3c2c16901d6bd5b198d59087674c8b1da3e6a2"},{"version":"401e74401d09de0761f747624a20a9fdea43b8986cf5cddf851525c6e9b278d0","signature":"a32593dd34b5e090ba494a1a5d26cb781deddf1709ce72a0e475f88d18e5d70c"},{"version":"bea1b696baec7b5c7d4a85914c8ffc5fedc115da3a94e521032ab4ac1eeab22d","signature":"8a4aaba1dbc13c1155e37e401d7d0bc81b42e1d238f838c35fecbf1a1336980e"},{"version":"1bf85b38921d4b57e8ae25b2471beeb09d335e8aea1e7f30d266c2485decde74","signature":"22d43b5fad1b84c7e86dd6079201a7bcd9a294d1a427835cb632189230e62152"},{"version":"a5bd2e4eb050bd94c0ac0e7cb3a2938ec7fac47b2fbeccfacc3a8bb790d1fd74","signature":"18f211fa8c1b0818620c7e4aa1d295e63eb6547bb416471a641d907a91ad465d"},{"version":"4de0d221f1670b2d6be4737f881c3e080145d7e25caf0586a7ae7754e4efb0c8","signature":"f45e48d90261c9f8ba16a0e37a99b0ea892b98ec088f86bb58f51848e6def636"},{"version":"55f0b8360a34a6b95f0edf2b1d3ddf3174787be24ec6cd00b47dcea9e4fa2e37","signature":"2eca0a1cc0252ce44878a59fa368d663aa59b618e191da23eb7b4a48095e3d1f"},{"version":"9f74c8af7f6c2c419f2d2c77a716368303a85f33ff772576f12cc7c985ab7692","signature":"088dc2dc9b0622234b90896785d89ef9f32572e5ca1f0f7827a6c15557dc1530"},{"version":"c4d195d7b0e65cbeee3ba3bdb902256264bac0a174530a391060ab67bba260ae","signature":"f43736c93453bf47274cd32e9967a7b7ee719da5a540667f1e1ad727d09a18a4"},{"version":"fe66614c31879d029809c28afdc908eef66aa452ffacaffbfb96716f2ae3af19","signature":"e0e130b3f807c10da0a85bc398bbdce809cfcfbd54aca16f27ea887d4ffc311e"},{"version":"fe45d3bf69e47c71b5847130316ebe8a06477066e3fb2b35315c2abb7f5cf5b4","signature":"938df8e9654bae954ae51b1d06e88663696969940ffb2949fff8f90bc50eb87e"},{"version":"c78072e1420d3781d979fd5bc216c468223a9029a077eaa187b285c722490e9c","signature":"fc70687dc74dde49a2387829b96bc00c7bd714c8f0274592646dc5b5a254c663"},{"version":"b8bd0688308a5610fb4ca2bdeb7d472c07ec77f88dfb954521e9bbef98312035","signature":"e61422f6d999b0c971f22a668c006c5187371aaa674e84d74be5d0d216893bc5"},{"version":"69531135d0fec8dc5ea9dddc1884cdc290aff39d379daff582c05ec42e5769ba","signature":"b85c5340fe068bb79d8d4028f68cb0f14ab871596a36a986fecd67cd53ccea40"},{"version":"0b2ff40db34509c9af556faa361b683b8ee63b74ece20f057a759587335aeaad","signature":"7eb2a2e2c6698baf08c49ca478814464d9a402c55f5334d29daed8df4ea15f33"},{"version":"d46421e0f1606641694dbeac395c66f667f6c02778bee75d8c0b5ab39e16d54f","signature":"e0e8a0b278d87697034775fcffd01861a2da095537cb6932981cb34b3b182d14"},{"version":"23bff6bf892021bba9e6f7b603e257412ec075f6deb812320b61074a7d41e4a5","signature":"9a9fcbc6dfeff0da96671057c6aa6101bb423c25c0842180626606164274317c"},{"version":"bc9e7bf7dd175c99e8f07467d8f354ea3529af00f2c046822f6cb99c5f8bdcc1","signature":"6fb0d1c6fd1c1defbbc8502e349eff54478c0ac48a92fc50ffce728676b9aca3"},{"version":"55ef3b229647add299b934f2ddfc7a520d0ff13d2e43089fe138f198464dfaa6","signature":"25febc8d2a838f02aa93accddc66c8c1e4f2b6b91814ac149b4d159c62f9d41d"},{"version":"034bb85dc3da154f2a09f1031be6202b3a80191314bb535e30f555fa1ba6264b","signature":"a0cbb94aec9bcf18bc13e1755473df694cd798b92c9356aa7cb4d17250cfafc2"},{"version":"10dba33ec59ac95bbf8398c37247441abde9e084cb88000a339bcd912339a2ab","signature":"9bf081fb53c24c82a62a2fc73c5cdb9016cf7c4b0b972aae5872553c74b08573"},{"version":"67aa000f6ac58740db6a5466990212f6b327fa30dcb578226725139e6ecbc9cc","signature":"77288a2151b498294419ad24b510de6b9bf88c6a721227e0060202feb91aff53"},{"version":"be3cf4903c4e20d4293e1e877b1b709e6e1c94715085c379d63ead25101d8ce2","signature":"473c5c81809757162609b167526adf8c26374a07e6d5b1828233796e03e2c077"},{"version":"7cf5f3eb4c0e932ced4280ce4410b228ff9be8428b6d118740c8ce503b4756eb","signature":"6fae861c2a88f69d1013e68e0c74ea4db6f80efbd2375c1f395081c9810d9a02"},{"version":"ea150d6b835345067842c4f6901da5df10df94723ad51a2da0a50b0e1da2748b","signature":"80cfa8915f61d41aa7d779e28b289eff6ffc1703bcbe0c367363cba77593c6e6"},{"version":"8686da0668972cbc35b9d93a3fc2e1f8bd29988b98995dd9a2e086965280fd6f","signature":"4d8e5ba309a2d6459e94819187457f55450d40a0f2d5a72d1dda48ca28b01192"},{"version":"d33fc2ac48d0b6a282acf09bd5e7668d98ebe83c6394a4769fcbc1657a4bc298","signature":"b9399f2c8a8e144c438a8f07963062834e48034ca2f074b8f6090dd09c4874ff"},{"version":"91c480fe2e0d0180928c1f3fae44a08840c82b326fd0ccedb53df153e3163049","signature":"2e51c49f6f47fd395319d92e57aab1039be7589cf9850527435ce52198a8a72f"},{"version":"81d2ab7d8c0121f3d09296e35e3b92233809f79a95ab217b30d4741d021089e9","signature":"b7b3df2d51146ea4bba746bf3047cce5d2900ac0adbca6476927aa983a4a51ad"},{"version":"3c545ab2089b1f704b549888fdd4158ad54dc8ac6feae497ceb39a1b21078d32","signature":"966f6c9d78c206c4fc64817346d2686518cbd0cc2857cf2a6d7d4d641fc584db"},{"version":"9f764d13d6adb02f40825a5857c788620b7df53296c6c8db5a780e801f5ad383","signature":"1fbede59228e4c0c7b0dcaf2001ebf7212ef6a84824e4b569f6ca31e02880fd6"},{"version":"dd9ae357cb581122530d132392db61d16a9a478f01068e27dde82064331440e4","signature":"625467a8f91e371b8996b85d50e50cd1b4d89559e1c219c04e736fb09237bf20"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"e7282c0ef641ab255396df5ab6abedd0557417946326689700e80166c8a49055","signature":"8ce8ea4ccfce2e1d9e34b2bf8206885e1b6c601ac04c8822a7aefe1e5e292c5b"},{"version":"872988cdda84be9616aa061f2f33c8e7d4c88337df28d94a16837d4bb5798011","signature":"a2b4cbb7eac159f2ca1a8f29218eeee41be8bc211606f7729ed705ddc43bf38b"},{"version":"6e4a2e9ac606ebbdf5ab0cf30725bd63287da50d4da6aea119c00a548eb8be7a","signature":"cba1ea2bf40f902763a8ede9799d6256723d6a0f65fc54f64a330aed864dbeb1"},{"version":"5e68b06df98a8fafe1cf2d0ef8106ef2c099b19be924e073e0b4da8d938d3bc4","signature":"1a9172d8787c71bc4d665a76d0fddf438e16a42b4d8f01379e499946bba10eb7"},{"version":"32660585d9c558cef0c76595bdb5cac1e650f79e2ecaf7573186e2ca47b6694b","signature":"63411187ca2f952d5a39fa528a4542edfee1ff7655acef1d212318d175372c88"},{"version":"6bf09dbba0a2e02fc0ae693a0b69cd956ab82f77dc090186b25f02c8396fd659","signature":"e39757da9b41bf35842c992421ade8b74d348f1a1e711fdaaf688f2de54bda7f"},{"version":"4991395137e80e33e1f415888057de245bbb77dd01424005d3bf12fd7e932d2e","signature":"016ce90c6d5ec8faa619a077da7edd6bf32d925abfe49a20ab10e9c54922a948"},{"version":"6bbddad024a7c57adc4225c78caca5c140fd7b624fc9d627f553930ea9045eca","signature":"f22ff014c8271a031a006f31d6f366d33a945238510fb53f34a8a49e51818e1c"},{"version":"c7f034c28f125f046b33a3754a01c6a1e94d6aa12d6cf05d3d25c7bb1f325075","signature":"52a0d6bc687d78e0ee16b6f2f83532912ee1d10192de396bff8a96a4959e028d"},{"version":"91cc0c88e54903be4a8ad8cd21f85dfead0726fe7b2c03f31bd37748867c74ca","signature":"8152ea425a8e342f39bad9c06793eef00a08f1a5fb64f6439fd6a9fc91c4cca6"},{"version":"5bcc7d967d5be53dae542e94797bdf14ff6218badb9007e7ee7a1c77d1d57419","signature":"ea02ecb415ac4c5e883e4a0fc5849681d380c2b8bf22231d82a7a384a4370795"},{"version":"91537573171776a338f8da0437bd9ddfad81f9795dcebea44dc570eea12f6d72","signature":"d2279b79231f1eb3291134dd69abb176a00749dc0629f00597f70088a883ddb8"},{"version":"6ccc161412ade13bd187b5789dfd7153f2a773451aa09e5217d852acf9e6534f","signature":"5e37af9bc9f44897dd7843bac05f0bbbced807210a348b7e3fff265add94df97"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"d9c5cb7b8a5f892bc4feef3cb399143297a595bec3e1278009ff82efd9bb796e","signature":"8b7319945141bee5e2a2b6333caaca48357d5d3e1459d2f485815e850e1bc888"},{"version":"ee88714292fddf589ee54b66adac34c874cce0e043c5647d39d93b1dbef4ab25","signature":"088191284f693cb55062aee0ea35ae9dd1e1116f369acb32780c014778ac1e7b"},{"version":"bdc6d4f2eb13cd2b723e3564f187901dabe2f95028c5531f34ef77ab301df93d","signature":"2069ac75e69cb316b3e18be47a47750f27b66e7d86d3c762fab4853fcd5801d2"},{"version":"0b5481233f2df5c514a24823550c380ddc343ed2eff65aa274fe87502d624d55","signature":"68486a8b45e0e850d2765888fe2beff50ded0c41651c7ed3a9cf63ba85d79115"},{"version":"803a925174766f2fb612ff4d060116674ca4a4f2a76865851d9d47969503287d","signature":"2bcb5362dbfe87aa42aa699e896cc279a4ec448c8d209ee29e71b5c5e276d07c"},{"version":"db00df6d161126730c001c74c6f97fb5d8b4fa19c6bdd15ecc61c7deecfc633b","signature":"5ce880b38172ac0a69deb00fa8a1bb8fd016f1dc75a067712756fd21b8e4dd7f"},{"version":"485a7a06b846bdb13bd5c183a4bd912e0bdbe0322150e297c793cb48c87a736a","signature":"952f9cdb13a05549221a722b5d60624f00a0f5236e923556dd3f0018da90b7b9"},{"version":"2efdfc522b969c4a3fbc307f276d33a7bcd3791326cb93eaacaa8d7324abf0ad","signature":"700f2984e23d3940b3583eb2b9e26f941992317fae3e402f7665bcdebaf3b461"},{"version":"fb5289a664e79487f791ff7a2f3470642acb376e57bf1221fcdfb5a6503ac793","signature":"f6187643013b211696dc9f7007cc3fec718e57dc7986b4a344a7681f7a5d0445"},{"version":"f2a8938cce15e46bb6f5fa802f3a4f7158968cf8049c08149cabc4fc35011a1d","signature":"b1903e886caf7c0ef1345f821b21c82a631ed12e432e11806b16c407b70b2772"},{"version":"fdfff159c08f72750cb396a428ac676529418e00c29f79280ad106a3ede5ff37","signature":"6d1fb2df3d7e71b86e33278d58b5853a47fe7354d3dde78a44d14039e3eae932"},{"version":"46993d27c19cafb4063f66be957853c9c99f552e6cc66439854589fe8c6d7ae3","signature":"672ea4b36eb4ad65327a6b220926d1f31a4cd046febd0f74d5d38ae7f7ddd2fa"},{"version":"ceb931ea006b0bf3845b4cb914db548cf1068aadb45f5dda9a739b7fca779142","signature":"a8615ac084f77d865bb77b924b30bace20060a4601316b7a8f070f882ef5d9c7"},{"version":"69625a46dc5569225dcce81005d18b94f790f0b519cf048f8db1c2a6545e4a2b","signature":"dd028920b7b16eb8b40db856f559ca6798cc44b444636ba6ac5c682505bd80df"},{"version":"5dc8485dbe620c0dd057fea822ea94a25870d81c2baad4c4a51a8d8cbad8afbe","signature":"64d767e10c837e4f247918e95afc13bc46b9774b1fe5380cb04e5ab51b7f3d5e"},{"version":"a63e8c0440e9afe645f3fc36fa17dfbf746ec1584b01355c4a06a7a14ea731aa","signature":"954dab67864a4f5e4fa1aa0a8df391db4224eb52e87523f4c0f680dba70bc6a8"},{"version":"ced5fedf8a0c9aa32bf6aa18096e74b43793f91bffa16dea555c8e4b24f8a328","signature":"bf834628e428a98d2942d4f231ac451c78508437762c9bcc40afd92eaa693bb2"},{"version":"343a694e1169cf7be0e3d308f495d6bd9515fada09dd89956fb32de813e53868","signature":"154dfabf1dc50173485ce43c8cfb24fbd15429cd0022628be4fdc62d458f6a1c"},{"version":"32a2041829725000b270d61e6bb42e3d6b2b2b3e0fea135abf627b922f3f2b82","signature":"1e5e72080cb7cdd231c9804c5e0a8fc44a26a40702174351ded01b9933c5fb2b"},{"version":"3a4fc8500dc8a0bc3b69f84d4dfaa68808193ffb3f7dde27af0eae4c5214a6cc","signature":"21f528fd84ec38c16d861bb7897d5612196eac81791ec81771a1470cf406f6eb"},{"version":"1946d437f9d8424ade1249bdd4990c05890cb7c37ab120a508eaf0bfb1da1fe8","signature":"72919b40fe124e08b9b7a58b4bac31eb0cdb18ce989036700159a2b0aee4cb59"},{"version":"857950f55bd83cb7dd969e226af9d51d68e7c8a7cf21a7dfef61ccb0aeadc885","signature":"a19ed3746bf8434821d601b7ec93ae5cec7ed6f0427f8acd4863416db0e6e2b1"},{"version":"a5ce68072ff34862aa0523c9c5e991550ab515169dd72466cf98c0d068a794e0","signature":"df606eec03fad18ff1e245a8063a1cf96124e5a6119fe1408fb6277f4fb930e6"},{"version":"7d55f7145563ed6e7182ca593a43fc931cd42a79e0cc1460155e13feb0563d31","signature":"ab7afd22bddab4dbba27fac110f9cc236e9d004a7d55d7173abf9bbf18e99b66"},{"version":"c8be439fff202cccd147499d19a533df6aea8c6c91e47530d297488ebcd45db6","signature":"6a1bb58a6b59c77a1d57041e61b9ff2d843e4a5f9e658430a27e640ff29be33e"},{"version":"1c95de2e5cc801aa8bf4d4630f7d09b2c8ad9b17762d1d36afe63c3fc315737c","signature":"099d76679c7f37a1f63b07dc3ca169fede53a581ff4a398396bce14316efe3db"},{"version":"c6f8837d1113bc8d06419cfcf743a81ec882c920cecb1dd3c92449769f600e97","signature":"56591c46be6f706aefee2bfcd3c9962b236a506be41f8e26a79e6f937925c950"},{"version":"92163da96a94782040c555f409a93b5cfa70814518245a148701721f0f479ff0","signature":"9f092b863d322b27fc2619298b5a7282d1a019c48db5b707a241a49729a29069"},{"version":"bd55fa7897c7823b683898d06a5594de9a301ea09d932c554f1621f19ef02e70","impliedFormat":1},{"version":"8afd4f91e3a060a886a249f22b23da880ec12d4a20b6404acc5e283ef01bdd46","impliedFormat":1},{"version":"39fda984e6b15c201cdeaafa22b7216d181bb0c5b2d93e4d4ae3dce7767a0802","signature":"55ba47d103afce84efdfff4e5a2cfe6ce421677a7f563a6fd6320f1efee2e7de"},{"version":"8090eb0a3c3b493b398b64906f0ea1de281b7f14c4d03ef73a214630c07aa00c","signature":"bf1df20219085a0e0b0b7f15d842b04b8690338d747a08daaa42023940a19cd4"},{"version":"a5f0dc55f471d17885b3395b69109f6374042f2efd7e94a08ae2d759c9d810d1","signature":"b9ab7e546be7d574b7a3a3b5b4ac9ebf662518d586fdc2f135482b78f155d51d"},{"version":"30e9063b9e9070a0b3382b45a3332bd98ceb141319dd0c187bb693c72e8a7e2b","signature":"39f64f003d42a56f7bd4e7ca10f7a3f27b5d624d06a573006c59fc50e6b3b686"},{"version":"8a5ddd11e8d64af6385751b70cef6747173e4da852d817bc3563adbc6e5a6c7a","signature":"edb094d61e81bc851a8f1f9a5d53d6192651fb81d86ca5d5c9d76430745f01d1"},{"version":"83d986085e3c36f777e4a336bba6ca93f7db6045f09c83c4bbe8c1eba643f326","signature":"b3c2b37bd527b8d9a97e21a6a0ae61f65c5b35517ec735c5ca28061a91783643"},{"version":"333391c16e2fa563c5602d88644054a2b7fd7acb3a1751e7cf70d3f00c0772d9","signature":"5fcca33d295f70db2e1571047e31d16a8101b83424f21144f18ac154ec97bc85"},{"version":"b59a4c4b0153ad4fa1de1f22d6a53a060ad5b941ea02e176c1a89a205a97fda9","signature":"fae40cb03a097ad3e08128ff1f2e6eb3ee4b5b26915fa6353e87a70614a2215f"},{"version":"f5f208ee8eca5fbe5678a9eaa2df0a69be42c231843496613565810e22c124bc","signature":"518fede5f26be046bc2b0e6cdc8a5847446693483a8d43a1630b5029ed7d40ce"},{"version":"a097802cb1f2a4009d5000b831eda9ecc0dcc7bb3a3cd619b2fc95c7d6c1d9a1","signature":"aa6055f75c56a37e6975d048a5a3e381c9bba82281e114e61833835adc91b984"},{"version":"d7ba7c8202a0bbfc5d0c3ae4705d35c73ed074a1eb0fd0791d67ee8031b27f87","signature":"76dd9718e5ce72a3963f4e25f4b4a1d27f92fe9df8fcb0c5e32e57cc1194143e"},{"version":"5f53e84c112c3c7b145f9642f10adfd74ddef71e64bb8ec9f4116efd6572473b","signature":"51fd7ad557489adc22568e4cc3a682e7812e5348ae741e350af9ec4d4536e2f1"},{"version":"37e8f2f1502b24a111d9495968a7335fd3e66c81e1773f225345295c774a3e26","signature":"080c16fbe7b351a4f3cd29c3f6a3a9f6125da34a5d4740df9c86d9a2d47dfc92"},{"version":"f48935b2c78d5e835b1b5f8f62d79d798cc34cdcb6c2d2d927368650cbd7c92a","signature":"cddaef820dae30225bfca03cb427b4d3447ea833d5d5b2acd8ba46c7ea5bbec1"},{"version":"ebc1f19644fd0fc2127ad57a40971833b47bd64ace9426ff953ba6bac06ec2a7","signature":"8ef3f176c9c5d2412381db1bb0ab763fb61728d13a7995b915d416f3bdae4a79"},{"version":"92cbfdc3df8efc5c278380089bfe1420c581882f99ec490cd7a54f1965ab1419","signature":"157a730180845a62704c8bf96512dc9ab2c6f28e9111ac3d8b99395e3c4a3dcb"},{"version":"1bc7b0e17797938f27e3518a5629856c6e9eca646569f05b2d982e06e3499f2c","signature":"f23018f9b922c3c4abf02388d2fb366e493b3fd15f96e812dc52791a6ccd7188"},{"version":"3e552d2cadbfec8bc71548ff94881f5508c2ab16c339bfde80ce60d835d5fb6e","signature":"4c62d848ad8f49ff3c75a827cad28a3396e42ff205cee025211dab7efff6bbda"},{"version":"ee8aba88c576f726bb72e0546fe4facff7e05d8ece17a53c5327777f771e00f1","signature":"9a0bb350488e5cf532a2670cc566f2d34cda85ca370c8c5eeab9ec448c27307e"},{"version":"aa1cec83a2775765628bb4bce6b77448a8ee4254eb80d26abf92230732141a9e","signature":"0c7c0a1facd2a37eaa4bb723c8f68e53bd74d6d79428c4c9c06c11d30c5ec854"},{"version":"8ba68c9a3b7b8f64b110bdb745def3482bc9b5d454016d22e4a6f1472ac3d8bd","impliedFormat":1},{"version":"cfe735f4fd8efb3f9325d00fd7174178f16cc23289c4bd30f38941c52dd1d4cb","signature":"29d6ea960fce41ad441f28110d0f7f8959761e36a4f5cbaa550c373dcd7e1032"},{"version":"950dabaa3e761948d7824725b25b5bce740b868c1e706c0cd6c48398a0f9f9a1","signature":"78a4b12fb159d7870ff05c12949b99245b1dd61aef15b023236d6b3f861a0215"},{"version":"e1c7303bf006b001e4053cd373040723bc038c8bdce3a54ab210ce4fdd494194","signature":"b103cbfd5a53c94bd750c8f33ce2f2f005a7d1fbb0848e7f7b5942044b9bbbd1"},{"version":"c8b7b598d0d1a9ecf6e90e772acef9f67ec8b2a4219ab23098adfca6dd80e41a","signature":"1fedab1ab537e2773ad320d8687df4aad05c66e40b20f3125bf766d0576a4153"},{"version":"52326c5e1aed620b223a404e247b8f873bd69882eae1a27c13298a93d6b65d43","signature":"8fb8993431c8a4b44321565aeb8f97dbe86083f21911c14c1fbb28e8ff436de4"},{"version":"793cf849ba4e2ce2ede219d87ab50d2359e5ac912a16891e6e6241e5d17e9e1b","signature":"c0ef2e7cb62ed62cce41e47b28a02e4cdafb80fdf5bf1cddb53559c4e1739a10"},{"version":"c1c641dd49a1a0547f82a3ae275fffcb4500f8f3b122201089a8536a1d55cac6","signature":"f432775fcfe40d04969df05ebb4fbeff4b873645059b02583dcdd9b5c25f8285"},{"version":"8f8542b51934a1abaff259262c8649532037248bd583959c821cd92ba9da8a1e","signature":"6dc5f7816a172bdbaffd32c454fc5d69f6a1a7f79f75e43c9c74c89e124db819"},{"version":"c324317b615a2ac5726b367c568274c6e25de2d9df42766e1e9d1ab28fd45920","signature":"12f378140dc9381cecc51c10425ed428755b038bdf42efcc09aeaecbab1812dc"},{"version":"9451ac80030de539a68b27b365fd01c6c76ddf04ba1bfa9ce4474c39b0cebe0c","signature":"67f32b93682b95607e3feab91026ebdb5c09bc21aaafb6946d0acc13ee57d592"},{"version":"d034f5e0fa12d55e9fa96cc635a8f6b70eec687ede3e2679212f0d6465a875e9","signature":"9c89935240a3c38f1c1a7d2aef7dd016ca528efd6a8057f1a0b1a1a386ac20de"},{"version":"09bc8267954e1f5b4176951b9c7b4c8fd55415858a8136d7c045e170079b975d","signature":"f3ed71b288429886cf2a518fc3773c915874db3eb0d9c819cd1c7656d962f5b7"},{"version":"7034a5d366350fc6ec0f05460803463f2d20c65e032e7e5a01e8b275ec1fbf6e","signature":"ed4cd111a50505fa0954b132ad255a5a052d9545a4a0d764189ff22b84cd8f0d"},{"version":"9df381ac217b8c650b6b5be3b58cd51dc875b48b6578a4ce28a285b7ef05a72e","signature":"87e58f430d2f68a7ded6efa7dca743822c89f681318f27befcdd41d231b6a8df"},{"version":"d4081fb4f37268329011a59edbc41cd69e570562027dc53eb0387c642efadc81","signature":"869f95db650bfc3ad1b3cef56f6322d89abd3a31ecf0d3b9a6c69c887e1c42ee"},{"version":"4c1f450edf5421686af8ee3f165bf6270de9351d7dc47b048008d7d748886522","signature":"96d8957b4b2a9a1cbaf81ebc6f5caa227b6500f5adb91c5da349cbe7c22c6963"},{"version":"e4857d8f4f95a6c7bb6b17260f193bc814224275ee1826c3583672dc1b76902c","signature":"9ee2cc8377e504666473ac6679741f773930f171e249f668fee0897b36c9e9d4"},{"version":"aaa62f66109938997da0b296ba050adb8f918670c3bc708eedba31e169135264","signature":"1f19241134d0678598b45ef24a9e177d4171f4458092439e31e392899a98542b"},{"version":"c02dcb5dacb735218c464f26609620350c36156874328f7936d5aa9be2ee4fb4","signature":"149c66a77cc0a128f9694d2b23d308ddaa9e284ed59b17a3ac7804b6c89d65ba"},{"version":"69695985de067daa736fdabd86318ea9a37c6139563ae81873b099739d1f0be8","signature":"0d7f79703d6459ccec6d7bcdf5c21a7afa6ab7af6ab219d348b64bc36059b57b"},{"version":"e13d36136a4971d5e36cc2b9f5d214c058e78b95949b13a7397769069962c990","signature":"62aa9987120a5bbcfa763f26806aacf0dbea2f55f2ec2b48408410c859c29f0d"},{"version":"38286e260a8f571760b4fb02d1131bcff93799a5fbfaacab11d5532864240ca3","signature":"163300e63275262d03fc19908c16f991a38780aebaab4cc70c8aab01bce7326e"},{"version":"0f08803f28845dbc7c53c102e36eefe5b10393405bd86d24c99d56b4bd58f4d2","signature":"458ae4babb0e3a495595c840e33f25f32845b489e89acf1e5b63c5d1cd666a8a"},{"version":"5205f24c6a9d110925b19002c45b0de769d5807426ef6943e0012eac3c812e9c","signature":"44d68a5fb40418784affd4001ee5efdab6032ebd9616edd003633fd503ee9220"},{"version":"c46fa3ffd9df1c71ef08d20f708e75bebd0a60edfc668a142cb6407111b2f4cf","signature":"e2f3b8065e35482afe51bdecc7643b44f88574ef0eaa982f0db6bde025200a32"},{"version":"24440df5631e57a47d4c4ef47ec9f25e9ceb6e5038cc2d0f382367bf6964651b","signature":"dc616493d0c45d1fb0243a8095b85e826b3a4ea75ff69474916f591d25bd8c89"},{"version":"060269e3204433c3c5f02178cce5846527a077c332a34184e251c0a07df6b093","signature":"4154a529cd5ff7cae475a29479e00d02dec6c64b0d77ccb76e315a488c87e92c"},{"version":"3eb43cfb49c9bc7d8e40d20bc83043ba0bc5abbf116d187bac403db82ea233f3","signature":"ae00a1352e273a93ab5fec07494f2463e14adafab57f560200dde37c62dbe190"},{"version":"82ce33d45029bdca530f6c81b14a5593771a123c382104428f28f5eedd01917d","signature":"37a309272a0538f13236b08fc15e580b3533bbcc5a72e1fb5a195728da9c2f4c"},{"version":"1a366d4d72dd21576d38a7b9049259fb756dce5c61ff2a7fa96d5a7a3a17a7a7","signature":"e0007cb5eca4bf669cb94999a4544400b0ea423fe2f0bb4875a2ef792df0a881"},{"version":"34d497d645856face5e4a4ea49a3ba019f5cf9ba16616462bfc76a406af9a5c0","signature":"10ba047826ece8191ff515a94ac0305e838e7c584da063a70ced8b471463c196"},{"version":"f5368522d436d67ed5934df7ce4b0363f23dcbaa7d8985052be572a8d055f949","signature":"b04eda43ec31934d193186b535d5509b71714599c38b960e56101731f388d8aa"},{"version":"82f3aea539cf40803246fd1228793a84a5c07f8cf2ad34cc7085d50c25e7dd6c","signature":"4a284f0e9884b234e4f4a3b9894cf9ee6a34beb96e840d634d7e92224facdf8b"},{"version":"1183976a770a5affb43d9e9f1c3b497e336521c068a32ef1f20e86e3431b0bf7","signature":"86236aa7fed837dd1c0277c4c1a9cbe52e25786780a7a5069c93588de010d7bd"},{"version":"fad7127765ffe9d2f5e055bb646ba8a880287fc6a07af5ed686950cf76ef2682","signature":"31cfad4ed31b7ad0d0ae3d63d33bcd41de9d4fbebcc5644f87d8cae876cdf838"},{"version":"46f5112dbe89598db0a1fa20973e1a939ed0f869a1b2512c7621426c4dcb7418","signature":"836211e323eb992839679fdfa3146d02cac661224c3b0d9b5f3603db3bec062c"},{"version":"71eaac924eb3f97d431dc970dc8edb29d2a96d4750ffc00d4a4dc95d8b86b8e3","signature":"2bba6f743a64b4e7ba4014f1fe3ed612303228670bb3bf491d9f3cdf902563bd"},{"version":"69a9200653d6ca76f7fa814c515151dcfda714cddc6d82a46a04317fefed4fd7","signature":"e4f6dea32936079d600a6601eebc5c365f5f4692cace0e69c73eea2b75f117e9"},{"version":"96a12bbacab3c14f5bcfc6249dbf0fcd49f83c3bf1ac7a0954f8a42f93505400","signature":"5dc985f029693265ca870fc32900d82dc3d1905fac4895b4222cbea1dad6d2ba"},{"version":"9eee883f2787af8dc5f810c18c31901c790c1662ce2babe01d570bcbde9999f4","signature":"29665250a4a9e0e5ccc9f81ad66420c7031573a8e9798302628011ac53d20a6f"},{"version":"022a17ad8a720f8a5fed400fc25ac16aa9d36c78e13183c1e02aa0460a272db7","signature":"64160e85ec9f31f6ac7c38f6aa4262e25d1bf87c1624a3fb05bb6f8c324a2c5e"},{"version":"b43fe27469461a1b41ca8d0f829ca9b838e1a5c16e2eaadfb7cc474f89737045","impliedFormat":1},{"version":"805dc2b44f768337d230eb574242137c620134dd78042cb42a7c845822313b79","signature":"647f295b4ac8b1727ea5be2626a61f8abdb9a18ae557b403cdca25cdd9e404be"},{"version":"1cce2ef75908529eaaf2a1f629100c431f3937f2add8ea905410b1788a44f24d","signature":"9dc2bc5c2b5b3cdfb1cd8ec801e608345cc2c785d5aa4160a816c95f1c2d5aab"},{"version":"215b40c5b61108c35ee8283d8952badc94c987379a3c53ff8eb85f2c3e69d32e","signature":"cc25651e333efd746f98358fe557aa8690758f8785075f63a845eae931517fa0"},{"version":"e2cf67608c99610a3f1dc7650f1e9717ffc218adc24433f0dc8a7986d8a881b9","signature":"9678205072d32f3ab6459f6e43c5884293bc4bc6ff1de573d855b0b9a75c9969"},{"version":"bd6cf61f8258c164bdfc6af3d5e1e52a8c748d6dd4815d6d4cbde2f717ef6caf","signature":"6096317b22a7be107733a6334a5b57c6f3c51549b78df53926987cf5fda8b22a"},{"version":"a73a7c5812a614a433cdac31f90a0261c69893d5dd7a036efa5c071be5a41d8e","signature":"427c5809c6ff25c630e056cc2bd9edad21b1e295f80f99403dde264b8d6be723"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"0a922dcf64185b80965be327ff918132b66bd7a26b94061531e4f0ba91bc564f","signature":"a8b9805591e823d6106ffd942ec8a6b6a9b938ae86d2206177b83e8c5fb06ecf"},{"version":"c57eb4194cb07628954e86adbcbe8d12cec7638615d8fc0826d8c781abd31568","signature":"4867a513b01fe881daee369e096a1f0fb266e314851c53407de7a9205b82e766"},{"version":"eb3ab7c2906c5b2a56faec219895bf5f5927ec46e54aa1b2beacfeac07eda962","signature":"85d1c9899c9ca46563b2d67a8ec277d6c82cae876d5fd761991c25fd63a04268"},{"version":"048dee5795e5d9f86ac6a7352e3d2a9f2f24ef1ec84b644c08ec5bdd538ecdb8","signature":"21b4e0462ff7e854c1f5b08d5c2de66c104c7b7abb6e7380ebe4e0b955964f24"},{"version":"7ec605943bd9e2db559e834bab46da5ff614567405e0e26bec1c4c373f4bd893","signature":"2b9469d332292a17c504056819fa34990f42fe331564d32b6b9c49152efeaaaf"},{"version":"509baf71434def0fdc26ad03cd1408b219093907772a7c6dc889b19a0aac9e79","signature":"75daa9d412618752cda98d7490a9da0f6ed54eaddb1a2d9ba1ef700bfddcc8e0"},{"version":"31f10f93e6d8b111281bbe296584922cf637e9f43bf919c6bfd802a8bb3ad5bd","signature":"08862f181a91f00dfa25780cf23f3cffd71422e29edca93d6136c332ca28b1d3"},{"version":"ec96b5fbd90eddc64f7fb1fad2e11f3e9e8b1ac1339d5ac52a75f9f9da4e983f","signature":"4a3b91ec61a98efd839953feceb3ec578499ea744259aab2f11fe3f3af4c111b"},{"version":"4f2ee466b0d60005ecdf1bf4b4cd59b954946617ca05f77abaf51e9ec33f3ee0","signature":"7c791b625bc9e53b132c569ce4fd10f1fcf1eefd6bfe7d34c3aabf3eec4784c5"},{"version":"401527bd1f5d22b1a6ea14a4898624c972cac5a78cf31acdc8f590a4fdbc1f34","signature":"ff46758a6ba392779aff28f98eb9c8c21e969068cac42e0ba100cfb6326cc036"},{"version":"cb3a350949ce95895b56ac3a8b082e1867ee7e8837c8f6c2ce1759acfe5c50c0","signature":"65404ee053d56e7985115b2c7cf39c59f44dc7f7770e20727cb966a56b6f1c15"},{"version":"92d75912180e0e0b1c331ec4c1384043e77c6c1631e9b2b642cccedfb2301d78","signature":"20e9b9f24302f7c978b027a097e6f394b15e1efdea661737b59eefe8a56b942f"},{"version":"541b43e35bcf76d3943ed275ab6be8a82f9c4071caa95410762b7284c3b3ba91","signature":"e0f169b29b90bf532a87e0f5f6bc63d463ec01f0b843163cb3ab51532997c0d7"},{"version":"6cc2f60709128cfa8a76a27f9a3893ee73ce069e8cd5f98469a7caf23f1b354a","signature":"bb777277c8f229422be47683fffc95a4185ad529b3ca6c1ba0daaf252eb0865c"},{"version":"181e66348b8d3b73670abc2c931b5877f24082ab46dca3470dd09d45cd9b2e0a","signature":"47d08dfc6203e3f1e11d62744cee1f74c7e18b9a68858c564fdfd91981694eb3"},{"version":"9c69a8424e064d55d395e2d020a816f9cf24c2dd529a48365775719232f6c521","signature":"e74c9f502376a2216b1c90f49600a2080e11625e6baa1f6f562a63bc9951b51f"},{"version":"bf820400b7daa0ec5328ced9a86c3d1a22f256cadd79334007613e325502a641","signature":"d24f7db5a1165b0de352568858124d9d3d01f54f890f044784521cb0cbf00f5f"},{"version":"a018ef46aaddc0799df43c3365bf8faa8356f3d3c194919b1b7ba1e65cc05800","signature":"08ed273b73944d44c03e175aa09f935164fd832b125a846d222bbd7a6eaec39a"},{"version":"2f8d04a9eb77551e6d9c4da9dda09203340ae7f0ca862ef2c53ca21a0a3448b4","signature":"fd1159ead05e3928b71e646580445eb5b24e6d94e90b7dbde7dd61c2889e77f2"},{"version":"78db257a1db83d6dbb4b86be1177c5e97d6c4809c9e5ebaa7fd8d7b31fdb7412","signature":"853dd4679659778901e859879d4e65601e73215c65c264fcec41552a03aeec9a"},{"version":"e82eb1d5e2ae57c84f4f2109c087a12ba78987bcdae1e471d5717e86bb46d2df","signature":"c964831d98c06781f8543a1a0018f4133b16cc6c2eeb2c6a22d34be43dabf842"},{"version":"01c93c2228e7a13b9a1f04fef77852d5ddb3855e9bd32dc427d336ab699d2fd0","signature":"b94f0f5df6e4533eabd470d8e21021d7bff19b09ac025ca2ae825a1b1613d0fe"},{"version":"40aaecb39617b06b27c56e700d852f41ac95ba0e2654864edf880a41bed5776f","signature":"7b2d8a862e3f1138bc43611dfac614ae11fb78660571d32a2b9c3ff447f4848f"},{"version":"e4911c42f86b2d87e566cba28d9115cb1135934270a162ec4a4242c78a24255c","signature":"be8b787e847af120b014623fa73d26f80872ba13555c96e201517baffc460cf2"},{"version":"565d355757c63b0e4eddb83841a6a73ca261a408af89fce91eb6ecf2431ff28d","signature":"1686250a32de059898928cfbf67222ab805d5c41441a85b46d3090a24d3d8c3e"},{"version":"acc37ae4df7102690cb34542ca8893d854ffa2a9bfbc035a4dbd120dc34f122c","signature":"73f2426fde3ec69626f2b5f3a2905b98eaccbe5bfa52ce381dd6b3db622e1c33"},{"version":"879dd61d96ff7d8dff0f6f61b691daa1407e561e5b29b3e1316b278d96b33501","signature":"94aa954dcd18117252c1b13586f093154d49e8afa3ee3ff82d578fcaef200cf4"},{"version":"ccf3f698190f13e432dab25e13f1a370ede74d8f043e79d179aef86d85a3feb9","signature":"b52a518bc996ff89221eb1ab45d52e812a26d0118906fcfd75a33b08f140d1d4"},{"version":"4417b7d2348d593abfc5b055f93b80d718e20d2bf184ac33b7fed57ef8e7d299","signature":"e6c626e69de1831afb619636837fa84f974cc8e1419c40481cd17dabfceea48a"},{"version":"6299368f39bf98300fbe19d0ded38ef669ca5620dee78e21425c9dc31713bfad","signature":"7106f4f4770db4827a8d5bd710bf0ef92f766fe875712a50191450336bbb9d9d"},{"version":"2a391b0dc29edf821ef5b9049f05b23e21c6f2bd0fd4b73439d4e253a70ae274","signature":"9d1dd498366d17db2f903f3e90dd439497233f6868782e77881f6e3215c1371b"},{"version":"7022ac5b95f3cf38e79cdad86c498d46e0674347452eab07be890d0ba8a091f9","signature":"6ef508584296b962a377a2bcb1b5216169c41d55725625db10ce43ea5fa37f96"},{"version":"80dbebdaacdb60b8d324629c56d814c9978cb5b4e50436b4ff25d0497fd5414e","signature":"902438cfd8784abe3169f6c130b77d815e0444f53f7809ee937a362e4d387ceb"},{"version":"dfe1a5b04a343d778afe943319a6dde3093cb9bf275392b1aeee583639ed11f7","signature":"6a6f1c3bbc0781a7ed4001ceea359716d4d667c240290ef80a36dfed55327555"},{"version":"c324e912f72dd4a3d90fb732a939bef808606e379dc38e9b7dabfc91cd4af505","signature":"df06779d15bd4961f92204542f10103ffefb42bdefcd4abf3eccd035291cfdb2"},{"version":"126b91650557b7a788c58b21930eb2b9d7033b5ff629bf8cdbe8cca95c4d12ae","signature":"c46f92d1d0bca924276c4748bc300b47deb13d8917dff9213fa78d3432238797"},{"version":"9e709be34c0d4390f99f262730864a3faa79535d61e3e1c5b8d164a058a29003","signature":"261455cc2f998ff3d6b71f47cd325f35386da2e5d0a27979e0565fea73ec02cf"},{"version":"4d6a60ef5e4cb76b119b7a53bb665fdf820f59f1672c1d4257cd3aa0eb604972","signature":"b3a3a2c47eab0e128980721ea1c9cc6d2672db6244bb9cab4760a158d986812e"},{"version":"a14d82f436a7ad31c6d92bf69cdc93b9d049b35c7443a700e533c92ccb2c8ae0","signature":"7c822cb12cefc86064e78c0f2df0f643bbd64d6945bfa234c360fae307c1f21e"},{"version":"17d27797d91c58d5dac5a609750c0803ba2a6d1df2aedc780c005ae032948be9","signature":"d197e29963d0e405b182204f87676fbb4065567388772c8618ca633bea3a342e"},{"version":"f8539ccb22735e279ed5c2f5de3ebb84a5c9c235967462ac9caf87bd74530af9","signature":"eaff9882e26d293a79135672c79dab82332297e6495672f6b7c0e6b67f82ec8c"},{"version":"ec3f514a49cdb7174afa8f0374256dd20547518e104a44901219034d4a434a6d","signature":"25d1bb32c700cdb5c8cd803c2eefe7406f994be4ef0e1316328d0502ee8be172"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"8a911e3bc11a7f9e6d7a32e24d4e4142ab33a6797ea9e2899a1547c7f8d64053","signature":"457853b4c2e4d4a5b6763f85ff9a58f73cf1ede2fe17ce57aad6f184621a5bf2"},{"version":"9420c7a9a726eaf666e0f98cebfb366e29bb0ac0d9f5ec1768ace204788492ca","signature":"bcd4b0db7645cbf75a8c1c347dfcb3ec0b2fd3f704e327b61e5b32c8afc0864e"},{"version":"3d76ffc956cefeaed2a089de9a40c984c90d8ea2aaf87a16155bf3343dbac0a7","signature":"cd7808f573f6a78a5ce0527287e1eeadd2189b8925016e864d129396b0edee2f"},{"version":"d3219f0ffd51a0cbf6493ea4c104297b531701c7b7da1fe4a90983ba4d6db5d0","signature":"cd53053f4dd399c427630e667a7d2afb879538d26b435400e35554f1a93eb346"},{"version":"3ff0fbc9c335b6b0c5290a43560702329bc249e76994fbe057e653369b721803","signature":"826b7513b0f3fc71149e327cf93c57ca32d046629765a74a995faf8ee89094a5"},{"version":"8ea0b2986b3d12d42ffb74a245b8f1fd85a96a522a17a4afffc496caafaf853a","signature":"6b5c69a3e58e97020010bbe5b003d498679ac8f06d41adb12f4c65aaf0584fce"},{"version":"950dae49beaafc606b3bd6b7e3bf2d0463d276637283e11af660a26045e80340","signature":"29cc89b6f14f554a53631cba95e9cf21b0859e4ff23c6fbd76712230ba069e46"},{"version":"d8587e79e77a617131b29cc5836293f0f4d8287b7627bd55eff339e5a453bd31","signature":"076cfe074a22fc853860a98409646808457093b6ef6fe77cccd56a010d629785"},{"version":"f89def6412637328c37d90117ea91c5af86663ee6d31a624a3f98ea41a887973","signature":"1c7a6e793b332860bef7b451950e03d030737308b16d505b0406f412916c88f2"},{"version":"f9910d538bb104c6d5aa8d0bac00a146e5c7aec6deb186ac20ae93a67d6ce90e","signature":"42a4c392bf3fc786d8f6a6ab595f809d5836b75f47a31ee70419f2a23f772580"},{"version":"e1d367e2f5da1ef3871ac85213bef0662a1ce2fd8a4029d97b05d1c89275c34c","signature":"91caa3f9a35b2e6eb11bc2a5e7b13610cfc75f806347c36910d83e83e8dee70d"},{"version":"a388a61a81fdd929484e953ac87e748a02f0c3758c4dcd287cf96fdb0936e2c0","signature":"3b2ab65c33f06ea43763018107ec3458c361d14db225b0f4bfebd0ab924306c4"},{"version":"a7e3301a9bd97e8cd2019ebb0ebb7880a0c3f728cbc50ea19fd97b750eaa234d","signature":"614bc57897140f0c410829422e258323a7fb6c5568a9b15b527a2a8c3ccf427e"},{"version":"c27b7ccf1bf8a6dabaa8acdb875d651cf58c5a5022b465436528091b41aa2a8d","signature":"f64edfb99be4fc2f501803c7fb9d0f4fbc2716413384c555f25e60b935ecb23e"},{"version":"ae53216d2ccd6e60c1b19c979d44713d89b90e19f807fdbfffec9f7ebefd9da8","signature":"687164031bb2d6d3aba2eeec3782cea2f9855de076f51b8cadff92647677a350"},{"version":"bf53319a8b28a800d17517b2a38cd74dbf0f8f39e64df37fe7458aad51df3242","signature":"b5573912f2bf516658828c2bcad3ffd91d6df167ccc86cc2aff0d2e5c6a94ab8"},{"version":"28bd1fcddf693a3dd8d75c0e61b0d246f5517a2fe32ef3fc3a0de6e3ae1daafa","signature":"17b263168f8c0a43bc3addb0d5f4b5591843f14331bee3545f56423c3f137f8e"},{"version":"fd1115f1531f13d075cec8d3c3f6ad1446373e7b4c0f8af33119786fd96ca7a2","signature":"de5584e65031e6af8a6b1334bb0b4a4328df22bd6f0a10a3ae21aab160a9665f"},{"version":"325e9e06a2ed55e709234cf68cad46d7edd0978c7a552517ca7b896834ac36b0","signature":"99be6014f1c4f20f30cf95b07b3e9005023c220080f07c774eb812a2767ae013"},{"version":"b68ee13cb3d02cb4a2268bd8f4b071727112f0ed84a2cac2c32f8344a37726ff","signature":"36799b668bc12d7bf32cefb1c8169568f0f45cda3a1da36ce34ac0d3929268f1"},{"version":"1f9a45b190b5b6a2ca7289c927670c88eb5864f367784c155e78dc508b1a5478","signature":"5b311a167a923d93c5fb97d51d9fd38c7e21cc8f6cd0cd434900a35c7224022a"},{"version":"814ea2b6a83202345346cdb0a6df5d934c4f5e5097352ce47091367ccf67786c","signature":"0d217b8fdd5d2944e1cc8f8568da02dddb554aa26dccea6ebad1ea82625caa39"},{"version":"d93d05283ec338c8ae2aa983e91f68d5aa06943e196ef315e0140a415be90a53","signature":"390ec2c46077fcc6862ea83ab66effb24cca4d385e3abad49e035cf7a99c3f93"},{"version":"b7af3b147f83c67528cff2b039b7b4a91afb1a61af40bcf8fbcc075dfab89184","signature":"c1ab1ffeb29cf53f7049671476ef61342b417ed124dc03980962f2e7f20aef1e"},{"version":"df34b8e967c5858a44279bab5b7fad0fcce41d18c838af0de672f7ef77e51bce","signature":"3a6cf73544a5bc13f436073ec64495155143cb161e888b38754377120171f2a8"},{"version":"a48ea9222d30442321ce3f6a844ed2f0572f0d4af383bbf7fb70a6521cf66a22","signature":"fe302c421bbb2a7b240a98f801dab7e79519cc36e74e363434e8f51230daf79d"},{"version":"15ab9092aae006fe08ed6c37d343632b29e0aeef641b9dfd4e87e7de176b335a","signature":"4e3edb7a3d63474d0ffdf14bd4018f9080590efd3c7ebd8fbe820ff9fa95978c"},{"version":"1f887372cc2b22193a0862e342f3ed5b15cc8d7d73c948b52b27654ce354df03","signature":"ae5f72d1c1dd15e870905e8dbb483b35cc51c46ab9fed373561cd048bb52e950"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"4476198e6f48dbdb56e3fb089613b1c88c9b828840e75591438b22a264c74ef0","signature":"eb4ebd95a4c94a0a9f8fa56bb9018d5f124e82da39b4d63753d8459861b39395"},{"version":"b583fc44f36ec38b340e158cfa9edd0525f554f11bf8ef6b56f74fe4e8f5ddbe","signature":"090b9b8091714b519ef67d3a7ba250b29dbaed82d62079354c5ea73050f3b46c"},{"version":"061cac3b0a600e9a367fc5a059f0a954fb6e35cd8a67f31753337d1e4ddb40cb","signature":"9d088c21ce2db0477ba184a508e46d9ff80978415588fed868e971dffd6158a8"},{"version":"48227a5c08da0e236426ae94bcc0cd3b91dd6b62944ef9ba164e088438ecd302","signature":"7ae4f6af1ad7052a7a603042256aff6584942d1206d2a4fafedcd96920bed9c2"},{"version":"c9c549ac4333dd9ffe0dcb129f67ad8c44db71d50e8c89f3c7fb2910d4fdcb5b","signature":"db38dbf39b674396f20baf66acfb361ea304edd4f3440e6722300c39a079bd4d"},{"version":"7292af6ac114840b1494a3782d26158cc0b4ee668ea4a159ddedfb171430aac8","signature":"471057ecf4e278eb1d7d8c7548449ac506be93c86d30ab7c69fdd780f78e97de"},{"version":"15ab9092aae006fe08ed6c37d343632b29e0aeef641b9dfd4e87e7de176b335a","signature":"4e3edb7a3d63474d0ffdf14bd4018f9080590efd3c7ebd8fbe820ff9fa95978c"},{"version":"4ecd93acdab1c8416584f1cace3f82ed1852c35de90ae777efdaa2815c3d9498","signature":"7df030d1aa415b8c9d7e2f00d779c5a4ddcd4bf9ad0595c77ae2cd9b4045da8c"},{"version":"5323cc9d748a8c0e0d073881bb71a5494ee9a9ff9457e6cca30ad618249f74ca","signature":"3aca97aacce75b03276fdcf9fdf338aa11332b1ce973c860a915a9005b81ce11"},{"version":"c7a6aa77909acf5de4879c8d5eb851b2525c5a8cc7d551b81046fff3d18c67aa","signature":"a4737d13fe942b5254a62dbf912342196c58599bc8e7203925505356c2f46453"},{"version":"85a1c009348ee3c8ee3c9da01dc1d8e3b1a5bd7a5ff35a28b81677eb6d42388b","signature":"c1535b795602460b14f72965bc552d95d1efc8266e16a1523edf24ed600760e4"},{"version":"24d87423105b3bda71785a6435c5aa4f00f01934e51779af9f837c041e0c5024","signature":"3bf0accd87e2c6fe9d4d4cfe028e2beb15e3da983dc674bf5fb988668c35c9a5"},{"version":"534ab3f9e2c5f935703e3faab317a00bcd3c903ce1760ad6789be1d3943f8c3d","signature":"8a2f3afb357ce9490682bd7de72a2c730baf552fac61f27fc59eef1fa0d23659"},{"version":"c84cc00e769f07e0aad53b1661a99553549e26da453dce3f3964910721c2db5f","signature":"c1abc5f27ee13f5f52854586422fe54757eb3885e0ad03bb739c536a8e18a957"},{"version":"1238c76877cc7917ecbb82445e5a46db0b9b06e232ef39a22859afd89f8db05c","signature":"fba39f2736f633baf500de9e4ccb7d7a82c59dcb86769dfc77e3a3f529b37675"},{"version":"a3f577054410bb1f072b493cad9dae59d9a516866c22536097814c3344fad3b2","signature":"2b27877ef6ebb2fee1b408e392cf3861c063bc9d212ae7c2d1abf46674bdf498"},{"version":"f92f4587e288431c8188bab29061662597b300f7d7e314433a4777dd5f215552","signature":"8d7ba7e7b3d8f22f4466b47ab534d448466c398630c734b1cf15dac5d4411731"},{"version":"c7eea088f766677a168c99be08e750fcc0480d94477770902b6a744d92604142","signature":"069c228db94ed74c09f5717f60a103c57528549a6434fa659bfc032154600e23"},{"version":"0aa490719d6d5de6662b2f9255733b3a464b4c7ff509e091a692ad293a377735","signature":"d42a2df8d84c12e3e81d111964052ef5e6acfe4464a9961ac3c5240ef38bc7f7"},{"version":"e87982bc6c1823c0a88f1245102d4f284f03dd7c12addc61b2d6d53c026326c8","signature":"25396fc07f961ec0353a5d7b046956ae8ec39e4fae557da49926c5df10aa040e"},{"version":"ef9d29c4c89e4e5646a3742f4525497b130b664e93ecbedc180dbcda78f24b4e","signature":"e89bcc3e50a2b4526d76c5e32a3e92c02e4e103189861f6586693cea5667bc4c"},{"version":"478f97c97389eeac7c8b1278739d6a237db434c1e4f89d463ed2ee63a6ae5fe7","signature":"bd0cccb8af9ef5796f3586c695aebcadddc72468f457b1e45cb25accb697281a"},{"version":"8d49f3bc34110398e83f77d9c0b98f10ca416c363b36cf0dd31e2ec533a24084","signature":"6c7cfb9b6c651d446bd9093d6d22544ecaec636cfa8c16cc8213ba2d03198d20"},{"version":"01aaa14bf3974a62bf09fab416d9e8d0e637c5aed5b433b5612b25160acb39a4","signature":"60cbb2293c3b29161e2179c0063eed3a57423f8fceb85be6390f84fdc51e9424"},{"version":"3e57f47bda19cdace9396c40325bd1c67b18d62144a9116234cd5ae811e29112","signature":"5fcca33d295f70db2e1571047e31d16a8101b83424f21144f18ac154ec97bc85"},{"version":"aa115a2a08e07e6193794130f0d123f285eafc3742d3a45729a2039fcad85d13","signature":"05e350f1dec1d6a841afd97484d3da84b93bb879c3acf1450fabb156961f4516"},{"version":"0d4de002ac7c8c6e427177dadf783fec0309d69759aa5158764446005c311b39","signature":"a98175e239f7baa61390089d3a3b83c5383453ef6e440525a4133b82f7b13989"},{"version":"ac0280bdcdea94cf189bbc5f2ccba352b25d4db952dd4be8c573e22162213f93","signature":"60c7e242f8c224465bafba439190d5940282998a5621d5aa25c6d864fcfdee8f"},{"version":"c53e39ec6b2402b3f74608257754e631e16791c5a47d4d87a66311311b14f361","signature":"8d51e34eb059a0a15d069cdeb78eabf17bbc4c83cc779c39f22bc1cf108a4e16"},{"version":"0a38ff7e59b9e8b9272bcf21f631966e3900488b8502fc41b1c08dcd9f537768","signature":"72a274a9c9ec141d1833b7f4f1d34cff4adc6edeaa08ea4c449971dfb2a77767"},{"version":"5c7d95d047bdeb70a12192c877a1d171c29791fa885891feeb107ca13c6f6303","signature":"52fb183db020c503999dc82080f9233cdd086c83548ed6f86cab6e187cbe9f97"},{"version":"c18bf0ffcf9b7457e299f8172a40b3e45b62949fcc40419f7aaffd2efecad11d","signature":"e0cf4f0548395aee73e5bdae6513ec5b8d0ddc754c30877998008ce2701b3bb7"},{"version":"f320ce27bf5cb24019ed9f6bb3da63486cde139a934a46465be89ac4ac6615c1","signature":"0cb81cc7e4e1c038e2d2b8a82602131d14213476e13dc795682366a622dbaf55"},{"version":"f644329c91a9d7fc71f9ec2b98ae5c753ff0a9410a3098ad125cc38acea0af45","signature":"dcddec09fd1333233199a353051350faaf197276a02c3712e64b7ac39e6d49b3"},{"version":"a72684f997d5a42690937faf92420103ecd477e6e1f3c4a0a62e13704440def9","signature":"9ea1a8b0b4bf9105929821910d599a2c9cbc8b7758e8986e4c7c973379e02335"},{"version":"12259686852d5dca1b2f8035d43cac70f86b0188cb23fddf50a0c5f49058938d","signature":"2031a049932b556d99bafff94a77ba23a64e71bbf0edb81367149099a05a7e75"},{"version":"ee820eec24fc6d820286ff9d4fcaee31d0afa5722c7620bc729449ccc093d39b","signature":"d86158de5bfa24a300febcdb40d63f2c04e23457f16951eabd24b122f68c315a"},{"version":"a2be95516180306b990ba15dd653604904538837eb5890aae94c3e711f8c8439","signature":"7846d1b66a395eb9deaad8ba48748e23a111f72acbd3c4163a8caf76bd044163"},{"version":"2611b95a0197e048016b9c65e6ec922752c56ed8431d3def611da6e38de3ad2b","signature":"a9d4450e3f430849f5cb90ff6eccf38998e38737565301b1a9e4038835ade038"},{"version":"a72684f997d5a42690937faf92420103ecd477e6e1f3c4a0a62e13704440def9","signature":"9ea1a8b0b4bf9105929821910d599a2c9cbc8b7758e8986e4c7c973379e02335"},{"version":"297a4643e091184909db71d797bead57e2bb93f2d0b96ac786b39a0a9bca73bf","signature":"f1fd9e2965426e74a4010f7ec65fb9156443220a0bbcd68233536ad795bd03df"},{"version":"3f2c84b0f63d24d40eab9c359e57c26b03db5e76018524f942cb92490988ac08","signature":"0744113df1d4b80b778de8605b2f42ba1a71183c804f799e76cc558284f3ef28"},{"version":"6f1758691c41e104a2c27ce785ab3a68ef179f4f4630827f1ee75179b86efd9f","signature":"eadf93c81e92da655eb442e1e94423de0d99ea8ebacb7f2420401a4e1f5259a7"},{"version":"1a5e2682a075e0c957b155bb48cae0554e090d0477b41050a50237776eab7ef3","signature":"703107a4fa604868f9bf2c747c88419771e726f29b8411aae62accbbbe3d71df"},{"version":"7196356338b7024af0b26eb951f469d8c2cdc7861f86faf51711c4329dc09af3","signature":"ca01384ca0103cc33d8dbb2f05e5052be5c247fae6f07a87803309b6219065e5"},{"version":"82f44140ecb04d6aaee2bd0a9e9ca98c888cb53ef99fced741fc1f136fce6613","signature":"bc99682ee041a1c63d4ded92317c8d8c2cfe262ff2046f6454ec2cf8893c7e2e"},{"version":"7f9d96ae140376a6ceaa2af9ea314abe8502a926a631f8e0566af5e9e70d8745","signature":"d4014dffdbe20447ce5d50fc957285f555ea5ab8079b28370deb6516d4dedd45"},{"version":"bb786c39aaad59761e078a90e06ac86744665e977b1cd389cde4873dd73fb8ae","signature":"b64c7474e8dfee3ec83fa76986a2ee995c1a3474281050c4182e00f1c70e142b"},{"version":"97a57ffb1005db70e3309c01b712ecdc5e6d1156cd45027819722363e4ab7f33","signature":"bb3c0c8a2045e6ed778be836b97df43713ab5f1c9fa494186e664ba4719ef53e"},{"version":"60968fdc35a1a9dfcc9f4a57f974fa2630316e4964c73d04d089863815bd0f96","signature":"232e0731539108d237609b1710d95f74261896a904578409875be2f248354cd0"},{"version":"41ed1935f133e0ee7c289734c4857f9a14e6feaf5f8d30d09c80a0643b848272","signature":"cb73ce647f78f3511a4072f200c588d8a703777e53bd1e05af163a7f1e9ae322"},{"version":"3ff222084d1debbb297d27b71acfe4f6a418f7f8cc36e727a7fdfdda8d486a88","signature":"b44a2c6eeda7acda4366e5ebd4d6032c52d0517f8495e1e623faa05aeefcbe0d"},{"version":"8771dd0cc75a249c73c1aa7daebf55127d88f2fed656e76f64e34e29261dd058","signature":"7def7ff009e6f1eb532d40e7b0757f58a96430319338cf3883bb0622d88f3894"},{"version":"8194a6a258377030ec2319696fb02bfb47590636052f33453de4805163274681","signature":"b44a2c6eeda7acda4366e5ebd4d6032c52d0517f8495e1e623faa05aeefcbe0d"},{"version":"03b73d7042ebd54332b354dfadd1c38cd9bd522959ec4505c6ac9a8c1a01955d","signature":"956410410ce11d34a3e6b9bcf680df8e9cbe72eca88aa1ecb2721172dac1989c"},{"version":"34cca33b444e35839c387148c7ff0480870b4ee933123f0401da4a778999d4a7","signature":"f06f8e20c3bc71cc2d6cb8279ac348bf44da0cbd9cc05689f5daad45e66193fb"},{"version":"060c9b4c3d0e537bfe2efe62de5163ef5a5b61d9cd4225cd1f8093c5396edb82","signature":"cef89ff6ae7110b5eda3c5d81a6719b34d9aec4b788c8cfdc60e33cd079de507"},{"version":"9dbb4f0d6f194eb117e4615bbfd1984fbc57b334430c727ab3192ec5d8979b4c","signature":"593a6775826dd1f17ea8be1faa71f5874f64e8affd81456149abb4118745684d"},{"version":"616ede6ea25e43f2ec46a83698591cb6a957828c044052e47d44b70a1d8c5bf2","signature":"0aa2c66b4e1df35f218e910abdb18e0a665a3b6b3eba5207801dd28b303b8a75"},{"version":"916bc4df399d9dc0c52a27e566d988d8a583ba8817ac75ee3705de7d333498b8","signature":"fa38a35423cbac1350cf751510d0507b55c2203333134ac255ca65b229e2e804"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"ec478dd4b25b51312ca73fb99de7da84e9a2f6f06afd76ef7f13b4747a02f837","signature":"fa1e759921bc1db96f8c81a4157ee8ba68222ab8ff6f18c420f472c726eface4"},{"version":"f4c5cf9bb78e85f15dc27180260637cf24b2a24bc39e0788783a3accc4dde614","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"31771a1a8c348730e9167dfc5599b6666e5a1fbd9fef592df75ee6b4743209fa","signature":"e4cb315c80555607f3969a372a131755ddc28fcf738554495108acf668e1b0c9"},{"version":"a31f3fbe323c9036e6ffa8267ab2e1304cec1a78fcf991f4970187c2ab28434a","signature":"e44e205299977927942dedbaf12dc675960fc563306b0432d53e1c0004b3de9b"},{"version":"3b943ab6f303e76b322bb6f4f8b53c04bd3a6c69249a0e012581220ee5f108e1","signature":"727b06a2d219c5db931cdd99f62f4883b49476924abe21d80a1383dd6f730156"},{"version":"c796dfefa0f3c8ccb18a8b7ced61bf831ae9ebe7058c0ab27253ae15ca0acf50","signature":"a1585695f2ba08c1fd7cfe835e7bbf4dd8e4c7ab0839107e809f526049590d42"},{"version":"95df7bd4524dbf615afe390ff73bcdb1a50dca3a325f112ddc35ac837e54fc34","signature":"6433235b67eace2ee928711b89762c42d476372b146a9d79aa04c466db8aa2a4"},{"version":"785b9d575b49124ce01b46f5b9402157c7611e6532effa562ac6aebec0074dfc","impliedFormat":1},{"version":"f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","impliedFormat":1},{"version":"a4a39b5714adfcadd3bbea6698ca2e942606d833bde62ad5fb6ec55f5e438ff8","impliedFormat":1},{"version":"bbc1d029093135d7d9bfa4b38cbf8761db505026cc458b5e9c8b74f4000e5e75","impliedFormat":1},{"version":"1f68ab0e055994eb337b67aa87d2a15e0200951e9664959b3866ee6f6b11a0fe","impliedFormat":1},{"version":"725d9be2fd48440256f4deb00649adffdbc5ecd282b09e89d4e200663792c34c","impliedFormat":1},{"version":"df4d08f4261dcfc55b5d59060e20821bf89e45a0996ad9e3b21b7b03afd4b072","affectsGlobalScope":true,"impliedFormat":1},{"version":"0acf9c092c24da30c5c65c27cc622568216ea7923a8f2ad912a7a4109e6f4a4a","impliedFormat":1},{"version":"df7a83b717830b3bc74cb7e651c1bad6fa4316220c1c7b2b12866724fab758f0","impliedFormat":1},{"version":"d88a5e779faf033be3d52142a04fbe1cb96009868e3bbdd296b2bc6c59e06c0e","impliedFormat":1},{"version":"5339f84dfcb7b04aa1c2b4d7713d6128039381447f07abc2e48d36685e2eef44","impliedFormat":1},{"version":"fb35a61a39c933d31b5b2549d906b2c932a1486622958586f662dbd4b2fe72e6","impliedFormat":1},{"version":"24e2728268be1ad2407bab004549d2753a49b2acb0f117a04c4e28ffb3ecdd4f","impliedFormat":1},{"version":"aff159b14eba59afe98a88fe6f57881ba02895fb9763512dda9083497bdcd0e6","impliedFormat":1},{"version":"b6bc775d112a7761a50594fc589aeaa8893c139ffe3db2b4999756e17f367a8d","impliedFormat":1},{"version":"0b8f398b88a43f8bf29a50920e7ddef19c06c3008b351e7047e9613d7195c638","impliedFormat":1},{"version":"25d0e0fe3731bc85c7bd2ef7f7e1faf4f5201be1c10ff3a19e1afa6ec4568669","impliedFormat":1},{"version":"26080058b725ac0b480241751255b4391f722263778e84e66a62068705aafd3c","impliedFormat":1},{"version":"46afbf46c3d62eac2afead3a2011d506637bf4f2c05e1fd64bbf7e2bb2947b7c","impliedFormat":1},{"version":"02f634f868780eaaff5e2d3fb4570dac8e7f018a8650bb9a0ac1deb4915df8d1","impliedFormat":1}],"root":[46,49,50,[82,99],[240,244],246,247,[261,267],508,509,[511,519],[527,532],[534,536],[599,615],[617,626],[628,636],[638,768],[771,790],[792,832],[834,980]],"options":{"declaration":true,"esModuleInterop":true,"inlineSourceMap":true,"module":1,"noFallthroughCasesInSwitch":false,"noImplicitReturns":true,"outDir":"./","strict":true,"target":6,"useUnknownInCatchVariables":false},"referencedMap":[[1000,1],[993,2],[997,3],[995,4],[998,5],[996,6],[999,7],[994,8],[992,9],[991,10],[46,8],[244,11],[602,12],[603,13],[604,14],[607,15],[606,8],[608,16],[609,17],[611,18],[612,19],[613,20],[614,21],[605,22],[615,23],[617,24],[610,25],[618,26],[616,8],[627,8],[619,27],[620,28],[621,17],[623,29],[624,30],[625,31],[637,8],[626,28],[628,32],[629,24],[630,18],[631,33],[632,18],[633,18],[634,33],[635,17],[636,34],[638,35],[639,36],[640,37],[101,38],[102,8],[103,38],[129,39],[104,38],[105,8],[121,40],[100,8],[126,41],[127,42],[123,38],[122,43],[124,44],[128,44],[125,8],[106,8],[107,8],[108,45],[120,46],[109,45],[110,8],[111,8],[112,45],[114,47],[113,8],[115,45],[119,48],[254,8],[255,8],[256,8],[257,8],[260,49],[258,50],[259,8],[56,8],[55,8],[60,51],[58,52],[59,53],[57,54],[117,55],[118,56],[116,8],[137,57],[140,58],[141,59],[147,60],[142,40],[143,61],[145,62],[138,63],[146,64],[139,8],[132,61],[148,65],[149,66],[150,67],[239,68],[151,69],[157,70],[158,71],[159,72],[164,73],[165,74],[168,75],[170,76],[171,74],[172,77],[175,78],[177,79],[178,74],[179,71],[180,72],[184,80],[185,74],[188,81],[190,82],[191,71],[192,72],[193,74],[197,83],[212,84],[234,85],[214,86],[215,74],[218,87],[219,77],[224,88],[226,89],[231,90],[232,74],[233,72],[235,91],[156,92],[153,93],[155,94],[236,8],[238,95],[237,96],[51,8],[69,97],[70,98],[66,8],[68,99],[53,50],[80,100],[63,101],[62,102],[65,103],[61,104],[64,105],[74,106],[71,8],[72,99],[73,107],[78,108],[75,8],[76,99],[77,109],[79,110],[67,111],[522,8],[523,8],[526,112],[524,8],[525,8],[252,113],[251,8],[248,8],[249,8],[250,8],[985,114],[986,8],[984,115],[983,116],[981,8],[989,117],[982,8],[334,8],[336,8],[337,8],[338,8],[339,8],[340,8],[341,8],[342,8],[343,8],[344,8],[345,8],[346,8],[347,8],[348,8],[335,8],[376,8],[349,8],[350,8],[351,8],[377,118],[352,8],[353,8],[354,8],[355,8],[356,8],[357,8],[358,8],[359,8],[360,8],[361,8],[362,8],[363,8],[364,8],[365,8],[366,8],[367,8],[368,8],[369,8],[370,8],[371,8],[372,8],[373,8],[374,8],[375,8],[329,8],[330,119],[414,8],[415,8],[416,8],[417,8],[418,8],[419,8],[420,8],[421,8],[422,8],[423,8],[424,8],[426,8],[425,8],[427,8],[428,8],[429,8],[413,120],[465,8],[430,120],[431,8],[432,8],[433,8],[434,8],[435,8],[436,8],[437,8],[438,8],[439,8],[440,8],[441,8],[442,8],[443,8],[444,8],[445,121],[446,122],[447,8],[449,8],[448,8],[450,8],[451,8],[452,123],[453,8],[454,8],[455,8],[456,8],[328,124],[327,8],[466,125],[457,8],[458,8],[459,8],[460,8],[461,8],[462,8],[463,8],[464,8],[544,8],[545,126],[546,8],[547,8],[548,8],[549,8],[537,8],[540,127],[538,8],[539,8],[550,8],[551,8],[552,8],[553,8],[554,8],[555,8],[556,8],[558,8],[557,8],[559,8],[560,8],[561,8],[543,120],[562,120],[563,8],[564,8],[565,8],[566,8],[567,8],[568,8],[569,8],[570,8],[571,8],[572,8],[573,8],[574,8],[575,8],[576,8],[577,128],[578,129],[579,8],[581,8],[580,8],[582,8],[583,8],[584,130],[585,8],[586,8],[587,8],[588,8],[542,131],[541,8],[597,132],[589,8],[590,8],[591,8],[592,8],[593,8],[594,8],[595,8],[596,8],[990,8],[987,133],[988,134],[598,133],[510,8],[245,8],[81,8],[331,8],[130,8],[520,135],[521,136],[161,137],[163,138],[166,139],[169,140],[167,141],[227,142],[154,143],[135,143],[133,143],[173,139],[176,144],[174,145],[182,146],[183,147],[186,146],[189,148],[187,149],[203,143],[213,143],[217,150],[216,151],[225,152],[222,153],[223,154],[134,155],[230,156],[136,157],[194,137],[131,143],[181,143],[160,143],[162,8],[199,158],[198,143],[196,159],[200,160],[201,161],[195,162],[202,163],[204,164],[205,165],[206,166],[211,167],[221,168],[208,143],[152,143],[229,169],[228,170],[220,171],[210,172],[209,173],[207,143],[253,174],[268,8],[483,175],[484,176],[481,176],[482,8],[487,177],[486,178],[485,179],[272,8],[274,180],[273,176],[275,181],[488,8],[489,8],[492,182],[490,8],[491,8],[320,183],[321,184],[322,185],[318,186],[319,187],[276,176],[285,188],[277,176],[279,176],[280,8],[278,176],[281,176],[282,176],[283,176],[284,189],[506,190],[298,8],[303,191],[300,192],[299,8],[301,8],[302,193],[507,194],[297,195],[305,196],[306,8],[290,197],[310,198],[296,199],[294,200],[468,201],[293,202],[292,203],[314,204],[315,204],[313,205],[317,204],[316,205],[323,206],[312,207],[324,208],[467,209],[307,210],[325,204],[326,204],[308,211],[309,212],[295,213],[311,214],[304,215],[286,216],[287,193],[289,217],[288,218],[269,176],[271,219],[270,8],[469,220],[470,8],[291,8],[471,176],[480,221],[472,219],[473,8],[474,176],[476,222],[475,223],[477,176],[478,176],[479,176],[493,224],[501,225],[505,226],[502,8],[503,193],[500,227],[504,228],[499,229],[496,230],[495,231],[497,230],[494,8],[498,231],[144,8],[533,232],[52,8],[44,8],[45,8],[9,8],[8,8],[2,8],[10,8],[11,8],[12,8],[13,8],[14,8],[15,8],[16,8],[17,8],[3,8],[18,8],[4,8],[19,8],[23,8],[20,8],[21,8],[22,8],[24,8],[25,8],[26,8],[5,8],[27,8],[28,8],[29,8],[30,8],[6,8],[34,8],[31,8],[32,8],[33,8],[35,8],[7,8],[36,8],[41,8],[42,8],[37,8],[38,8],[39,8],[40,8],[1,8],[43,8],[391,233],[401,234],[390,233],[411,235],[382,236],[381,8],[410,237],[404,238],[409,236],[384,239],[398,240],[383,241],[407,242],[379,243],[378,237],[408,244],[380,245],[385,234],[386,8],[389,234],[332,8],[412,246],[402,247],[393,248],[394,249],[396,250],[392,251],[395,252],[405,237],[387,253],[388,254],[397,255],[333,8],[400,247],[399,234],[403,8],[406,256],[54,8],[532,257],[241,258],[536,259],[508,260],[509,8],[519,261],[513,262],[511,263],[514,264],[512,8],[534,265],[264,266],[263,267],[516,268],[529,269],[528,270],[266,271],[517,268],[530,272],[98,273],[515,274],[265,275],[527,276],[518,277],[622,278],[535,279],[599,280],[267,281],[99,282],[531,283],[601,284],[240,285],[246,266],[261,286],[262,287],[242,288],[247,289],[600,290],[243,291],[791,68],[833,100],[770,292],[769,8],[47,8],[48,293],[641,8],[642,294],[645,295],[646,296],[647,295],[792,297],[648,298],[649,295],[650,296],[651,299],[771,300],[793,301],[652,302],[814,303],[653,304],[654,295],[655,305],[656,295],[657,306],[772,307],[794,308],[658,309],[815,310],[659,311],[660,295],[661,312],[662,312],[663,313],[773,314],[795,315],[664,316],[816,317],[665,313],[97,318],[774,319],[796,320],[666,321],[50,295],[667,295],[668,295],[775,322],[797,323],[671,324],[669,325],[90,295],[836,326],[672,295],[776,327],[798,328],[674,329],[817,330],[675,331],[673,295],[676,295],[777,332],[799,333],[677,334],[818,335],[678,334],[679,295],[680,312],[819,336],[681,312],[682,295],[683,295],[684,337],[685,296],[758,295],[686,295],[687,295],[688,295],[689,312],[690,338],[778,339],[800,340],[691,341],[820,342],[692,338],[693,295],[694,321],[695,296],[779,343],[801,344],[696,345],[821,346],[697,296],[698,295],[699,347],[700,348],[780,349],[802,350],[701,351],[822,352],[702,296],[703,295],[704,295],[705,295],[707,353],[706,347],[781,354],[803,355],[708,356],[823,357],[709,358],[711,359],[710,347],[782,360],[804,361],[712,362],[824,363],[713,364],[714,365],[716,366],[717,366],[783,367],[805,368],[718,369],[825,370],[719,371],[715,372],[832,373],[720,295],[722,374],[721,295],[784,375],[806,376],[723,374],[826,377],[724,374],[725,8],[726,8],[727,295],[728,295],[730,378],[729,296],[785,379],[807,380],[731,381],[827,382],[732,295],[733,295],[808,383],[734,384],[735,295],[736,295],[737,295],[738,295],[786,385],[809,386],[739,387],[740,8],[742,388],[834,389],[835,390],[743,295],[745,391],[787,392],[810,393],[746,394],[744,395],[828,396],[747,391],[748,295],[749,312],[750,397],[788,398],[811,399],[94,400],[93,401],[829,402],[751,403],[752,295],[753,295],[755,404],[756,321],[754,405],[757,295],[759,406],[789,407],[812,408],[761,409],[760,410],[762,295],[790,411],[813,412],[764,413],[830,414],[765,413],[763,305],[766,295],[831,415],[768,416],[767,417],[644,418],[643,295],[837,295],[838,419],[928,420],[941,421],[839,422],[840,8],[841,395],[843,423],[842,365],[929,424],[942,425],[844,426],[956,427],[845,423],[972,428],[846,295],[847,295],[848,295],[850,429],[854,430],[849,295],[856,431],[857,432],[860,433],[855,430],[858,434],[861,434],[930,435],[943,436],[866,437],[957,438],[859,439],[867,440],[868,321],[869,295],[870,295],[871,296],[872,441],[931,442],[944,443],[873,441],[958,444],[874,296],[875,295],[876,445],[932,446],[945,447],[877,448],[879,449],[878,295],[933,450],[946,451],[880,449],[959,452],[881,449],[882,295],[947,453],[883,8],[960,454],[884,295],[886,455],[887,321],[865,456],[863,457],[885,8],[862,295],[888,458],[864,8],[889,457],[969,459],[892,460],[891,295],[890,295],[934,461],[948,462],[893,463],[961,464],[894,460],[897,465],[895,295],[896,295],[935,466],[949,467],[898,468],[962,469],[899,470],[901,471],[902,471],[900,365],[903,295],[936,472],[950,473],[904,474],[963,475],[905,471],[907,476],[906,295],[937,477],[951,478],[908,476],[909,295],[964,479],[910,476],[970,480],[971,481],[911,295],[952,453],[912,8],[913,482],[965,483],[914,484],[916,485],[915,365],[938,486],[953,487],[918,488],[917,321],[966,489],[919,485],[851,295],[920,430],[852,295],[939,490],[954,491],[921,492],[853,493],[967,494],[922,430],[923,295],[925,495],[940,496],[955,497],[926,495],[968,498],[927,495],[924,321],[974,499],[973,8],[975,8],[976,295],[977,500],[88,295],[741,295],[89,295],[84,295],[49,501],[980,502],[92,503],[979,504],[85,295],[82,295],[978,295],[670,295],[96,505],[95,506],[91,365],[87,507],[86,508],[83,295]],"semanticDiagnosticsPerFile":[[49,[{"start":327,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-proto-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[82,[{"start":3297,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8651,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[86,[{"start":3901,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[87,[{"start":19181,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24858,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28992,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[91,[{"start":11551,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[92,[{"start":42204,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55154,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55391,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":58565,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":58806,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":62204,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":62445,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":67564,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":67801,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":83704,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":89876,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":92366,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":96646,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":96715,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":97859,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":103617,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":103697,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":103798,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":105380,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":106792,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":108116,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":112479,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[93,[{"start":21002,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31607,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":32700,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":35101,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":37937,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":41344,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":49385,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":56928,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":59429,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[94,[{"start":17610,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23618,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":27301,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":36647,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":40330,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":44311,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":47756,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[95,[{"start":9121,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10482,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[97,[{"start":11413,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":11943,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":13537,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14900,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19351,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19437,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23650,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23738,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":26575,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":29431,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[98,[{"start":28,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/query' or its corresponding type declarations.","category":1,"code":2307},{"start":126,"length":68,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/perpetuals/query' or its corresponding type declarations.","category":1,"code":2307},{"start":226,"length":64,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/prices/query' or its corresponding type declarations.","category":1,"code":2307},{"start":327,"length":69,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/subaccounts/query' or its corresponding type declarations.","category":1,"code":2307},{"start":429,"length":66,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/feetiers/query' or its corresponding type declarations.","category":1,"code":2307},{"start":526,"length":63,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/stats/query' or its corresponding type declarations.","category":1,"code":2307},{"start":788,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":866,"length":59,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/tx' or its corresponding type declarations.","category":1,"code":2307},{"start":1014,"length":74,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/subaccounts/subaccount' or its corresponding type declarations.","category":1,"code":2307},{"start":1104,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/sending/tx' or its corresponding type declarations.","category":1,"code":2307},{"start":1182,"length":68,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/sending/transfer' or its corresponding type declarations.","category":1,"code":2307},{"start":1266,"length":66,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/assets/genesis' or its corresponding type declarations.","category":1,"code":2307},{"start":1348,"length":64,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/assets/asset' or its corresponding type declarations.","category":1,"code":2307}]],[99,[{"start":116,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":235,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[241,[{"start":121,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[244,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":151,"length":8,"messageText":"Module '\"../../src/types\"' has no exported member 'Transfer'.","category":1,"code":2305},{"start":192,"length":10,"messageText":"'\"../../src/types\"' has no exported member named 'Order_Side'. Did you mean 'OrderSide'?","category":1,"code":2724,"relatedInformation":[{"file":"../src/clients/constants.ts","start":1758,"length":9,"messageText":"'OrderSide' is declared here.","category":3,"code":2728}]},{"start":206,"length":17,"messageText":"'\"../../src/types\"' has no exported member named 'Order_TimeInForce'. Did you mean 'OrderTimeInForce'?","category":1,"code":2724,"relatedInformation":[{"file":"../src/clients/constants.ts","start":1912,"length":16,"messageText":"'OrderTimeInForce' is declared here.","category":3,"code":2728}]}]],[247,[{"start":50,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":145,"length":8,"messageText":"Module '\"../clients/types\"' has no exported member 'Transfer'.","category":1,"code":2305}]],[261,[{"start":97,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[263,[{"start":173,"length":59,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/tx' or its corresponding type declarations.","category":1,"code":2307},{"start":305,"length":68,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/sending/transfer' or its corresponding type declarations.","category":1,"code":2307},{"start":412,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/sending/tx' or its corresponding type declarations.","category":1,"code":2307}]],[265,[{"start":201,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[266,[{"start":281,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[327,[{"start":87,"length":10,"messageText":"Duplicate identifier 'TypedArray'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":26272,"length":10,"messageText":"'TypedArray' was also declared here.","category":3,"code":6203}]},{"start":408,"length":15,"messageText":"Duplicate identifier 'ArrayBufferView'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":26545,"length":15,"messageText":"'ArrayBufferView' was also declared here.","category":3,"code":6203}]}]],[328,[{"start":14128,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":15618,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":85219,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":15618,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":85219,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[329,[{"start":43713,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/assert.d.ts","start":5746,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/assert.d.ts","start":5839,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert.d.ts","start":43741,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert.d.ts","start":43834,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":43806,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/assert.d.ts","start":5746,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/assert.d.ts","start":5839,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert.d.ts","start":43741,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert.d.ts","start":43834,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[330,[{"start":88,"length":6,"messageText":"Duplicate identifier 'strict'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert/strict.d.ts","start":88,"length":6,"messageText":"'strict' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert/strict.d.ts","start":191,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":191,"length":6,"messageText":"Duplicate identifier 'strict'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert/strict.d.ts","start":88,"length":6,"messageText":"'strict' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/assert/strict.d.ts","start":191,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[334,[{"start":5746,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43713,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43806,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":5839,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43713,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43806,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[335,[{"start":1627,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":1682,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":2184,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":2229,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":8300,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":11801,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":2557,"length":14,"messageText":"Duplicate identifier 'BufferEncoding'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":9905,"length":14,"messageText":"'BufferEncoding' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":9905,"length":14,"messageText":"and here.","category":3,"code":6204}]},{"start":2740,"length":20,"messageText":"Duplicate identifier 'WithImplicitCoercion'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":10208,"length":20,"messageText":"'WithImplicitCoercion' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":10208,"length":20,"messageText":"and here.","category":3,"code":6204}]},{"start":4496,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":15618,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":85219,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":15618,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":85219,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":25985,"length":9,"messageText":"Duplicate identifier 'Immediate'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":2289,"length":9,"messageText":"'Immediate' was also declared here.","category":3,"code":6203}]},{"start":26140,"length":7,"messageText":"Duplicate identifier 'Timeout'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":4621,"length":7,"messageText":"'Timeout' was also declared here.","category":3,"code":6203}]},{"start":26272,"length":10,"messageText":"Duplicate identifier 'TypedArray'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","start":87,"length":10,"messageText":"'TypedArray' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","start":87,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":26545,"length":15,"messageText":"Duplicate identifier 'ArrayBufferView'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","start":408,"length":15,"messageText":"'ArrayBufferView' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/globals.typedarray.d.ts","start":408,"length":15,"messageText":"and here.","category":3,"code":6204}]},{"start":27815,"length":29,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374},{"start":27892,"length":38,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374}]],[336,[{"start":4341,"length":13,"messageText":"Duplicate identifier 'AsyncResource'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/async_hooks.d.ts","start":11320,"length":13,"messageText":"'AsyncResource' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/async_hooks.d.ts","start":11320,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":6944,"length":17,"messageText":"Duplicate identifier 'AsyncLocalStorage'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/async_hooks.d.ts","start":15844,"length":17,"messageText":"'AsyncLocalStorage' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/async_hooks.d.ts","start":15844,"length":17,"messageText":"and here.","category":3,"code":6204}]}]],[337,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: INSPECT_MAX_BYTES, kMaxLength, kStringMaxLength, constants, TranscodeEncoding, SlowBuffer, Buffer, Blob","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":118,"length":4,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[338,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Serializable, SendHandle, ChildProcess, StdioOptions, SerializationType, StdioNull, StdioPipe, ExecFileException","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/child_process.d.ts","start":3586,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":222,"length":12,"messageText":"Duplicate identifier 'Serializable'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":3922,"length":12,"messageText":"'Serializable' was also declared here.","category":3,"code":6203}]},{"start":282,"length":10,"messageText":"Duplicate identifier 'SendHandle'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":3991,"length":10,"messageText":"'SendHandle' was also declared here.","category":3,"code":6203}]},{"start":335,"length":12,"code":2430,"category":1,"messageText":{"messageText":"Interface 'ChildProcess' incorrectly extends interface 'EventEmitter'.","category":1,"code":2430,"next":[{"messageText":"Types of property 'addListener' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}]}},{"start":854,"length":3,"messageText":"All declarations of 'pid' must have identical modifiers.","category":1,"code":2687},{"start":6199,"length":12,"messageText":"Duplicate identifier 'StdioOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":29718,"length":12,"messageText":"'StdioOptions' was also declared here.","category":3,"code":6203}]},{"start":6375,"length":17,"messageText":"Duplicate identifier 'SerializationType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":29811,"length":17,"messageText":"'SerializationType' was also declared here.","category":3,"code":6203}]},{"start":8060,"length":9,"messageText":"Duplicate identifier 'StdioNull'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":31870,"length":9,"messageText":"'StdioNull' was also declared here.","category":3,"code":6203}]},{"start":8112,"length":9,"messageText":"Duplicate identifier 'StdioPipe'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":31971,"length":9,"messageText":"'StdioPipe' was also declared here.","category":3,"code":6203}]},{"start":16275,"length":17,"messageText":"Duplicate identifier 'ExecFileException'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":48724,"length":17,"messageText":"'ExecFileException' was also declared here.","category":3,"code":6203}]},{"start":28194,"length":8,"messageText":"All declarations of 'encoding' must have identical modifiers.","category":1,"code":2687}]],[339,[{"start":893,"length":6,"messageText":"Duplicate identifier 'Worker'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/cluster.d.ts","start":5123,"length":6,"messageText":"'Worker' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/cluster.d.ts","start":5123,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1563,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":1641,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":1711,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":1788,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":1880,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":1965,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2143,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2628,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2697,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2758,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2826,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2909,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2985,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3154,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3212,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3283,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3346,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3416,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3501,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3579,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3750,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3810,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3892,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3966,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4047,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4143,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4232,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4414,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4485,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4571,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4649,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4734,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4834,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4927,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5113,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5200,"length":7,"code":2430,"category":1,"messageText":{"messageText":"Interface 'Cluster' incorrectly extends interface 'EventEmitter'.","category":1,"code":2430,"next":[{"messageText":"Types of property 'addListener' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: (worker: Worker) => void): this; (event: \"exit\", listener: (worker: Worker, code: number, signal: string) => void): this; (event: \"fork\", listener: (worker: Worker) => void): this; (event: \"listening\", listener: (worker: Wor...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}]}},{"start":5345,"length":8,"messageText":"All declarations of 'isMaster' must have identical modifiers.","category":1,"code":2687},{"start":5372,"length":8,"messageText":"All declarations of 'isWorker' must have identical modifiers.","category":1,"code":2687},{"start":5433,"length":8,"messageText":"All declarations of 'settings' must have identical modifiers.","category":1,"code":2687},{"start":5523,"length":6,"messageText":"All declarations of 'worker' must have identical modifiers.","category":1,"code":2687},{"start":5560,"length":7,"messageText":"All declarations of 'workers' must have identical modifiers.","category":1,"code":2687}]],[340,[{"start":86,"length":7,"messageText":"Duplicate identifier 'console'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/console.d.ts","start":2594,"length":7,"messageText":"'console' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/console.d.ts","start":2594,"length":7,"messageText":"and here.","category":3,"code":6204}]},{"start":6206,"length":7,"messageText":"Duplicate identifier 'export='.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/console.d.ts","start":20936,"length":28,"messageText":"'export=' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/console.d.ts","start":20936,"length":28,"messageText":"and here.","category":3,"code":6204}]}]],[341,[{"start":495,"length":3,"messageText":"Duplicate identifier 'exp'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/constants.d.ts","start":510,"length":3,"messageText":"'exp' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/constants.d.ts","start":510,"length":3,"messageText":"and here.","category":3,"code":6204}]},{"start":595,"length":9,"messageText":"Duplicate identifier 'constants'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/constants.d.ts","start":610,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/constants.d.ts","start":610,"length":9,"messageText":"and here.","category":3,"code":6204}]}]],[342,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Certificate, OPENSSL_VERSION_NUMBER, SSL_OP_ALL, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, SSL_OP_CIPHER_SERVER_PREFERENCE, SSL_OP_CISCO_ANYCONNECT, SSL_OP_COOKIE_EXCHANGE, SSL_OP_CRYPTOPRO_TLSEXT_BUG, SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS, SSL_OP_LEGACY_SERVER_CONNECT, SSL_OP_NO_COMPRESSION, SSL_OP_NO_QUERY_MTU, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION, SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TICKET, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_TLS_ROLLBACK_BUG, ENGINE_METHOD_RSA, ENGINE_METHOD_DSA, ENGINE_METHOD_DH, ENGINE_METHOD_RAND, ENGINE_METHOD_EC, ENGINE_METHOD_CIPHERS, ENGINE_METHOD_DIGESTS, ENGINE_METHOD_PKEY_METHS, ENGINE_METHOD_PKEY_ASN1_METHS, ENGINE_METHOD_ALL, ENGINE_METHOD_NONE, DH_CHECK_P_NOT_SAFE_PRIME, DH_CHECK_P_NOT_PRIME, DH_UNABLE_TO_CHECK_GENERATOR, DH_NOT_SUITABLE_GENERATOR, RSA_PKCS1_PADDING, RSA_SSLV23_PADDING, RSA_NO_PADDING, RSA_PKCS1_OAEP_PADDING, RSA_X931_PADDING, RSA_PKCS1_PSS_PADDING, RSA_PSS_SALTLEN_DIGEST, RSA_PSS_SALTLEN_MAX_SIGN, RSA_PSS_SALTLEN_AUTO, POINT_CONVERSION_COMPRESSED, POINT_CONVERSION_UNCOMPRESSED, POINT_CONVERSION_HYBRID, defaultCoreCipherList, defaultCipherList, fips, BinaryToTextEncoding, CharacterEncoding, LegacyCharacterEncoding, Encoding, ECDHKeyFormat, Hash, Hmac, KeyObjectType, KeyObject, CipherCCMTypes, CipherGCMTypes, CipherOCBTypes, BinaryLike, CipherKey, Cipher, Decipher, DSAEncoding, KeyLike, Sign, Verify, DiffieHellman, DiffieHellmanGroup, ECDH, KeyType, KeyFormat, UUID","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/crypto.d.ts","start":596,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[343,[{"start":469,"length":10,"messageText":"Duplicate identifier 'SocketType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dgram.d.ts","start":1223,"length":10,"messageText":"'SocketType' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dgram.d.ts","start":1223,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":1280,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dgram.d.ts","start":3517,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dgram.d.ts","start":3517,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":5209,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5287,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5352,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5419,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5494,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5563,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5972,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6097,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6155,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6221,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6281,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6370,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6441,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6499,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6559,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6627,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6689,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6780,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6862,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":6931,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7002,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7081,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7154,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7256,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7342,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7415,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7490,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7573,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":7650,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}}]],[344,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ADDRCONFIG, V4MAPPED, ALL, AnyRecordWithTtl, AnyRecord, NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dns.d.ts","start":1781,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ADDRCONFIG, V4MAPPED, ALL, AnyRecordWithTtl, AnyRecord, NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver, promises","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dns.d.ts","start":1781,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[345,[{"start":507,"length":6,"messageText":"Duplicate identifier 'Domain'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/domain.d.ts","start":1235,"length":6,"messageText":"'Domain' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/domain.d.ts","start":1235,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":549,"length":6,"messageText":"Duplicate identifier 'Domain'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/domain.d.ts","start":1235,"length":6,"messageText":"'Domain' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/domain.d.ts","start":1235,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[346,[{"start":3368,"length":12,"messageText":"Duplicate identifier 'EventEmitter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/events.d.ts","start":43049,"length":12,"messageText":"'EventEmitter' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/events.d.ts","start":43047,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":3467,"length":6,"messageText":"Duplicate identifier 'events'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/events.d.ts","start":43148,"length":6,"messageText":"'events' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/events.d.ts","start":43146,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[347,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Type, promises, PathLike, NoParamCallback, BufferEncodingOption, OpenMode, Mode, Stats, Dirent, Dir, ReadStream, WriteStream, statSync, lstatSync, WriteFileOptions, F_OK, R_OK, W_OK, X_OK, COPYFILE_EXCL, COPYFILE_FICLONE, COPYFILE_FICLONE_FORCE, O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_EXCL, O_NOCTTY, O_TRUNC, O_APPEND, O_DIRECTORY, O_NOATIME, O_NOFOLLOW, O_SYNC, O_DSYNC, O_SYMLINK, O_DIRECT, O_NONBLOCK, S_IFMT, S_IFREG, S_IFDIR, S_IFCHR, S_IFBLK, S_IFIFO, S_IFLNK, S_IFSOCK, S_IRWXU, S_IRUSR, S_IWUSR, S_IXUSR, S_IRWXG, S_IRGRP, S_IWGRP, S_IXGRP, S_IRWXO, S_IROTH, S_IWOTH, S_IXOTH, UV_FS_O_FILEMAP","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/fs.d.ts","start":543,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3328,"length":9,"code":2430,"category":1,"messageText":{"messageText":"Interface 'FSWatcher' incorrectly extends interface 'EventEmitter'.","category":1,"code":2430,"next":[{"messageText":"Types of property 'addListener' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"close\", listener: () => void): this; (event: string, listener: (...args: any[]) => void): this; (e...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}]}}]],[348,[{"start":8642,"length":9,"messageText":"Cannot redeclare block-scoped variable 'constants'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/fs/promises.d.ts","start":21087,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/fs/promises.d.ts","start":21495,"length":9,"messageText":"and here.","category":3,"code":6204}]}]],[349,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeader, RequestListener, Server, OutgoingMessage, ServerResponse, ClientRequest, IncomingMessage, Agent, METHODS, STATUS_CODES, globalAgent, maxHeaderSize","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http.d.ts","start":1556,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":4613,"length":13,"messageText":"All declarations of 'ServerOptions' must have identical type parameters.","category":1,"code":2428}]],[350,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeaders, Http2ServerRequest, Http2ServerResponse, NGHTTP2_SESSION_SERVER, NGHTTP2_SESSION_CLIENT, NGHTTP2_STREAM_STATE_IDLE, NGHTTP2_STREAM_STATE_OPEN, NGHTTP2_STREAM_STATE_RESERVED_LOCAL, NGHTTP2_STREAM_STATE_RESERVED_REMOTE, NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL, NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE, NGHTTP2_STREAM_STATE_CLOSED, NGHTTP2_NO_ERROR, NGHTTP2_PROTOCOL_ERROR, NGHTTP2_INTERNAL_ERROR, NGHTTP2_FLOW_CONTROL_ERROR, NGHTTP2_SETTINGS_TIMEOUT, NGHTTP2_STREAM_CLOSED, NGHTTP2_FRAME_SIZE_ERROR, NGHTTP2_REFUSED_STREAM, NGHTTP2_CANCEL, NGHTTP2_COMPRESSION_ERROR, NGHTTP2_CONNECT_ERROR, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_INADEQUATE_SECURITY, NGHTTP2_HTTP_1_1_REQUIRED, NGHTTP2_ERR_FRAME_SIZE_ERROR, NGHTTP2_FLAG_NONE, NGHTTP2_FLAG_END_STREAM, NGHTTP2_FLAG_END_HEADERS, NGHTTP2_FLAG_ACK, NGHTTP2_FLAG_PADDED, NGHTTP2_FLAG_PRIORITY, DEFAULT_SETTINGS_HEADER_TABLE_SIZE, DEFAULT_SETTINGS_ENABLE_PUSH, DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE, DEFAULT_SETTINGS_MAX_FRAME_SIZE, MAX_MAX_FRAME_SIZE, MIN_MAX_FRAME_SIZE, MAX_INITIAL_WINDOW_SIZE, NGHTTP2_DEFAULT_WEIGHT, NGHTTP2_SETTINGS_HEADER_TABLE_SIZE, NGHTTP2_SETTINGS_ENABLE_PUSH, NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS, NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE, NGHTTP2_SETTINGS_MAX_FRAME_SIZE, NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE, PADDING_STRATEGY_NONE, PADDING_STRATEGY_MAX, PADDING_STRATEGY_CALLBACK, HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_SCHEME, HTTP2_HEADER_PATH, HTTP2_HEADER_ACCEPT_CHARSET, HTTP2_HEADER_ACCEPT_ENCODING, HTTP2_HEADER_ACCEPT_LANGUAGE, HTTP2_HEADER_ACCEPT_RANGES, HTTP2_HEADER_ACCEPT, HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, HTTP2_HEADER_AGE, HTTP2_HEADER_ALLOW, HTTP2_HEADER_AUTHORIZATION, HTTP2_HEADER_CACHE_CONTROL, HTTP2_HEADER_CONNECTION, HTTP2_HEADER_CONTENT_DISPOSITION, HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_LANGUAGE, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_CONTENT_LOCATION, HTTP2_HEADER_CONTENT_MD5, HTTP2_HEADER_CONTENT_RANGE, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_COOKIE, HTTP2_HEADER_DATE, HTTP2_HEADER_ETAG, HTTP2_HEADER_EXPECT, HTTP2_HEADER_EXPIRES, HTTP2_HEADER_FROM, HTTP2_HEADER_HOST, HTTP2_HEADER_IF_MATCH, HTTP2_HEADER_IF_MODIFIED_SINCE, HTTP2_HEADER_IF_NONE_MATCH, HTTP2_HEADER_IF_RANGE, HTTP2_HEADER_IF_UNMODIFIED_SINCE, HTTP2_HEADER_LAST_MODIFIED, HTTP2_HEADER_LINK, HTTP2_HEADER_LOCATION, HTTP2_HEADER_MAX_FORWARDS, HTTP2_HEADER_PREFER, HTTP2_HEADER_PROXY_AUTHENTICATE, HTTP2_HEADER_PROXY_AUTHORIZATION, HTTP2_HEADER_RANGE, HTTP2_HEADER_REFERER, HTTP2_HEADER_REFRESH, HTTP2_HEADER_RETRY_AFTER, HTTP2_HEADER_SERVER, HTTP2_HEADER_SET_COOKIE, HTTP2_HEADER_STRICT_TRANSPORT_SECURITY, HTTP2_HEADER_TRANSFER_ENCODING, HTTP2_HEADER_TE, HTTP2_HEADER_UPGRADE, HTTP2_HEADER_USER_AGENT, HTTP2_HEADER_VARY, HTTP2_HEADER_VIA, HTTP2_HEADER_WWW_AUTHENTICATE, HTTP2_HEADER_HTTP2_SETTINGS, HTTP2_HEADER_KEEP_ALIVE, HTTP2_HEADER_PROXY_CONNECTION, HTTP2_METHOD_ACL, HTTP2_METHOD_BASELINE_CONTROL, HTTP2_METHOD_BIND, HTTP2_METHOD_CHECKIN, HTTP2_METHOD_CHECKOUT, HTTP2_METHOD_CONNECT, HTTP2_METHOD_COPY, HTTP2_METHOD_DELETE, HTTP2_METHOD_GET, HTTP2_METHOD_HEAD, HTTP2_METHOD_LABEL, HTTP2_METHOD_LINK, HTTP2_METHOD_LOCK, HTTP2_METHOD_MERGE, HTTP2_METHOD_MKACTIVITY, HTTP2_METHOD_MKCALENDAR, HTTP2_METHOD_MKCOL, HTTP2_METHOD_MKREDIRECTREF, HTTP2_METHOD_MKWORKSPACE, HTTP2_METHOD_MOVE, HTTP2_METHOD_OPTIONS, HTTP2_METHOD_ORDERPATCH, HTTP2_METHOD_PATCH, HTTP2_METHOD_POST, HTTP2_METHOD_PRI, HTTP2_METHOD_PROPFIND, HTTP2_METHOD_PROPPATCH, HTTP2_METHOD_PUT, HTTP2_METHOD_REBIND, HTTP2_METHOD_REPORT, HTTP2_METHOD_SEARCH, HTTP2_METHOD_TRACE, HTTP2_METHOD_UNBIND, HTTP2_METHOD_UNCHECKOUT, HTTP2_METHOD_UNLINK, HTTP2_METHOD_UNLOCK, HTTP2_METHOD_UPDATE, HTTP2_METHOD_UPDATEREDIRECTREF, HTTP2_METHOD_VERSION_CONTROL, HTTP_STATUS_CONTINUE, HTTP_STATUS_SWITCHING_PROTOCOLS, HTTP_STATUS_PROCESSING, HTTP_STATUS_OK, HTTP_STATUS_CREATED, HTTP_STATUS_ACCEPTED, HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION, HTTP_STATUS_NO_CONTENT, HTTP_STATUS_RESET_CONTENT, HTTP_STATUS_PARTIAL_CONTENT, HTTP_STATUS_MULTI_STATUS, HTTP_STATUS_ALREADY_REPORTED, HTTP_STATUS_IM_USED, HTTP_STATUS_MULTIPLE_CHOICES, HTTP_STATUS_MOVED_PERMANENTLY, HTTP_STATUS_FOUND, HTTP_STATUS_SEE_OTHER, HTTP_STATUS_NOT_MODIFIED, HTTP_STATUS_USE_PROXY, HTTP_STATUS_TEMPORARY_REDIRECT, HTTP_STATUS_PERMANENT_REDIRECT, HTTP_STATUS_BAD_REQUEST, HTTP_STATUS_UNAUTHORIZED, HTTP_STATUS_PAYMENT_REQUIRED, HTTP_STATUS_FORBIDDEN, HTTP_STATUS_NOT_FOUND, HTTP_STATUS_METHOD_NOT_ALLOWED, HTTP_STATUS_NOT_ACCEPTABLE, HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED, HTTP_STATUS_REQUEST_TIMEOUT, HTTP_STATUS_CONFLICT, HTTP_STATUS_GONE, HTTP_STATUS_LENGTH_REQUIRED, HTTP_STATUS_PRECONDITION_FAILED, HTTP_STATUS_PAYLOAD_TOO_LARGE, HTTP_STATUS_URI_TOO_LONG, HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE, HTTP_STATUS_RANGE_NOT_SATISFIABLE, HTTP_STATUS_EXPECTATION_FAILED, HTTP_STATUS_TEAPOT, HTTP_STATUS_MISDIRECTED_REQUEST, HTTP_STATUS_UNPROCESSABLE_ENTITY, HTTP_STATUS_LOCKED, HTTP_STATUS_FAILED_DEPENDENCY, HTTP_STATUS_UNORDERED_COLLECTION, HTTP_STATUS_UPGRADE_REQUIRED, HTTP_STATUS_PRECONDITION_REQUIRED, HTTP_STATUS_TOO_MANY_REQUESTS, HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE, HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS, HTTP_STATUS_INTERNAL_SERVER_ERROR, HTTP_STATUS_NOT_IMPLEMENTED, HTTP_STATUS_BAD_GATEWAY, HTTP_STATUS_SERVICE_UNAVAILABLE, HTTP_STATUS_GATEWAY_TIMEOUT, HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED, HTTP_STATUS_VARIANT_ALSO_NEGOTIATES, HTTP_STATUS_INSUFFICIENT_STORAGE, HTTP_STATUS_LOOP_DETECTED, HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED, HTTP_STATUS_NOT_EXTENDED, HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":298,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[351,[{"start":169,"length":13,"messageText":"Duplicate identifier 'ServerOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":369,"length":13,"messageText":"'ServerOptions' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":369,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":450,"length":14,"messageText":"Duplicate identifier 'RequestOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":672,"length":14,"messageText":"'RequestOptions' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":672,"length":14,"messageText":"and here.","category":3,"code":6204}]},{"start":967,"length":5,"messageText":"Duplicate identifier 'Agent'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":1326,"length":5,"messageText":"'Agent' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":1326,"length":5,"messageText":"and here.","category":3,"code":6204}]},{"start":1091,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":1449,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":1787,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":1449,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":1787,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1322,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":1449,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":1787,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":1449,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":1787,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":14527,"length":11,"messageText":"Cannot redeclare block-scoped variable 'globalAgent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/https.d.ts","start":24696,"length":11,"messageText":"'globalAgent' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/https.d.ts","start":24696,"length":11,"messageText":"and here.","category":3,"code":6204}]}]],[352,[{"start":321,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ScriptId, RemoteObjectId, UnserializableValue, ExecutionContextId, Timestamp, UniqueDebuggerId, BreakpointId, CallFrameId, HeapSnapshotObjectId, WorkerID, SessionID, Session","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/inspector.d.ts","start":524,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":85565,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":85744,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":85941,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":86188,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":86453,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":86629,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":86861,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87086,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87377,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87695,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87932,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88197,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88486,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88707,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88861,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89115,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89281,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89448,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89619,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89705,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90203,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90499,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90742,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91071,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91228,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91461,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91794,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92231,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95637,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95807,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95995,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":96233,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":96489,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":96656,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":96879,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":97095,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":97377,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":97686,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":97914,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":98170,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":98450,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":98662,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":98807,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99052,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99209,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99367,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99529,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99606,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100095,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100382,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100616,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100936,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101084,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101308,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101632,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102060,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102144,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102316,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102506,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102746,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103004,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103173,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103398,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103616,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103900,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104211,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104441,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104699,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104981,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105195,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105342,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105589,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105748,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105908,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106072,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106151,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106642,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106931,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107167,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107489,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107639,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107865,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108191,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108621,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108707,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108890,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109091,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109342,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109611,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109791,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110027,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110256,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110551,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110873,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111114,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111383,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111676,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111901,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112059,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112317,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112487,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112658,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112833,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112923,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113425,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113725,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113972,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114305,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114466,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114703,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115040,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115481,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115578,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115765,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115970,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116225,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116498,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116682,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116922,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117155,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117454,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117780,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118025,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118298,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118595,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118824,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118986,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119248,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119422,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119597,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119776,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119870,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120376,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120680,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120931,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121268,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121433,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121674,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122015,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122460,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<{}>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", listener...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123861,"length":22,"messageText":"An export assignment cannot be used in a module with other exported elements.","category":1,"code":2309}]],[353,[{"start":1633,"length":6,"messageText":"Duplicate identifier 'Module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/module.d.ts","start":13117,"length":6,"messageText":"'Module' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/module.d.ts","start":18211,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1726,"length":6,"messageText":"Duplicate identifier 'module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/module.d.ts","start":13210,"length":6,"messageText":"'module' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/module.d.ts","start":18304,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[354,[{"start":148,"length":14,"messageText":"Duplicate identifier 'LookupFunction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":540,"length":14,"messageText":"'LookupFunction' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":540,"length":14,"messageText":"and here.","category":3,"code":6204}]},{"start":1979,"length":17,"messageText":"Duplicate identifier 'SocketConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":2425,"length":17,"messageText":"'SocketConnectOpts' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":2425,"length":17,"messageText":"and here.","category":3,"code":6204}]},{"start":2053,"length":16,"messageText":"Duplicate identifier 'SocketReadyState'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":2499,"length":16,"messageText":"'SocketReadyState' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":2499,"length":16,"messageText":"and here.","category":3,"code":6204}]},{"start":2141,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":3299,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":3299,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":9941,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":25851,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":25851,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":11341,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11419,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11484,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11568,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11643,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11970,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12039,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12095,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12170,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12236,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12297,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12368,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12426,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12503,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12571,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12634,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12716,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12785,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12873,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12952,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13026,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13112,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13185,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13277,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13360,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; }' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13707,"length":14,"messageText":"Duplicate identifier 'NetConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":38277,"length":14,"messageText":"'NetConnectOpts' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":38277,"length":14,"messageText":"and here.","category":3,"code":6204}]}]],[355,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: NetworkInterfaceInfo, SignalConstants, UV_UDP_REUSEADDR, E2BIG, EACCES, EADDRINUSE, EADDRNOTAVAIL, EAFNOSUPPORT, EAGAIN, EALREADY, EBADF, EBADMSG, EBUSY, ECANCELED, ECHILD, ECONNABORTED, ECONNREFUSED, ECONNRESET, EDEADLK, EDESTADDRREQ, EDOM, EDQUOT, EEXIST, EFAULT, EFBIG, EHOSTUNREACH, EIDRM, EILSEQ, EINPROGRESS, EINTR, EINVAL, EIO, EISCONN, EISDIR, ELOOP, EMFILE, EMLINK, EMSGSIZE, EMULTIHOP, ENAMETOOLONG, ENETDOWN, ENETRESET, ENETUNREACH, ENFILE, ENOBUFS, ENODATA, ENODEV, ENOENT, ENOEXEC, ENOLCK, ENOLINK, ENOMEM, ENOMSG, ENOPROTOOPT, ENOSPC, ENOSR, ENOSTR, ENOSYS, ENOTCONN, ENOTDIR, ENOTEMPTY, ENOTSOCK, ENOTSUP, ENOTTY, ENXIO, EOPNOTSUPP, EOVERFLOW, EPERM, EPIPE, EPROTO, EPROTONOSUPPORT, EPROTOTYPE, ERANGE, EROFS, ESPIPE, ESRCH, ESTALE, ETIME, ETIMEDOUT, ETXTBSY, EWOULDBLOCK, EXDEV, WSAEINTR, WSAEBADF, WSAEACCES, WSAEFAULT, WSAEINVAL, WSAEMFILE, WSAEWOULDBLOCK, WSAEINPROGRESS, WSAEALREADY, WSAENOTSOCK, WSAEDESTADDRREQ, WSAEMSGSIZE, WSAEPROTOTYPE, WSAENOPROTOOPT, WSAEPROTONOSUPPORT, WSAESOCKTNOSUPPORT, WSAEOPNOTSUPP, WSAEPFNOSUPPORT, WSAEAFNOSUPPORT, WSAEADDRINUSE, WSAEADDRNOTAVAIL, WSAENETDOWN, WSAENETUNREACH, WSAENETRESET, WSAECONNABORTED, WSAECONNRESET, WSAENOBUFS, WSAEISCONN, WSAENOTCONN, WSAESHUTDOWN, WSAETOOMANYREFS, WSAETIMEDOUT, WSAECONNREFUSED, WSAELOOP, WSAENAMETOOLONG, WSAEHOSTDOWN, WSAEHOSTUNREACH, WSAENOTEMPTY, WSAEPROCLIM, WSAEUSERS, WSAEDQUOT, WSAESTALE, WSAEREMOTE, WSASYSNOTREADY, WSAVERNOTSUPPORTED, WSANOTINITIALISED, WSAEDISCON, WSAENOMORE, WSAECANCELLED, WSAEINVALIDPROCTABLE, WSAEINVALIDPROVIDER, WSAEPROVIDERFAILEDINIT, WSASYSCALLFAILURE, WSASERVICE_NOT_FOUND, WSATYPE_NOT_FOUND, WSA_E_NO_MORE, WSA_E_CANCELLED, WSAEREFUSED, PRIORITY_LOW, PRIORITY_BELOW_NORMAL, PRIORITY_NORMAL, PRIORITY_ABOVE_NORMAL, PRIORITY_HIGH, PRIORITY_HIGHEST, EOL","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":245,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[356,[{"start":7032,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":7948,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8033,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":7948,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8033,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":7117,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":7948,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8033,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":7948,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8033,"length":4,"messageText":"and here.","category":3,"code":6204}]}]],[357,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: EntryType, PerformanceEntry, PerformanceNodeTiming, PerformanceObserverEntryList, PerformanceObserverCallback, PerformanceObserver, NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, performance","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","start":1157,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: EntryType, PerformanceObserverCallback, PerformanceObserver, NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, performance","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","start":1157,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[358,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: process, Platform, Signals, UncaughtExceptionOrigin, MultipleResolveType, BeforeExitListener, DisconnectListener, ExitListener, RejectionHandledListener, UncaughtExceptionListener, UnhandledRejectionListener, WarningListener, MessageListener, SignalsListener, MultipleResolveListener","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/process.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":7821,"length":7,"code":2430,"category":1,"messageText":{"messageText":"Interface 'Process' incorrectly extends interface 'EventEmitter<DefaultEventMap>'.","category":1,"code":2430,"next":[{"messageText":"Types of property 'addListener' are incompatible.","category":1,"code":2326,"next":[{"messageText":"Type '{ (event: \"beforeExit\", listener: BeforeExitListener): this; (event: \"disconnect\", listener: DisconnectListener): this; (event: \"exit\", listener: ExitListener): this; (event: \"rejectionHandled\", listener: RejectionHandledListener): this; (event: \"uncaughtException\", listener: UncaughtExceptionListener): this; (event...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"beforeExit\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"beforeExit\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"beforeExit\"'.","category":1,"code":2322}]}]}]}]}]}]}},{"start":9510,"length":7,"messageText":"All declarations of 'version' must have identical modifiers.","category":1,"code":2687},{"start":9543,"length":8,"messageText":"All declarations of 'versions' must have identical modifiers.","category":1,"code":2687},{"start":9586,"length":6,"messageText":"All declarations of 'config' must have identical modifiers.","category":1,"code":2687},{"start":10771,"length":3,"messageText":"All declarations of 'pid' must have identical modifiers.","category":1,"code":2687},{"start":10800,"length":4,"messageText":"All declarations of 'ppid' must have identical modifiers.","category":1,"code":2687},{"start":10861,"length":4,"messageText":"All declarations of 'arch' must have identical modifiers.","category":1,"code":2687},{"start":10891,"length":8,"messageText":"All declarations of 'platform' must have identical modifiers.","category":1,"code":2687},{"start":11229,"length":7,"messageText":"All declarations of 'release' must have identical modifiers.","category":1,"code":2687},{"start":13031,"length":6,"messageText":"All declarations of 'report' must have identical modifiers.","category":1,"code":2687}]],[359,[{"start":2228,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","start":4152,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","start":4178,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","start":4152,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","start":4178,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":2254,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","start":4152,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","start":4178,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","start":4152,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","start":4178,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":3451,"length":7,"messageText":"Cannot redeclare block-scoped variable 'version'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/punycode.d.ts","start":5371,"length":7,"messageText":"'version' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/punycode.d.ts","start":5371,"length":7,"messageText":"and here.","category":3,"code":6204}]}]],[360,[{"start":953,"length":6,"messageText":"Cannot redeclare block-scoped variable 'encode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/querystring.d.ts","start":5526,"length":6,"messageText":"'encode' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/querystring.d.ts","start":5526,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1083,"length":6,"messageText":"Cannot redeclare block-scoped variable 'decode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/querystring.d.ts","start":5656,"length":6,"messageText":"'decode' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/querystring.d.ts","start":5656,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[361,[{"start":294,"length":9,"messageText":"Duplicate identifier 'Interface'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":2180,"length":9,"messageText":"'Interface' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":2180,"length":9,"messageText":"and here.","category":3,"code":6204}]},{"start":2443,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2521,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2586,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2663,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2728,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2794,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2861,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":2927,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3352,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3421,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3477,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3545,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3601,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3658,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3716,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3773,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3832,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3903,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":3961,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4031,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4089,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4148,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4208,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4267,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4328,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4410,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4479,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4560,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4629,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4699,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4770,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4840,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4912,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":4998,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5071,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5156,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5229,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5303,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5378,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5452,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":5600,"length":8,"messageText":"Duplicate identifier 'ReadLine'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":14241,"length":8,"messageText":"'ReadLine' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":14240,"length":8,"messageText":"and here.","category":3,"code":6204}]},{"start":5678,"length":9,"messageText":"Duplicate identifier 'Completer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":14325,"length":9,"messageText":"'Completer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":14324,"length":9,"messageText":"and here.","category":3,"code":6204}]},{"start":5734,"length":14,"messageText":"Duplicate identifier 'AsyncCompleter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":14388,"length":14,"messageText":"'AsyncCompleter' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":14387,"length":14,"messageText":"and here.","category":3,"code":6204}]},{"start":5850,"length":15,"messageText":"Duplicate identifier 'CompleterResult'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":14534,"length":15,"messageText":"'CompleterResult' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":14533,"length":15,"messageText":"and here.","category":3,"code":6204}]},{"start":6758,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":21034,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":23330,"length":9,"messageText":"and here.","category":3,"code":6204}]}]],[362,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: REPLEval, REPLWriter, writer, REPLCommandAction, REPLServer, REPL_MODE_SLOPPY, REPL_MODE_STRICT, Recoverable","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/repl.d.ts","start":328,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[363,[{"start":26881,"length":8,"messageText":"Duplicate identifier 'internal'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream.d.ts","start":84362,"length":8,"messageText":"'internal' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream.d.ts","start":84360,"length":8,"messageText":"and here.","category":3,"code":6204}]},{"start":26976,"length":6,"messageText":"Duplicate identifier 'stream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream.d.ts","start":84457,"length":6,"messageText":"'stream' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream.d.ts","start":84455,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[364,[{"start":44,"length":13,"messageText":"Duplicate identifier 'StringDecoder'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/string_decoder.d.ts","start":1533,"length":13,"messageText":"'StringDecoder' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/string_decoder.d.ts","start":1533,"length":13,"messageText":"and here.","category":3,"code":6204}]}]],[365,[{"start":39,"length":10,"messageText":"Cannot redeclare block-scoped variable 'setTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1128,"length":10,"messageText":"'setTimeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1128,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":146,"length":10,"messageText":"Cannot redeclare block-scoped variable 'setTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1128,"length":10,"messageText":"'setTimeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1128,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":306,"length":12,"messageText":"Cannot redeclare block-scoped variable 'clearTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1174,"length":12,"messageText":"'clearTimeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1174,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":396,"length":11,"messageText":"Cannot redeclare block-scoped variable 'setInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1224,"length":11,"messageText":"'setInterval' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1224,"length":11,"messageText":"and here.","category":3,"code":6204}]},{"start":503,"length":13,"messageText":"Cannot redeclare block-scoped variable 'clearInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1272,"length":13,"messageText":"'clearInterval' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1272,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":595,"length":12,"messageText":"Cannot redeclare block-scoped variable 'setImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1324,"length":12,"messageText":"'setImmediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1324,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":693,"length":12,"messageText":"Cannot redeclare block-scoped variable 'setImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1324,"length":12,"messageText":"'setImmediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1324,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":833,"length":14,"messageText":"Cannot redeclare block-scoped variable 'clearImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":1374,"length":14,"messageText":"'clearImmediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":1374,"length":14,"messageText":"and here.","category":3,"code":6204}]}]],[366,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: CLIENT_RENEG_LIMIT, CLIENT_RENEG_WINDOW, TLSSocket, Server, SecureVersion, DEFAULT_ECDH_CURVE, DEFAULT_MAX_VERSION, DEFAULT_MIN_VERSION, rootCertificates","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tls.d.ts","start":332,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":713,"length":14,"messageText":"All declarations of 'subjectaltname' must have identical modifiers.","category":1,"code":2687},{"start":745,"length":10,"messageText":"All declarations of 'infoAccess' must have identical modifiers.","category":1,"code":2687},{"start":788,"length":7,"messageText":"All declarations of 'modulus' must have identical modifiers.","category":1,"code":2687},{"start":813,"length":8,"messageText":"All declarations of 'exponent' must have identical modifiers.","category":1,"code":2687},{"start":954,"length":13,"messageText":"All declarations of 'ext_key_usage' must have identical modifiers.","category":1,"code":2687}]],[368,[{"start":108,"length":10,"messageText":"Duplicate identifier 'ReadStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tty.d.ts","start":1720,"length":10,"messageText":"'ReadStream' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tty.d.ts","start":1720,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":431,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tty.d.ts","start":3286,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tty.d.ts","start":3286,"length":9,"messageText":"and here.","category":3,"code":6204}]},{"start":465,"length":11,"messageText":"Duplicate identifier 'WriteStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tty.d.ts","start":3609,"length":11,"messageText":"'WriteStream' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tty.d.ts","start":3609,"length":11,"messageText":"and here.","category":3,"code":6204}]}]],[369,[{"start":3993,"length":3,"messageText":"Duplicate identifier 'URL'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/url.d.ts","start":19317,"length":3,"messageText":"'URL' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/url.d.ts","start":19317,"length":3,"messageText":"and here.","category":3,"code":6204}]},{"start":4450,"length":15,"messageText":"Duplicate identifier 'URLSearchParams'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/url.d.ts","start":35941,"length":15,"messageText":"'URLSearchParams' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/url.d.ts","start":36113,"length":15,"messageText":"and here.","category":3,"code":6204}]}]],[370,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: colors, styles, defaultOptions, replDefaults, custom, Style, CustomInspectFunction, DebugLoggerFunction, debug, CustomPromisify, TextDecoder, TextEncoder","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/util.d.ts","start":303,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: colors, styles, defaultOptions, replDefaults, custom, Style, CustomInspectFunction, DebugLoggerFunction, debug, CustomPromisify, TextDecoder, types, TextEncoder","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/util.d.ts","start":303,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[371,[{"start":375,"length":20,"messageText":"Duplicate identifier 'DoesZapCodeSpaceFlag'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":674,"length":20,"messageText":"'DoesZapCodeSpaceFlag' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":674,"length":20,"messageText":"and here.","category":3,"code":6204}]},{"start":2550,"length":10,"messageText":"Duplicate identifier 'Serializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":13713,"length":10,"messageText":"'Serializer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":13713,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":4361,"length":17,"messageText":"Duplicate identifier 'DefaultSerializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":15956,"length":17,"messageText":"'DefaultSerializer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":15956,"length":17,"messageText":"and here.","category":3,"code":6204}]},{"start":4417,"length":12,"messageText":"Duplicate identifier 'Deserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":16043,"length":12,"messageText":"'Deserializer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":16043,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":6414,"length":19,"messageText":"Duplicate identifier 'DefaultDeserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":18330,"length":19,"messageText":"'DefaultDeserializer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":18330,"length":19,"messageText":"and here.","category":3,"code":6204}]}]],[372,[{"start":4271,"length":17,"messageText":"Duplicate identifier 'MeasureMemoryMode'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":7481,"length":17,"messageText":"'MeasureMemoryMode' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":7481,"length":17,"messageText":"and here.","category":3,"code":6204}]},{"start":4661,"length":6,"messageText":"Duplicate identifier 'Script'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":8093,"length":6,"messageText":"'Script' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":8093,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[373,[{"start":1736,"length":4,"messageText":"Duplicate identifier 'WASI'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/wasi.d.ts","start":5197,"length":4,"messageText":"'WASI' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/wasi.d.ts","start":5197,"length":4,"messageText":"and here.","category":3,"code":6204}]}]],[374,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: isMainThread, parentPort, resourceLimits, SHARE_ENV, threadId, workerData, MessageChannel, TransferListItem, MessagePort, Worker","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":2151,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[375,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: InputType, CompressCallback, BROTLI_DECODE, BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2, BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS, BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2, BROTLI_DECODER_ERROR_FORMAT_CL_SPACE, BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT, BROTLI_DECODER_ERROR_FORMAT_DICTIONARY, BROTLI_DECODER_ERROR_FORMAT_DISTANCE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE, BROTLI_DECODER_ERROR_FORMAT_PADDING_1, BROTLI_DECODER_ERROR_FORMAT_PADDING_2, BROTLI_DECODER_ERROR_FORMAT_RESERVED, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME, BROTLI_DECODER_ERROR_FORMAT_TRANSFORM, BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS, BROTLI_DECODER_ERROR_INVALID_ARGUMENTS, BROTLI_DECODER_ERROR_UNREACHABLE, BROTLI_DECODER_NEEDS_MORE_INPUT, BROTLI_DECODER_NEEDS_MORE_OUTPUT, BROTLI_DECODER_NO_ERROR, BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION, BROTLI_DECODER_PARAM_LARGE_WINDOW, BROTLI_DECODER_RESULT_ERROR, BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT, BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT, BROTLI_DECODER_RESULT_SUCCESS, BROTLI_DECODER_SUCCESS, BROTLI_DEFAULT_MODE, BROTLI_DEFAULT_QUALITY, BROTLI_DEFAULT_WINDOW, BROTLI_ENCODE, BROTLI_LARGE_MAX_WINDOW_BITS, BROTLI_MAX_INPUT_BLOCK_BITS, BROTLI_MAX_QUALITY, BROTLI_MAX_WINDOW_BITS, BROTLI_MIN_INPUT_BLOCK_BITS, BROTLI_MIN_QUALITY, BROTLI_MIN_WINDOW_BITS, BROTLI_MODE_FONT, BROTLI_MODE_GENERIC, BROTLI_MODE_TEXT, BROTLI_OPERATION_EMIT_METADATA, BROTLI_OPERATION_FINISH, BROTLI_OPERATION_FLUSH, BROTLI_OPERATION_PROCESS, BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING, BROTLI_PARAM_LARGE_WINDOW, BROTLI_PARAM_LGBLOCK, BROTLI_PARAM_LGWIN, BROTLI_PARAM_MODE, BROTLI_PARAM_NDIRECT, BROTLI_PARAM_NPOSTFIX, BROTLI_PARAM_QUALITY, BROTLI_PARAM_SIZE_HINT, DEFLATE, DEFLATERAW, GUNZIP, GZIP, INFLATE, INFLATERAW, UNZIP, Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK, Z_TREES, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_ERRNO, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR, Z_VERSION_ERROR, Z_NO_COMPRESSION, Z_BEST_SPEED, Z_BEST_COMPRESSION, Z_DEFAULT_COMPRESSION, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY, Z_DEFAULT_WINDOWBITS, Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_MIN_CHUNK, Z_MAX_CHUNK, Z_DEFAULT_CHUNK, Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_MEMLEVEL, Z_MIN_LEVEL, Z_MAX_LEVEL, Z_DEFAULT_LEVEL, ZLIB_VERNUM, Z_BINARY, Z_TEXT, Z_ASCII, Z_UNKNOWN, Z_DEFLATED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/zlib.d.ts","start":2494,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[384,[{"start":3013,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3112,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3241,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3375,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3442,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3543,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3674,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3810,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3879,"length":3,"code":2416,"category":1,"messageText":{"messageText":"Property 'off' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":3979,"length":3,"code":2416,"category":1,"messageText":{"messageText":"Property 'off' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4109,"length":3,"code":2416,"category":1,"messageText":{"messageText":"Property 'off' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4244,"length":3,"code":2416,"category":1,"messageText":{"messageText":"Property 'off' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4312,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4420,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4558,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4701,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4776,"length":14,"code":2416,"category":1,"messageText":{"messageText":"Property 'removeListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":4887,"length":14,"code":2416,"category":1,"messageText":{"messageText":"Property 'removeListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5028,"length":14,"code":2416,"category":1,"messageText":{"messageText":"Property 'removeListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5174,"length":14,"code":2416,"category":1,"messageText":{"messageText":"Property 'removeListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5252,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5364,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5506,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5653,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5732,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5848,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":5994,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6145,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", callback: (origin: URL, targets: readonly Dispatcher[]) => void): this; (eventName: \"disconnect\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void): this; (eventName: \"connectionError\", callback: (origin: URL, targets: readonly Dispatcher[], error: UndiciEr...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6228,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'listeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6321,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'listeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6445,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'listeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6574,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'listeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6635,"length":12,"code":2416,"category":1,"messageText":{"messageText":"Property 'rawListeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6731,"length":12,"code":2416,"category":1,"messageText":{"messageText":"Property 'rawListeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6858,"length":12,"code":2416,"category":1,"messageText":{"messageText":"Property 'rawListeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":6990,"length":12,"code":2416,"category":1,"messageText":{"messageText":"Property 'rawListeners' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\"): ((origin: URL, targets: readonly Dispatcher[]) => void)[]; (eventName: \"disconnect\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"connectionError\"): ((origin: URL, targets: readonly Dispatcher[], error: UndiciError) => void)[]; (eventName: \"dr...' is not assignable to type '{ (event: string | symbol): Function[]; <K>(eventName: Key<K, T>): Listener<K, T, Function>[]; <K>(eventName: Key<K, T>): Listener<...>[]; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":7054,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'emit' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", origin: URL, targets: readonly Dispatcher[]): boolean; (eventName: \"disconnect\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"connectionError\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"drain\", origin: U...' is not assignable to type '{ (event: string | symbol, ...args: any[]): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":7138,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'emit' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", origin: URL, targets: readonly Dispatcher[]): boolean; (eventName: \"disconnect\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"connectionError\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"drain\", origin: U...' is not assignable to type '{ (event: string | symbol, ...args: any[]): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":7252,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'emit' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", origin: URL, targets: readonly Dispatcher[]): boolean; (eventName: \"disconnect\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"connectionError\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"drain\", origin: U...' is not assignable to type '{ (event: string | symbol, ...args: any[]): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":7371,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'emit' in type 'Dispatcher' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (eventName: \"connect\", origin: URL, targets: readonly Dispatcher[]): boolean; (eventName: \"disconnect\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"connectionError\", origin: URL, targets: readonly Dispatcher[], error: UndiciError): boolean; (eventName: \"drain\", origin: U...' is not assignable to type '{ (event: string | symbol, ...args: any[]): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; <K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'eventName' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"connect\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"connect\"'.","category":1,"code":2322}]}]}]}]}]}}]],[413,[{"start":8620,"length":11,"messageText":"Subsequent variable declarations must have the same type.  Variable 'AbortSignal' must be of type '{ new (): AbortSignal; prototype: AbortSignal; abort(reason?: any): AbortSignal; timeout(milliseconds: number): AbortSignal; }', but here has type '{ new (): AbortSignal; prototype: AbortSignal; abort(reason?: any): AbortSignal; timeout(milliseconds: number): AbortSignal; any(signals: AbortSignal[]): AbortSignal; }'.","category":1,"code":2403,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":3971,"length":11,"messageText":"'AbortSignal' was also declared here.","category":3,"code":6203}]},{"start":19755,"length":29,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374},{"start":19844,"length":38,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374}]],[414,[{"start":11320,"length":13,"messageText":"Duplicate identifier 'AsyncResource'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/async_hooks.d.ts","start":4341,"length":13,"messageText":"'AsyncResource' was also declared here.","category":3,"code":6203}]},{"start":15844,"length":17,"messageText":"Duplicate identifier 'AsyncLocalStorage'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/async_hooks.d.ts","start":6944,"length":17,"messageText":"'AsyncLocalStorage' was also declared here.","category":3,"code":6203}]}]],[415,[{"start":118,"length":4,"messageText":"Definitions of the following identifiers conflict with those in another file: INSPECT_MAX_BYTES, kMaxLength, kStringMaxLength, constants, TranscodeEncoding, SlowBuffer, Buffer, Blob","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/buffer.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":123,"length":5,"messageText":"Duplicate identifier '_Blob'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":123,"length":5,"messageText":"'_Blob' was also declared here.","category":3,"code":6203}]},{"start":222,"length":5,"messageText":"Duplicate identifier '_File'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":222,"length":5,"messageText":"'_File' was also declared here.","category":3,"code":6203}]},{"start":5507,"length":6,"messageText":"Cannot export 'Buffer'. Only local declarations can be exported from a module.","category":1,"code":2661},{"start":9297,"length":4,"messageText":"Duplicate identifier 'File'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":9297,"length":4,"messageText":"'File' was also declared here.","category":3,"code":6203}]},{"start":9712,"length":4,"messageText":"Duplicate identifier 'atob'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":9712,"length":4,"messageText":"'atob' was also declared here.","category":3,"code":6203}]},{"start":9754,"length":4,"messageText":"Duplicate identifier 'btoa'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":9754,"length":4,"messageText":"'btoa' was also declared here.","category":3,"code":6203}]},{"start":9840,"length":14,"messageText":"Duplicate identifier 'BufferEncoding'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":9840,"length":14,"messageText":"'BufferEncoding' was also declared here.","category":3,"code":6203}]},{"start":9905,"length":14,"messageText":"Duplicate identifier 'BufferEncoding'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2557,"length":14,"messageText":"'BufferEncoding' was also declared here.","category":3,"code":6203}]},{"start":10208,"length":20,"messageText":"Duplicate identifier 'WithImplicitCoercion'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2740,"length":20,"messageText":"'WithImplicitCoercion' was also declared here.","category":3,"code":6203}]},{"start":15618,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":4496,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":85219,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":4496,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[416,[{"start":3685,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":3922,"length":12,"messageText":"Duplicate identifier 'Serializable'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":222,"length":12,"messageText":"'Serializable' was also declared here.","category":3,"code":6203}]},{"start":3991,"length":10,"messageText":"Duplicate identifier 'SendHandle'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":282,"length":10,"messageText":"'SendHandle' was also declared here.","category":3,"code":6203}]},{"start":9701,"length":3,"messageText":"All declarations of 'pid' must have identical modifiers.","category":1,"code":2687},{"start":9701,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'pid' must be of type 'number', but here has type 'number | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":854,"length":3,"messageText":"'pid' was also declared here.","category":3,"code":6203}]},{"start":24855,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":24933,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25048,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25118,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25193,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25307,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25419,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25972,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26147,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26208,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26274,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26379,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26482,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26538,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26609,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26717,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26780,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26848,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26955,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27060,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27118,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27200,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27319,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27393,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27472,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27590,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27706,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27775,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27861,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28019,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28097,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28180,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28337,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28457,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":29654,"length":6,"messageText":"Duplicate identifier 'IOType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/child_process.d.ts","start":29654,"length":6,"messageText":"'IOType' was also declared here.","category":3,"code":6203}]},{"start":29718,"length":12,"messageText":"Duplicate identifier 'StdioOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":6199,"length":12,"messageText":"'StdioOptions' was also declared here.","category":3,"code":6203}]},{"start":29811,"length":17,"messageText":"Duplicate identifier 'SerializationType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":6375,"length":17,"messageText":"'SerializationType' was also declared here.","category":3,"code":6203}]},{"start":30574,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'cwd' must be of type 'string | undefined', but here has type 'string | URL | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":6763,"length":3,"messageText":"'cwd' was also declared here.","category":3,"code":6203}]},{"start":31805,"length":5,"messageText":"Subsequent property declarations must have the same type.  Property 'stdio' must be of type '\"pipe\" | (\"pipe\" | null | undefined)[] | undefined', but here has type 'StdioPipeNamed | StdioPipe[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":7981,"length":5,"messageText":"'stdio' was also declared here.","category":3,"code":6203}]},{"start":31870,"length":9,"messageText":"Duplicate identifier 'StdioNull'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":8060,"length":9,"messageText":"'StdioNull' was also declared here.","category":3,"code":6203}]},{"start":31922,"length":14,"messageText":"Duplicate identifier 'StdioPipeNamed'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/child_process.d.ts","start":31922,"length":14,"messageText":"'StdioPipeNamed' was also declared here.","category":3,"code":6203}]},{"start":31971,"length":9,"messageText":"Duplicate identifier 'StdioPipe'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":8112,"length":9,"messageText":"'StdioPipe' was also declared here.","category":3,"code":6203}]},{"start":48724,"length":17,"messageText":"Duplicate identifier 'ExecFileException'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":16275,"length":17,"messageText":"'ExecFileException' was also declared here.","category":3,"code":6203}]},{"start":67695,"length":8,"messageText":"All declarations of 'encoding' must have identical modifiers.","category":1,"code":2687},{"start":67695,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'encoding' must be of type 'BufferEncoding', but here has type '\"buffer\" | null | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":28194,"length":8,"messageText":"'encoding' was also declared here.","category":3,"code":6203}]}]],[417,[{"start":4808,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'addressType' must be of type 'number | \"udp4\" | \"udp6\"', but here has type '4 | 6 | -1 | \"udp4\" | \"udp6\"'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/cluster.d.ts","start":809,"length":11,"messageText":"'addressType' was also declared here.","category":3,"code":6203}]},{"start":5123,"length":6,"messageText":"Duplicate identifier 'Worker'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/cluster.d.ts","start":893,"length":6,"messageText":"'Worker' was also declared here.","category":3,"code":6203}]},{"start":13934,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14012,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14082,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14159,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14251,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14336,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14514,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14997,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15066,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15127,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15195,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15278,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15354,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15523,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15580,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15651,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15714,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15784,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15869,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15947,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16118,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16177,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16259,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16333,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16414,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16510,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16599,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16781,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16851,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16937,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17015,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17100,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17200,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17293,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17479,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17996,"length":8,"messageText":"All declarations of 'isMaster' must have identical modifiers.","category":1,"code":2687},{"start":18447,"length":8,"messageText":"All declarations of 'isWorker' must have identical modifiers.","category":1,"code":2687},{"start":19800,"length":8,"messageText":"All declarations of 'settings' must have identical modifiers.","category":1,"code":2687},{"start":21937,"length":6,"messageText":"All declarations of 'worker' must have identical modifiers.","category":1,"code":2687},{"start":22784,"length":7,"messageText":"All declarations of 'workers' must have identical modifiers.","category":1,"code":2687},{"start":27890,"length":7,"messageText":"Duplicate identifier 'cluster'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/cluster.d.ts","start":27890,"length":7,"messageText":"'cluster' was also declared here.","category":3,"code":6203}]},{"start":27986,"length":7,"messageText":"Duplicate identifier 'default'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/cluster.d.ts","start":27986,"length":7,"messageText":"'default' was also declared here.","category":3,"code":6203}]}]],[418,[{"start":2594,"length":7,"messageText":"Duplicate identifier 'console'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":86,"length":7,"messageText":"'console' was also declared here.","category":3,"code":6203}]},{"start":2839,"length":7,"messageText":"Subsequent property declarations must have the same type.  Property 'Console' must be of type 'ConsoleConstructor', but here has type 'ConsoleConstructor'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":327,"length":7,"messageText":"'Console' was also declared here.","category":3,"code":6203}]},{"start":20936,"length":28,"messageText":"Duplicate identifier 'export='.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":6206,"length":7,"messageText":"'export=' was also declared here.","category":3,"code":6203}]}]],[419,[{"start":510,"length":3,"messageText":"Duplicate identifier 'exp'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/constants.d.ts","start":495,"length":3,"messageText":"'exp' was also declared here.","category":3,"code":6203}]},{"start":610,"length":9,"messageText":"Duplicate identifier 'constants'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/constants.d.ts","start":595,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203}]}]],[420,[{"start":596,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Certificate, OPENSSL_VERSION_NUMBER, SSL_OP_ALL, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, SSL_OP_CIPHER_SERVER_PREFERENCE, SSL_OP_CISCO_ANYCONNECT, SSL_OP_COOKIE_EXCHANGE, SSL_OP_CRYPTOPRO_TLSEXT_BUG, SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS, SSL_OP_LEGACY_SERVER_CONNECT, SSL_OP_NO_COMPRESSION, SSL_OP_NO_QUERY_MTU, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION, SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TICKET, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_TLS_ROLLBACK_BUG, ENGINE_METHOD_RSA, ENGINE_METHOD_DSA, ENGINE_METHOD_DH, ENGINE_METHOD_RAND, ENGINE_METHOD_EC, ENGINE_METHOD_CIPHERS, ENGINE_METHOD_DIGESTS, ENGINE_METHOD_PKEY_METHS, ENGINE_METHOD_PKEY_ASN1_METHS, ENGINE_METHOD_ALL, ENGINE_METHOD_NONE, DH_CHECK_P_NOT_SAFE_PRIME, DH_CHECK_P_NOT_PRIME, DH_UNABLE_TO_CHECK_GENERATOR, DH_NOT_SUITABLE_GENERATOR, RSA_PKCS1_PADDING, RSA_SSLV23_PADDING, RSA_NO_PADDING, RSA_PKCS1_OAEP_PADDING, RSA_X931_PADDING, RSA_PKCS1_PSS_PADDING, RSA_PSS_SALTLEN_DIGEST, RSA_PSS_SALTLEN_MAX_SIGN, RSA_PSS_SALTLEN_AUTO, POINT_CONVERSION_COMPRESSED, POINT_CONVERSION_UNCOMPRESSED, POINT_CONVERSION_HYBRID, defaultCoreCipherList, defaultCipherList, fips, BinaryToTextEncoding, CharacterEncoding, LegacyCharacterEncoding, Encoding, ECDHKeyFormat, Hash, Hmac, KeyObjectType, KeyObject, CipherCCMTypes, CipherGCMTypes, CipherOCBTypes, BinaryLike, CipherKey, Cipher, Decipher, DSAEncoding, KeyLike, Sign, Verify, DiffieHellman, DiffieHellmanGroup, ECDH, KeyType, KeyFormat, UUID","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/crypto.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":596,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: SSL_OP_ALLOW_NO_DHE_KEX, SSL_OP_NO_ENCRYPT_THEN_MAC, SSL_OP_NO_RENEGOTIATION, SSL_OP_NO_TLSv1_3, SSL_OP_PRIORITIZE_CHACHA, CipherMode, X509Certificate, LargeNumberLike, subtle","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/crypto.d.ts","start":596,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":22153,"length":23,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374}]],[421,[{"start":852,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1223,"length":10,"messageText":"Duplicate identifier 'SocketType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dgram.d.ts","start":469,"length":10,"messageText":"'SocketType' was also declared here.","category":3,"code":6203}]},{"start":3517,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dgram.d.ts","start":1280,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203}]},{"start":24974,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25052,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25117,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25184,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25259,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25328,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25735,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25804,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25860,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25918,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25984,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26044,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26132,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26203,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26261,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26321,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26389,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26451,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26541,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26623,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26692,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26763,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26842,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26915,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27016,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27102,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27175,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27250,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27333,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27410,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}}]],[422,[{"start":2456,"length":15,"messageText":"Duplicate identifier 'ChannelListener'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/diagnostics_channel.d.ts","start":2456,"length":15,"messageText":"'ChannelListener' was also declared here.","category":3,"code":6203}]},{"start":5950,"length":7,"messageText":"Duplicate identifier 'Channel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/diagnostics_channel.d.ts","start":5950,"length":7,"messageText":"'Channel' was also declared here.","category":3,"code":6203}]},{"start":14479,"length":14,"messageText":"Duplicate identifier 'TracingChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/diagnostics_channel.d.ts","start":14479,"length":14,"messageText":"'TracingChannel' was also declared here.","category":3,"code":6203}]}]],[423,[{"start":1781,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ADDRCONFIG, V4MAPPED, ALL, AnyRecordWithTtl, AnyRecord, NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dns.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3013,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'family' must be of type 'number | undefined', but here has type 'number | \"IPv4\" | \"IPv6\" | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dns.d.ts","start":311,"length":6,"messageText":"'family' was also declared here.","category":3,"code":6203}]},{"start":35452,"length":23,"messageText":"Export declaration conflicts with exported declaration of 'promises'.","category":1,"code":2484}]],[424,[{"start":302,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/dns/promises.d.ts","start":302,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[425,[{"start":1235,"length":6,"messageText":"Duplicate identifier 'Domain'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/domain.d.ts","start":507,"length":6,"messageText":"'Domain' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/domain.d.ts","start":549,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[427,[{"start":43049,"length":12,"messageText":"Duplicate identifier 'EventEmitter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/events.d.ts","start":3368,"length":12,"messageText":"'EventEmitter' was also declared here.","category":3,"code":6203}]},{"start":43148,"length":6,"messageText":"Duplicate identifier 'events'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/events.d.ts","start":3467,"length":6,"messageText":"'events' was also declared here.","category":3,"code":6203}]}]],[428,[{"start":543,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: PathOrFileDescriptor, TimeLike, EncodingOption, StatsFs, ReadPosition, WatchEventType, WatchListener, StatsListener, BigIntStatsListener","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/fs.d.ts","start":543,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":543,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Type, promises, PathLike, NoParamCallback, BufferEncodingOption, OpenMode, Mode, Stats, Dirent, Dir, ReadStream, WriteStream, statSync, lstatSync, WriteFileOptions, F_OK, R_OK, W_OK, X_OK, COPYFILE_EXCL, COPYFILE_FICLONE, COPYFILE_FICLONE_FORCE, O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_EXCL, O_NOCTTY, O_TRUNC, O_APPEND, O_DIRECTORY, O_NOATIME, O_NOFOLLOW, O_SYNC, O_DSYNC, O_SYMLINK, O_DIRECT, O_NONBLOCK, S_IFMT, S_IFREG, S_IFDIR, S_IFCHR, S_IFBLK, S_IFIFO, S_IFLNK, S_IFSOCK, S_IRWXU, S_IRUSR, S_IWUSR, S_IXUSR, S_IRWXG, S_IRGRP, S_IWGRP, S_IXGRP, S_IRWXO, S_IROTH, S_IWOTH, S_IXOTH, UV_FS_O_FILEMAP","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":621,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":112311,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'position' must be of type 'number | null | undefined', but here has type 'ReadPosition | null | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs.d.ts","start":85014,"length":8,"messageText":"'position' was also declared here.","category":3,"code":6203}]}]],[429,[{"start":462,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":21087,"length":9,"messageText":"Cannot redeclare block-scoped variable 'constants'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs/promises.d.ts","start":8642,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203}]}]],[430,[{"start":1556,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeader, RequestListener, Server, OutgoingMessage, ServerResponse, ClientRequest, IncomingMessage, Agent, METHODS, STATUS_CODES, globalAgent, maxHeaderSize","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":9091,"length":16,"messageText":"Subsequent property declarations must have the same type.  Property 'createConnection' must be of type '((options: ClientRequestArgs, oncreate: (err: Error, socket: Socket) => void) => Socket) | undefined', but here has type '((options: ClientRequestArgs, oncreate: (err: Error | null, socket: Duplex) => void) => Duplex | null | undefined) | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":4400,"length":16,"messageText":"'createConnection' was also declared here.","category":3,"code":6203}]},{"start":10322,"length":13,"messageText":"All declarations of 'ServerOptions' must have identical type parameters.","category":1,"code":2428},{"start":14178,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":14510,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":14647,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":14711,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":14765,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":19595,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":19695,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":20175,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":21938,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":22029,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":22438,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":22985,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":23078,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":23530,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24180,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24284,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24815,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":25500,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":25608,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":26155,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":70826,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":70923,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":70951,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":71109,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":71204,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":71266,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":71300,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":85482,"length":9,"messageText":"Cannot redeclare block-scoped variable 'WebSocket'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http.d.ts","start":86919,"length":9,"messageText":"'WebSocket' was also declared here.","category":3,"code":6203}]},{"start":85575,"length":10,"messageText":"Cannot redeclare block-scoped variable 'CloseEvent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http.d.ts","start":87012,"length":10,"messageText":"'CloseEvent' was also declared here.","category":3,"code":6203}]},{"start":85670,"length":12,"messageText":"Cannot redeclare block-scoped variable 'MessageEvent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http.d.ts","start":87107,"length":12,"messageText":"'MessageEvent' was also declared here.","category":3,"code":6203}]}]],[431,[{"start":298,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeaders, Http2ServerRequest, Http2ServerResponse, NGHTTP2_SESSION_SERVER, NGHTTP2_SESSION_CLIENT, NGHTTP2_STREAM_STATE_IDLE, NGHTTP2_STREAM_STATE_OPEN, NGHTTP2_STREAM_STATE_RESERVED_LOCAL, NGHTTP2_STREAM_STATE_RESERVED_REMOTE, NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL, NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE, NGHTTP2_STREAM_STATE_CLOSED, NGHTTP2_NO_ERROR, NGHTTP2_PROTOCOL_ERROR, NGHTTP2_INTERNAL_ERROR, NGHTTP2_FLOW_CONTROL_ERROR, NGHTTP2_SETTINGS_TIMEOUT, NGHTTP2_STREAM_CLOSED, NGHTTP2_FRAME_SIZE_ERROR, NGHTTP2_REFUSED_STREAM, NGHTTP2_CANCEL, NGHTTP2_COMPRESSION_ERROR, NGHTTP2_CONNECT_ERROR, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_INADEQUATE_SECURITY, NGHTTP2_HTTP_1_1_REQUIRED, NGHTTP2_ERR_FRAME_SIZE_ERROR, NGHTTP2_FLAG_NONE, NGHTTP2_FLAG_END_STREAM, NGHTTP2_FLAG_END_HEADERS, NGHTTP2_FLAG_ACK, NGHTTP2_FLAG_PADDED, NGHTTP2_FLAG_PRIORITY, DEFAULT_SETTINGS_HEADER_TABLE_SIZE, DEFAULT_SETTINGS_ENABLE_PUSH, DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE, DEFAULT_SETTINGS_MAX_FRAME_SIZE, MAX_MAX_FRAME_SIZE, MIN_MAX_FRAME_SIZE, MAX_INITIAL_WINDOW_SIZE, NGHTTP2_DEFAULT_WEIGHT, NGHTTP2_SETTINGS_HEADER_TABLE_SIZE, NGHTTP2_SETTINGS_ENABLE_PUSH, NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS, NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE, NGHTTP2_SETTINGS_MAX_FRAME_SIZE, NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE, PADDING_STRATEGY_NONE, PADDING_STRATEGY_MAX, PADDING_STRATEGY_CALLBACK, HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_SCHEME, HTTP2_HEADER_PATH, HTTP2_HEADER_ACCEPT_CHARSET, HTTP2_HEADER_ACCEPT_ENCODING, HTTP2_HEADER_ACCEPT_LANGUAGE, HTTP2_HEADER_ACCEPT_RANGES, HTTP2_HEADER_ACCEPT, HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, HTTP2_HEADER_AGE, HTTP2_HEADER_ALLOW, HTTP2_HEADER_AUTHORIZATION, HTTP2_HEADER_CACHE_CONTROL, HTTP2_HEADER_CONNECTION, HTTP2_HEADER_CONTENT_DISPOSITION, HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_LANGUAGE, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_CONTENT_LOCATION, HTTP2_HEADER_CONTENT_MD5, HTTP2_HEADER_CONTENT_RANGE, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_COOKIE, HTTP2_HEADER_DATE, HTTP2_HEADER_ETAG, HTTP2_HEADER_EXPECT, HTTP2_HEADER_EXPIRES, HTTP2_HEADER_FROM, HTTP2_HEADER_HOST, HTTP2_HEADER_IF_MATCH, HTTP2_HEADER_IF_MODIFIED_SINCE, HTTP2_HEADER_IF_NONE_MATCH, HTTP2_HEADER_IF_RANGE, HTTP2_HEADER_IF_UNMODIFIED_SINCE, HTTP2_HEADER_LAST_MODIFIED, HTTP2_HEADER_LINK, HTTP2_HEADER_LOCATION, HTTP2_HEADER_MAX_FORWARDS, HTTP2_HEADER_PREFER, HTTP2_HEADER_PROXY_AUTHENTICATE, HTTP2_HEADER_PROXY_AUTHORIZATION, HTTP2_HEADER_RANGE, HTTP2_HEADER_REFERER, HTTP2_HEADER_REFRESH, HTTP2_HEADER_RETRY_AFTER, HTTP2_HEADER_SERVER, HTTP2_HEADER_SET_COOKIE, HTTP2_HEADER_STRICT_TRANSPORT_SECURITY, HTTP2_HEADER_TRANSFER_ENCODING, HTTP2_HEADER_TE, HTTP2_HEADER_UPGRADE, HTTP2_HEADER_USER_AGENT, HTTP2_HEADER_VARY, HTTP2_HEADER_VIA, HTTP2_HEADER_WWW_AUTHENTICATE, HTTP2_HEADER_HTTP2_SETTINGS, HTTP2_HEADER_KEEP_ALIVE, HTTP2_HEADER_PROXY_CONNECTION, HTTP2_METHOD_ACL, HTTP2_METHOD_BASELINE_CONTROL, HTTP2_METHOD_BIND, HTTP2_METHOD_CHECKIN, HTTP2_METHOD_CHECKOUT, HTTP2_METHOD_CONNECT, HTTP2_METHOD_COPY, HTTP2_METHOD_DELETE, HTTP2_METHOD_GET, HTTP2_METHOD_HEAD, HTTP2_METHOD_LABEL, HTTP2_METHOD_LINK, HTTP2_METHOD_LOCK, HTTP2_METHOD_MERGE, HTTP2_METHOD_MKACTIVITY, HTTP2_METHOD_MKCALENDAR, HTTP2_METHOD_MKCOL, HTTP2_METHOD_MKREDIRECTREF, HTTP2_METHOD_MKWORKSPACE, HTTP2_METHOD_MOVE, HTTP2_METHOD_OPTIONS, HTTP2_METHOD_ORDERPATCH, HTTP2_METHOD_PATCH, HTTP2_METHOD_POST, HTTP2_METHOD_PRI, HTTP2_METHOD_PROPFIND, HTTP2_METHOD_PROPPATCH, HTTP2_METHOD_PUT, HTTP2_METHOD_REBIND, HTTP2_METHOD_REPORT, HTTP2_METHOD_SEARCH, HTTP2_METHOD_TRACE, HTTP2_METHOD_UNBIND, HTTP2_METHOD_UNCHECKOUT, HTTP2_METHOD_UNLINK, HTTP2_METHOD_UNLOCK, HTTP2_METHOD_UPDATE, HTTP2_METHOD_UPDATEREDIRECTREF, HTTP2_METHOD_VERSION_CONTROL, HTTP_STATUS_CONTINUE, HTTP_STATUS_SWITCHING_PROTOCOLS, HTTP_STATUS_PROCESSING, HTTP_STATUS_OK, HTTP_STATUS_CREATED, HTTP_STATUS_ACCEPTED, HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION, HTTP_STATUS_NO_CONTENT, HTTP_STATUS_RESET_CONTENT, HTTP_STATUS_PARTIAL_CONTENT, HTTP_STATUS_MULTI_STATUS, HTTP_STATUS_ALREADY_REPORTED, HTTP_STATUS_IM_USED, HTTP_STATUS_MULTIPLE_CHOICES, HTTP_STATUS_MOVED_PERMANENTLY, HTTP_STATUS_FOUND, HTTP_STATUS_SEE_OTHER, HTTP_STATUS_NOT_MODIFIED, HTTP_STATUS_USE_PROXY, HTTP_STATUS_TEMPORARY_REDIRECT, HTTP_STATUS_PERMANENT_REDIRECT, HTTP_STATUS_BAD_REQUEST, HTTP_STATUS_UNAUTHORIZED, HTTP_STATUS_PAYMENT_REQUIRED, HTTP_STATUS_FORBIDDEN, HTTP_STATUS_NOT_FOUND, HTTP_STATUS_METHOD_NOT_ALLOWED, HTTP_STATUS_NOT_ACCEPTABLE, HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED, HTTP_STATUS_REQUEST_TIMEOUT, HTTP_STATUS_CONFLICT, HTTP_STATUS_GONE, HTTP_STATUS_LENGTH_REQUIRED, HTTP_STATUS_PRECONDITION_FAILED, HTTP_STATUS_PAYLOAD_TOO_LARGE, HTTP_STATUS_URI_TOO_LONG, HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE, HTTP_STATUS_RANGE_NOT_SATISFIABLE, HTTP_STATUS_EXPECTATION_FAILED, HTTP_STATUS_TEAPOT, HTTP_STATUS_MISDIRECTED_REQUEST, HTTP_STATUS_UNPROCESSABLE_ENTITY, HTTP_STATUS_LOCKED, HTTP_STATUS_FAILED_DEPENDENCY, HTTP_STATUS_UNORDERED_COLLECTION, HTTP_STATUS_UPGRADE_REQUIRED, HTTP_STATUS_PRECONDITION_REQUIRED, HTTP_STATUS_TOO_MANY_REQUESTS, HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE, HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS, HTTP_STATUS_INTERNAL_SERVER_ERROR, HTTP_STATUS_NOT_IMPLEMENTED, HTTP_STATUS_BAD_GATEWAY, HTTP_STATUS_SERVICE_UNAVAILABLE, HTTP_STATUS_GATEWAY_TIMEOUT, HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED, HTTP_STATUS_VARIANT_ALSO_NEGOTIATES, HTTP_STATUS_INSUFFICIENT_STORAGE, HTTP_STATUS_LOOP_DETECTED, HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED, HTTP_STATUS_NOT_EXTENDED, HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":53068,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":53262,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":62480,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":62674,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":62771,"length":20,"messageText":"Subsequent property declarations must have the same type.  Property 'Http1IncomingMessage' must be of type 'typeof IncomingMessage | undefined', but here has type 'Http1Request | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29470,"length":20,"messageText":"'Http1IncomingMessage' was also declared here.","category":3,"code":6203}]},{"start":62828,"length":19,"messageText":"Subsequent property declarations must have the same type.  Property 'Http1ServerResponse' must be of type 'typeof ServerResponse | undefined', but here has type 'Http1Response | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29537,"length":19,"messageText":"'Http1ServerResponse' was also declared here.","category":3,"code":6203}]},{"start":62885,"length":18,"messageText":"Subsequent property declarations must have the same type.  Property 'Http2ServerRequest' must be of type 'typeof Http2ServerRequest | undefined', but here has type 'Http2Request | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29602,"length":18,"messageText":"'Http2ServerRequest' was also declared here.","category":3,"code":6203}]},{"start":62940,"length":19,"messageText":"Subsequent property declarations must have the same type.  Property 'Http2ServerResponse' must be of type 'typeof Http2ServerResponse | undefined', but here has type 'Http2Response | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29670,"length":19,"messageText":"'Http2ServerResponse' was also declared here.","category":3,"code":6203}]},{"start":63277,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":63471,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":63807,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":64001,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":64327,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":64521,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":65259,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":65453,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":71189,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":71383,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":110842,"length":45,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":110842,"length":45,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS' was also declared here.","category":3,"code":6203}]},{"start":110911,"length":41,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":110911,"length":41,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":110976,"length":41,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_METHODS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":110976,"length":41,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_METHODS' was also declared here.","category":3,"code":6203}]},{"start":111105,"length":42,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":111105,"length":42,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":111171,"length":43,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":111171,"length":43,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":111238,"length":42,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":111238,"length":42,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD' was also declared here.","category":3,"code":6203}]},{"start":118720,"length":16,"messageText":"Cannot redeclare block-scoped variable 'sensitiveHeaders'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/http2.d.ts","start":118720,"length":16,"messageText":"'sensitiveHeaders' was also declared here.","category":3,"code":6203}]},{"start":121317,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":121511,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":122990,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":123184,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":125067,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":125261,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}}]],[432,[{"start":369,"length":13,"messageText":"Duplicate identifier 'ServerOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":169,"length":13,"messageText":"'ServerOptions' was also declared here.","category":3,"code":6203}]},{"start":519,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":652,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":672,"length":14,"messageText":"Duplicate identifier 'RequestOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":450,"length":14,"messageText":"'RequestOptions' was also declared here.","category":3,"code":6203}]},{"start":1326,"length":5,"messageText":"Duplicate identifier 'Agent'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":967,"length":5,"messageText":"'Agent' was also declared here.","category":3,"code":6203}]},{"start":1449,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1091,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1322,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1592,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":1680,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":1787,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1091,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1322,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1930,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":2078,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":2155,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":2226,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":3994,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":4099,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":4450,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":5737,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":5891,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":6208,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":7623,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":7719,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":8008,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9449,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9547,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9842,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11417,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11526,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11889,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":13558,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":13671,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":14046,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15482,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":15589,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15617,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15790,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":15890,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15957,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15991,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":24696,"length":11,"messageText":"Cannot redeclare block-scoped variable 'globalAgent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":14527,"length":11,"messageText":"'globalAgent' was also declared here.","category":3,"code":6203}]}]],[433,[{"start":524,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ResourceType, RequestId, TimeSinceEpoch, MonotonicTime, console, Session, open, close, url, waitForDebugger, InspectorNotification, Schema, Runtime, Debugger, Console, Profiler, HeapProfiler, NodeTracing, NodeWorker, Network, NodeRuntime","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/inspector.d.ts","start":524,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":524,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ScriptId, RemoteObjectId, UnserializableValue, ExecutionContextId, Timestamp, UniqueDebuggerId, BreakpointId, CallFrameId, HeapSnapshotObjectId, WorkerID, SessionID, Session","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/inspector.d.ts","start":321,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":87593,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87771,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87971,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88217,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88481,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88656,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88887,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89111,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89401,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89718,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89954,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90218,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90506,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90726,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90879,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91132,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91297,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91464,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91635,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91721,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92218,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92513,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92755,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93083,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93239,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93471,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93803,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94062,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94291,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94444,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94591,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95001,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95262,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99242,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99411,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99602,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99839,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100094,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100260,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100482,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100697,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100978,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101286,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101513,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101768,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102047,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102258,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102402,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102646,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102802,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102960,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103122,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103199,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103687,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103973,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104206,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104525,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104672,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104895,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105218,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105468,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105688,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105832,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105970,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106371,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106623,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106704,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106875,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107068,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107307,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107564,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107732,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107956,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108173,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108456,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108766,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108995,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109252,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109533,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109746,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109892,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110138,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110296,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110456,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110620,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110699,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111189,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111477,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111712,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112033,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112182,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112407,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112732,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112984,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113206,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113352,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113492,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113895,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114149,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114232,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114414,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114618,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114868,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115136,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115315,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115550,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115778,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116072,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116393,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116633,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116901,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117193,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117417,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117574,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117831,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118000,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118171,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118346,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118436,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118937,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119236,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119482,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119814,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119974,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120210,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120546,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120809,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121042,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121199,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121350,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121764,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122029,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122123,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122309,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122517,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122771,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123043,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123226,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123465,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123697,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123995,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124320,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124564,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124836,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125132,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125360,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125521,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125782,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125955,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126130,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126309,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126403,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126908,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127211,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127461,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127797,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127961,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128201,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128541,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128808,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129045,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129206,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129361,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129779,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":130048,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154428,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154606,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154806,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155052,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155316,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155491,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155722,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155946,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156236,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156553,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156789,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157053,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157341,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157561,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157714,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157967,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158132,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158299,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158470,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158556,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159053,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159348,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159590,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159918,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160074,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160306,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160638,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160897,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161126,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161279,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161426,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161836,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":162097,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166077,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166246,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166437,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166674,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166929,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167095,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167317,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167532,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167813,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168121,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168348,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168603,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168882,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169093,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169237,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169481,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169637,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169795,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169957,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170034,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170522,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170808,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171360,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171507,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171730,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172053,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172303,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172523,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172667,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172805,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173206,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173458,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173539,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173710,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173903,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174142,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174399,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174567,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174791,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175008,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175291,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175601,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175830,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176087,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176368,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176581,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176727,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176973,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177131,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177291,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177455,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177534,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178024,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178312,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178547,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178868,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179017,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179242,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179567,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179819,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180041,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180187,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180327,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180730,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180984,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181067,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181249,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181453,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181703,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181971,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182150,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182385,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182613,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182907,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183228,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183468,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183736,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184028,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184252,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184409,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184666,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184835,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185006,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185181,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185271,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185772,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186071,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186317,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186649,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186809,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187045,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187381,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187644,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187877,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188034,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188185,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188599,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188864,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188958,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189144,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189352,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189606,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189878,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190061,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190300,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190532,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190830,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191155,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191399,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191671,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191967,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192195,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192356,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192617,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192790,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192965,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193144,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193238,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193743,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194046,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194296,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194632,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194796,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195036,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195376,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195643,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195880,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196041,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196196,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196614,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196883,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}}]],[434,[{"start":13117,"length":6,"messageText":"Duplicate identifier 'Module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/module.d.ts","start":1633,"length":6,"messageText":"'Module' was also declared here.","category":3,"code":6203}]},{"start":13210,"length":6,"messageText":"Duplicate identifier 'module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/module.d.ts","start":1726,"length":6,"messageText":"'module' was also declared here.","category":3,"code":6203}]}]],[435,[{"start":448,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":540,"length":14,"messageText":"Duplicate identifier 'LookupFunction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":148,"length":14,"messageText":"'LookupFunction' was also declared here.","category":3,"code":6203}]},{"start":2425,"length":17,"messageText":"Duplicate identifier 'SocketConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":1979,"length":17,"messageText":"'SocketConnectOpts' was also declared here.","category":3,"code":6203}]},{"start":2499,"length":16,"messageText":"Duplicate identifier 'SocketReadyState'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":2053,"length":16,"messageText":"'SocketReadyState' was also declared here.","category":3,"code":6203}]},{"start":3299,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":2141,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203}]},{"start":25851,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":9941,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203}]},{"start":32286,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32364,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32429,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32513,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32588,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32657,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33055,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33124,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33180,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33255,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33321,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33381,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33455,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33526,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33584,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33661,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33729,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33791,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33867,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33949,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34018,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34106,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34185,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34258,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34345,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34431,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34504,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34596,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34679,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34756,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":35056,"length":9,"messageText":"Duplicate identifier 'IPVersion'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":35056,"length":9,"messageText":"'IPVersion' was also declared here.","category":3,"code":6203}]},{"start":35332,"length":9,"messageText":"Duplicate identifier 'BlockList'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":35332,"length":9,"messageText":"'BlockList' was also declared here.","category":3,"code":6203}]},{"start":38277,"length":14,"messageText":"Duplicate identifier 'NetConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":13707,"length":14,"messageText":"'NetConnectOpts' was also declared here.","category":3,"code":6203}]},{"start":45661,"length":13,"messageText":"Duplicate identifier 'SocketAddress'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/net.d.ts","start":45661,"length":13,"messageText":"'SocketAddress' was also declared here.","category":3,"code":6203}]}]],[436,[{"start":245,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: NetworkInterfaceInfo, SignalConstants, UV_UDP_REUSEADDR, E2BIG, EACCES, EADDRINUSE, EADDRNOTAVAIL, EAFNOSUPPORT, EAGAIN, EALREADY, EBADF, EBADMSG, EBUSY, ECANCELED, ECHILD, ECONNABORTED, ECONNREFUSED, ECONNRESET, EDEADLK, EDESTADDRREQ, EDOM, EDQUOT, EEXIST, EFAULT, EFBIG, EHOSTUNREACH, EIDRM, EILSEQ, EINPROGRESS, EINTR, EINVAL, EIO, EISCONN, EISDIR, ELOOP, EMFILE, EMLINK, EMSGSIZE, EMULTIHOP, ENAMETOOLONG, ENETDOWN, ENETRESET, ENETUNREACH, ENFILE, ENOBUFS, ENODATA, ENODEV, ENOENT, ENOEXEC, ENOLCK, ENOLINK, ENOMEM, ENOMSG, ENOPROTOOPT, ENOSPC, ENOSR, ENOSTR, ENOSYS, ENOTCONN, ENOTDIR, ENOTEMPTY, ENOTSOCK, ENOTSUP, ENOTTY, ENXIO, EOPNOTSUPP, EOVERFLOW, EPERM, EPIPE, EPROTO, EPROTONOSUPPORT, EPROTOTYPE, ERANGE, EROFS, ESPIPE, ESRCH, ESTALE, ETIME, ETIMEDOUT, ETXTBSY, EWOULDBLOCK, EXDEV, WSAEINTR, WSAEBADF, WSAEACCES, WSAEFAULT, WSAEINVAL, WSAEMFILE, WSAEWOULDBLOCK, WSAEINPROGRESS, WSAEALREADY, WSAENOTSOCK, WSAEDESTADDRREQ, WSAEMSGSIZE, WSAEPROTOTYPE, WSAENOPROTOOPT, WSAEPROTONOSUPPORT, WSAESOCKTNOSUPPORT, WSAEOPNOTSUPP, WSAEPFNOSUPPORT, WSAEAFNOSUPPORT, WSAEADDRINUSE, WSAEADDRNOTAVAIL, WSAENETDOWN, WSAENETUNREACH, WSAENETRESET, WSAECONNABORTED, WSAECONNRESET, WSAENOBUFS, WSAEISCONN, WSAENOTCONN, WSAESHUTDOWN, WSAETOOMANYREFS, WSAETIMEDOUT, WSAECONNREFUSED, WSAELOOP, WSAENAMETOOLONG, WSAEHOSTDOWN, WSAEHOSTUNREACH, WSAENOTEMPTY, WSAEPROCLIM, WSAEUSERS, WSAEDQUOT, WSAESTALE, WSAEREMOTE, WSASYSNOTREADY, WSAVERNOTSUPPORTED, WSANOTINITIALISED, WSAEDISCON, WSAENOMORE, WSAECANCELLED, WSAEINVALIDPROCTABLE, WSAEINVALIDPROVIDER, WSAEPROVIDERFAILEDINIT, WSASYSCALLFAILURE, WSASERVICE_NOT_FOUND, WSATYPE_NOT_FOUND, WSA_E_NO_MORE, WSA_E_CANCELLED, WSAEREFUSED, PRIORITY_LOW, PRIORITY_BELOW_NORMAL, PRIORITY_NORMAL, PRIORITY_ABOVE_NORMAL, PRIORITY_HIGH, PRIORITY_HIGHEST, EOL","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/os.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":1410,"length":5,"messageText":"Subsequent property declarations must have the same type.  Property 'shell' must be of type 'T', but here has type 'T | null'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/os.d.ts","start":781,"length":5,"messageText":"'shell' was also declared here.","category":3,"code":6203}]},{"start":8835,"length":7,"messageText":"Cannot augment module 'signals' with value exports because it resolves to a non-module entity.","category":1,"code":2649},{"start":14142,"length":9,"messageText":"Cannot redeclare block-scoped variable 'RTLD_LAZY'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14142,"length":9,"messageText":"'RTLD_LAZY' was also declared here.","category":3,"code":6203}]},{"start":14179,"length":8,"messageText":"Cannot redeclare block-scoped variable 'RTLD_NOW'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14179,"length":8,"messageText":"'RTLD_NOW' was also declared here.","category":3,"code":6203}]},{"start":14215,"length":11,"messageText":"Cannot redeclare block-scoped variable 'RTLD_GLOBAL'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14215,"length":11,"messageText":"'RTLD_GLOBAL' was also declared here.","category":3,"code":6203}]},{"start":14254,"length":10,"messageText":"Cannot redeclare block-scoped variable 'RTLD_LOCAL'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14254,"length":10,"messageText":"'RTLD_LOCAL' was also declared here.","category":3,"code":6203}]},{"start":14292,"length":13,"messageText":"Cannot redeclare block-scoped variable 'RTLD_DEEPBIND'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14292,"length":13,"messageText":"'RTLD_DEEPBIND' was also declared here.","category":3,"code":6203}]},{"start":14646,"length":7,"messageText":"Cannot redeclare block-scoped variable 'devNull'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/os.d.ts","start":14646,"length":7,"messageText":"'devNull' was also declared here.","category":3,"code":6203}]}]],[437,[{"start":78,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":164,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":7948,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7032,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7117,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8033,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7032,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7117,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8130,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8227,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]}]],[438,[{"start":1157,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: EntryType, PerformanceObserverCallback, PerformanceObserver, NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, performance","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/perf_hooks.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3811,"length":15,"messageText":"Duplicate identifier 'PerformanceMark'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","start":3811,"length":15,"messageText":"'PerformanceMark' was also declared here.","category":3,"code":6203}]},{"start":4134,"length":18,"messageText":"Duplicate identifier 'PerformanceMeasure'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","start":4134,"length":18,"messageText":"'PerformanceMeasure' was also declared here.","category":3,"code":6203}]},{"start":6911,"length":24,"messageText":"Duplicate identifier 'EventLoopUtilityFunction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","start":7826,"length":24,"messageText":"'EventLoopUtilityFunction' was also declared here.","category":3,"code":6203}]},{"start":23224,"length":25,"messageText":"Duplicate identifier 'PerformanceResourceTiming'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/perf_hooks.d.ts","start":24139,"length":25,"messageText":"'PerformanceResourceTiming' was also declared here.","category":3,"code":6203}]},{"start":23294,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'entryType' in type 'PerformanceResourceTiming' is not assignable to the same property in base type 'PerformanceEntry'.","category":1,"code":2416,"next":[{"messageText":"Type '\"resource\"' is not assignable to type 'EntryType'.","category":1,"code":2322}]}}]],[439,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: process, Platform, Signals, UncaughtExceptionOrigin, MultipleResolveType, BeforeExitListener, DisconnectListener, ExitListener, RejectionHandledListener, UncaughtExceptionListener, UnhandledRejectionListener, WarningListener, MessageListener, SignalsListener, MultipleResolveListener","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":9012,"length":12,"messageText":"Duplicate identifier 'Architecture'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/process.d.ts","start":9012,"length":12,"messageText":"'Architecture' was also declared here.","category":3,"code":6203}]},{"start":11660,"length":14,"messageText":"Duplicate identifier 'WorkerListener'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/process.d.ts","start":11660,"length":14,"messageText":"'WorkerListener' was also declared here.","category":3,"code":6203}]},{"start":42925,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'exitCode' must be of type 'number | undefined', but here has type 'string | number | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":8849,"length":8,"messageText":"'exitCode' was also declared here.","category":3,"code":6203}]},{"start":47690,"length":6,"messageText":"All declarations of 'getgid' must have identical modifiers.","category":1,"code":2687},{"start":49008,"length":6,"messageText":"All declarations of 'setgid' must have identical modifiers.","category":1,"code":2687},{"start":49741,"length":6,"messageText":"All declarations of 'getuid' must have identical modifiers.","category":1,"code":2687},{"start":51005,"length":6,"messageText":"All declarations of 'setuid' must have identical modifiers.","category":1,"code":2687},{"start":51754,"length":7,"messageText":"All declarations of 'geteuid' must have identical modifiers.","category":1,"code":2687},{"start":53081,"length":7,"messageText":"All declarations of 'seteuid' must have identical modifiers.","category":1,"code":2687},{"start":53840,"length":7,"messageText":"All declarations of 'getegid' must have identical modifiers.","category":1,"code":2687},{"start":55176,"length":7,"messageText":"All declarations of 'setegid' must have identical modifiers.","category":1,"code":2687},{"start":55966,"length":9,"messageText":"All declarations of 'getgroups' must have identical modifiers.","category":1,"code":2687},{"start":57174,"length":9,"messageText":"All declarations of 'setgroups' must have identical modifiers.","category":1,"code":2687},{"start":60263,"length":7,"messageText":"All declarations of 'version' must have identical modifiers.","category":1,"code":2687},{"start":62018,"length":8,"messageText":"All declarations of 'versions' must have identical modifiers.","category":1,"code":2687},{"start":63647,"length":6,"messageText":"All declarations of 'config' must have identical modifiers.","category":1,"code":2687},{"start":63647,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'config' must be of type '{ target_defaults: { cflags: any[]; default_configuration: string; defines: string[]; include_dirs: string[]; libraries: string[]; }; variables: { clang: number; host_arch: string; node_install_npm: boolean; ... 11 more ...; visibility: string; }; }', but here has type 'ProcessConfig'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":9586,"length":6,"messageText":"'config' was also declared here.","category":3,"code":6203}]},{"start":66584,"length":3,"messageText":"All declarations of 'pid' must have identical modifiers.","category":1,"code":2687},{"start":67044,"length":4,"messageText":"All declarations of 'ppid' must have identical modifiers.","category":1,"code":2687},{"start":68922,"length":4,"messageText":"All declarations of 'arch' must have identical modifiers.","category":1,"code":2687},{"start":68922,"length":4,"messageText":"Subsequent property declarations must have the same type.  Property 'arch' must be of type 'string', but here has type 'Architecture'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":10861,"length":4,"messageText":"'arch' was also declared here.","category":3,"code":6203}]},{"start":70040,"length":8,"messageText":"All declarations of 'platform' must have identical modifiers.","category":1,"code":2687},{"start":70834,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'memoryUsage' must be of type '() => MemoryUsage', but here has type 'MemoryUsageFn'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":11055,"length":27,"messageText":"'memoryUsage' was also declared here.","category":3,"code":6203}]},{"start":78557,"length":7,"messageText":"All declarations of 'release' must have identical modifiers.","category":1,"code":2687},{"start":86196,"length":6,"messageText":"All declarations of 'report' must have identical modifiers.","category":1,"code":2687},{"start":86196,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'report' must be of type 'ProcessReport | undefined', but here has type 'ProcessReport'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":13031,"length":6,"messageText":"'report' was also declared here.","category":3,"code":6203}]}]],[440,[{"start":4152,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2228,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2254,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":4178,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2228,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2254,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":5371,"length":7,"messageText":"Cannot redeclare block-scoped variable 'version'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":3451,"length":7,"messageText":"'version' was also declared here.","category":3,"code":6203}]}]],[441,[{"start":5526,"length":6,"messageText":"Cannot redeclare block-scoped variable 'encode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/querystring.d.ts","start":953,"length":6,"messageText":"'encode' was also declared here.","category":3,"code":6203}]},{"start":5656,"length":6,"messageText":"Cannot redeclare block-scoped variable 'decode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/querystring.d.ts","start":1083,"length":6,"messageText":"'decode' was also declared here.","category":3,"code":6203}]}]],[442,[{"start":1279,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1394,"length":8,"messageText":"Duplicate identifier 'promises'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline.d.ts","start":1394,"length":8,"messageText":"'promises' was also declared here.","category":3,"code":6203}]},{"start":2180,"length":9,"messageText":"Duplicate identifier 'Interface'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":294,"length":9,"messageText":"'Interface' was also declared here.","category":3,"code":6203}]},{"start":10607,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10685,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10750,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10827,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10892,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10958,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11025,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11091,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11158,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11658,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11727,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11783,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11851,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11907,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11964,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12022,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12079,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12137,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12212,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12283,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12341,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12411,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12469,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12528,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12588,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12647,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12707,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12784,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12866,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12935,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13016,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13085,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13155,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13226,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13296,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13367,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13455,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13541,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13614,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13699,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13772,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13846,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13921,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13995,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14070,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14241,"length":8,"messageText":"Duplicate identifier 'ReadLine'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5600,"length":8,"messageText":"'ReadLine' was also declared here.","category":3,"code":6203}]},{"start":14325,"length":9,"messageText":"Duplicate identifier 'Completer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5678,"length":9,"messageText":"'Completer' was also declared here.","category":3,"code":6203}]},{"start":14388,"length":14,"messageText":"Duplicate identifier 'AsyncCompleter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5734,"length":14,"messageText":"'AsyncCompleter' was also declared here.","category":3,"code":6203}]},{"start":14534,"length":15,"messageText":"Duplicate identifier 'CompleterResult'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5850,"length":15,"messageText":"'CompleterResult' was also declared here.","category":3,"code":6203}]},{"start":21034,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":6758,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203}]}]],[443,[{"start":209,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":665,"length":9,"messageText":"Duplicate identifier 'Interface'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline/promises.d.ts","start":712,"length":9,"messageText":"'Interface' was also declared here.","category":3,"code":6203}]},{"start":2389,"length":8,"messageText":"Duplicate identifier 'Readline'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/readline/promises.d.ts","start":2436,"length":8,"messageText":"'Readline' was also declared here.","category":3,"code":6203}]}]],[444,[{"start":328,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: REPLEval, REPLWriter, writer, REPLCommandAction, REPLServer, REPL_MODE_SLOPPY, REPL_MODE_STRICT, Recoverable","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/repl.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":4087,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'replMode' must be of type 'unique symbol | unique symbol | undefined', but here has type 'unique symbol | unique symbol | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/repl.d.ts","start":3753,"length":8,"messageText":"'replMode' was also declared here.","category":3,"code":6203}]}]],[445,[{"start":4630,"length":8,"messageText":"Duplicate identifier 'AssetKey'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sea.d.ts","start":4630,"length":8,"messageText":"'AssetKey' was also declared here.","category":3,"code":6203}]}]],[446,[{"start":1931,"length":12,"messageText":"Duplicate identifier 'DatabaseSync'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sqlite.d.ts","start":1931,"length":12,"messageText":"'DatabaseSync' was also declared here.","category":3,"code":6203}]},{"start":3979,"length":18,"messageText":"Duplicate identifier 'SupportedValueType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sqlite.d.ts","start":3979,"length":18,"messageText":"'SupportedValueType' was also declared here.","category":3,"code":6203}]},{"start":5645,"length":13,"messageText":"Duplicate identifier 'StatementSync'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/sqlite.d.ts","start":5645,"length":13,"messageText":"'StatementSync' was also declared here.","category":3,"code":6203}]}]],[447,[{"start":1022,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":50011,"length":54,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"encoding\" | \"highWaterMark\" | \"objectMode\"' does not satisfy the constraint 'keyof ReadableOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof ReadableOptions'.","category":1,"code":2322}]}},{"start":51498,"length":59,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"highWaterMark\" | \"objectMode\" | \"decodeStrings\"' does not satisfy the constraint 'keyof WritableOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof WritableOptions'.","category":1,"code":2322}]}},{"start":57783,"length":90,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"encoding\" | \"allowHalfOpen\" | \"highWaterMark\" | \"objectMode\" | \"decodeStrings\"' does not satisfy the constraint 'keyof DuplexOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof DuplexOptions'.","category":1,"code":2322}]}},{"start":84362,"length":8,"messageText":"Duplicate identifier 'internal'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/stream.d.ts","start":26881,"length":8,"messageText":"'internal' was also declared here.","category":3,"code":6203}]},{"start":84457,"length":6,"messageText":"Duplicate identifier 'stream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/stream.d.ts","start":26976,"length":6,"messageText":"'stream' was also declared here.","category":3,"code":6203}]}]],[448,[{"start":81,"length":19,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineDestination'.","category":1,"code":2305},{"start":110,"length":15,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineOptions'.","category":1,"code":2305},{"start":135,"length":15,"messageText":"Module '\"node:stream\"' has no exported member 'PipelinePromise'.","category":1,"code":2305},{"start":160,"length":14,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineSource'.","category":1,"code":2305},{"start":184,"length":17,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineTransform'.","category":1,"code":2305}]],[450,[{"start":0,"length":4,"messageText":"Definitions of the following identifiers conflict with those in another file: _ByteLengthQueuingStrategy, _CompressionStream, _CountQueuingStrategy, _DecompressionStream, _ReadableByteStreamController, _ReadableStream, _ReadableStreamBYOBReader, _ReadableStreamBYOBRequest, _ReadableStreamDefaultController, _ReadableStreamDefaultReader, _TextDecoderStream, _TextEncoderStream, _TransformStream, _TransformStreamDefaultController, _WritableStream, _WritableStreamDefaultController, _WritableStreamDefaultWriter, ReadableStreamController, ReadableStreamReadResult, ReadableStream, ReadableStreamReaderMode, ReadableStreamReader, ReadableStreamDefaultReader, ReadableStreamBYOBReader, ReadableStreamBYOBRequest, ReadableByteStreamController, ReadableStreamDefaultController, TransformStream, TransformStreamDefaultController, WritableStream, WritableStreamDefaultWriter, WritableStreamDefaultController, ByteLengthQueuingStrategy, CountQueuingStrategy, TextEncoderStream, BufferSource, TextDecoderStream, CompressionStream, DecompressionStream","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/stream/web.d.ts","start":0,"length":4,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[451,[{"start":1533,"length":13,"messageText":"Duplicate identifier 'StringDecoder'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/string_decoder.d.ts","start":44,"length":13,"messageText":"'StringDecoder' was also declared here.","category":3,"code":6203}]}]],[452,[{"start":2700,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: after, afterEach, before, beforeEach, describe, it, Mock, mock, only, run, skip, snapshot, suite, SuiteContext, test, default, TestContext, todo, dot, junit, lcov, spec, tap, TestEvent","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/test.d.ts","start":2700,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":18322,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18413,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18504,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18593,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18688,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18777,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18860,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18943,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19026,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19111,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19198,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19285,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19363,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20255,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20337,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20419,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20499,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20585,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20665,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20739,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20813,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20887,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20963,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21119,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21188,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21257,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21341,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21425,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21507,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21595,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21677,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21753,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21829,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21905,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21983,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22063,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22143,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22214,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22285,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22380,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22475,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22568,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22667,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22760,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22847,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22934,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23021,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23110,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23201,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23292,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23374,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23456,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23555,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23654,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23751,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23854,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23951,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24042,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24133,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24224,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24317,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24412,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24507,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24593,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}}]],[453,[{"start":636,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1128,"length":10,"messageText":"Cannot redeclare block-scoped variable 'setTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":39,"length":10,"messageText":"'setTimeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":146,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":1174,"length":12,"messageText":"Cannot redeclare block-scoped variable 'clearTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":306,"length":12,"messageText":"'clearTimeout' was also declared here.","category":3,"code":6203}]},{"start":1224,"length":11,"messageText":"Cannot redeclare block-scoped variable 'setInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":396,"length":11,"messageText":"'setInterval' was also declared here.","category":3,"code":6203}]},{"start":1272,"length":13,"messageText":"Cannot redeclare block-scoped variable 'clearInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":503,"length":13,"messageText":"'clearInterval' was also declared here.","category":3,"code":6203}]},{"start":1324,"length":12,"messageText":"Cannot redeclare block-scoped variable 'setImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":595,"length":12,"messageText":"'setImmediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":693,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":1374,"length":14,"messageText":"Cannot redeclare block-scoped variable 'clearImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":833,"length":14,"messageText":"'clearImmediate' was also declared here.","category":3,"code":6203}]},{"start":2289,"length":9,"messageText":"Duplicate identifier 'Immediate'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":2289,"length":9,"messageText":"'Immediate' was also declared here.","category":3,"code":6203}]},{"start":4621,"length":7,"messageText":"Duplicate identifier 'Timeout'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":4621,"length":7,"messageText":"'Timeout' was also declared here.","category":3,"code":6203}]},{"start":8300,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1627,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1682,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2184,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2229,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":9965,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers.d.ts","start":9965,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203}]},{"start":11801,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1627,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1682,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2184,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2229,"length":13,"messageText":"and here.","category":3,"code":6204}]}]],[454,[{"start":2894,"length":8,"code":2344,"category":1,"messageText":"Type '\"signal\"' does not satisfy the constraint '\"ref\"'."},{"start":3410,"length":9,"messageText":"Cannot redeclare block-scoped variable 'scheduler'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/timers/promises.d.ts","start":3394,"length":9,"messageText":"'scheduler' was also declared here.","category":3,"code":6203}]}]],[455,[{"start":332,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: CLIENT_RENEG_LIMIT, CLIENT_RENEG_WINDOW, TLSSocket, Server, SecureVersion, DEFAULT_ECDH_CURVE, DEFAULT_MAX_VERSION, DEFAULT_MIN_VERSION, rootCertificates","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":2444,"length":13,"messageText":"All declarations of 'ext_key_usage' must have identical modifiers.","category":1,"code":2687},{"start":2444,"length":13,"messageText":"Subsequent property declarations must have the same type.  Property 'ext_key_usage' must be of type 'string[]', but here has type 'string[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":954,"length":13,"messageText":"'ext_key_usage' was also declared here.","category":3,"code":6203}]},{"start":2619,"length":14,"messageText":"All declarations of 'subjectaltname' must have identical modifiers.","category":1,"code":2687},{"start":2619,"length":14,"messageText":"Subsequent property declarations must have the same type.  Property 'subjectaltname' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":713,"length":14,"messageText":"'subjectaltname' was also declared here.","category":3,"code":6203}]},{"start":2748,"length":10,"messageText":"All declarations of 'infoAccess' must have identical modifiers.","category":1,"code":2687},{"start":2748,"length":10,"messageText":"Subsequent property declarations must have the same type.  Property 'infoAccess' must be of type 'Dict<string[]>', but here has type 'Dict<string[]> | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":745,"length":10,"messageText":"'infoAccess' was also declared here.","category":3,"code":6203}]},{"start":3036,"length":8,"messageText":"All declarations of 'exponent' must have identical modifiers.","category":1,"code":2687},{"start":3036,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'exponent' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":813,"length":8,"messageText":"'exponent' was also declared here.","category":3,"code":6203}]},{"start":3140,"length":7,"messageText":"All declarations of 'modulus' must have identical modifiers.","category":1,"code":2687},{"start":3140,"length":7,"messageText":"Subsequent property declarations must have the same type.  Property 'modulus' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":788,"length":7,"messageText":"'modulus' was also declared here.","category":3,"code":6203}]},{"start":22802,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'SNICallback' must be of type '((servername: string, cb: (err: Error | null, ctx: SecureContext) => void) => void) | undefined', but here has type '((servername: string, cb: (err: Error | null, ctx?: SecureContext | undefined) => void) => void) | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":16094,"length":11,"messageText":"'SNICallback' was also declared here.","category":3,"code":6203}]},{"start":40712,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'key' must be of type 'string | Buffer | (Buffer | KeyObject)[] | undefined', but here has type 'string | Buffer | (string | Buffer | KeyObject)[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":32026,"length":3,"messageText":"'key' was also declared here.","category":3,"code":6203}]},{"start":56818,"length":15,"messageText":"Cannot redeclare block-scoped variable 'DEFAULT_CIPHERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/tls.d.ts","start":57049,"length":15,"messageText":"'DEFAULT_CIPHERS' was also declared here.","category":3,"code":6203}]}]],[457,[{"start":1720,"length":10,"messageText":"Duplicate identifier 'ReadStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":108,"length":10,"messageText":"'ReadStream' was also declared here.","category":3,"code":6203}]},{"start":3286,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":431,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203}]},{"start":3609,"length":11,"messageText":"Duplicate identifier 'WriteStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":465,"length":11,"messageText":"'WriteStream' was also declared here.","category":3,"code":6203}]}]],[458,[{"start":19317,"length":3,"messageText":"Duplicate identifier 'URL'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/url.d.ts","start":3993,"length":3,"messageText":"'URL' was also declared here.","category":3,"code":6203}]},{"start":35941,"length":15,"messageText":"Duplicate identifier 'URLSearchParams'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/url.d.ts","start":4450,"length":15,"messageText":"'URLSearchParams' was also declared here.","category":3,"code":6203}]}]],[459,[{"start":303,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: colors, styles, defaultOptions, replDefaults, custom, Style, CustomInspectFunction, DebugLoggerFunction, debug, CustomPromisify, TextDecoder, TextEncoder","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/util.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":49447,"length":5,"messageText":"Export declaration conflicts with exported declaration of 'types'.","category":1,"code":2484},{"start":61031,"length":8,"messageText":"Duplicate identifier 'MIMEType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/util.d.ts","start":63411,"length":8,"messageText":"'MIMEType' was also declared here.","category":3,"code":6203}]},{"start":63829,"length":10,"messageText":"Duplicate identifier 'MIMEParams'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/util.d.ts","start":66209,"length":10,"messageText":"'MIMEParams' was also declared here.","category":3,"code":6203}]}]],[460,[{"start":674,"length":20,"messageText":"Duplicate identifier 'DoesZapCodeSpaceFlag'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":375,"length":20,"messageText":"'DoesZapCodeSpaceFlag' was also declared here.","category":3,"code":6203}]},{"start":13713,"length":10,"messageText":"Duplicate identifier 'Serializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":2550,"length":10,"messageText":"'Serializer' was also declared here.","category":3,"code":6203}]},{"start":15956,"length":17,"messageText":"Duplicate identifier 'DefaultSerializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":4361,"length":17,"messageText":"'DefaultSerializer' was also declared here.","category":3,"code":6203}]},{"start":16043,"length":12,"messageText":"Duplicate identifier 'Deserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":4417,"length":12,"messageText":"'Deserializer' was also declared here.","category":3,"code":6203}]},{"start":18330,"length":19,"messageText":"Duplicate identifier 'DefaultDeserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":6414,"length":19,"messageText":"'DefaultDeserializer' was also declared here.","category":3,"code":6203}]},{"start":20553,"length":10,"messageText":"Duplicate identifier 'GCProfiler'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":20553,"length":10,"messageText":"'GCProfiler' was also declared here.","category":3,"code":6203}]},{"start":29492,"length":12,"messageText":"Cannot redeclare block-scoped variable 'promiseHooks'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":29492,"length":12,"messageText":"'promiseHooks' was also declared here.","category":3,"code":6203}]},{"start":29529,"length":25,"messageText":"Duplicate identifier 'StartupSnapshotCallbackFn'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":29529,"length":25,"messageText":"'StartupSnapshotCallbackFn' was also declared here.","category":3,"code":6203}]},{"start":34678,"length":15,"messageText":"Cannot redeclare block-scoped variable 'startupSnapshot'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/v8.d.ts","start":34678,"length":15,"messageText":"'startupSnapshot' was also declared here.","category":3,"code":6203}]}]],[461,[{"start":1285,"length":16,"messageText":"Module '\"node:module\"' has no exported member 'ImportAttributes'.","category":1,"code":2305},{"start":2097,"length":10,"messageText":"Subsequent property declarations must have the same type.  Property 'cachedData' must be of type 'Buffer | undefined', but here has type 'Buffer | ArrayBufferView | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":803,"length":10,"messageText":"'cachedData' was also declared here.","category":3,"code":6203}]},{"start":7481,"length":17,"messageText":"Duplicate identifier 'MeasureMemoryMode'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":4271,"length":17,"messageText":"'MeasureMemoryMode' was also declared here.","category":3,"code":6203}]},{"start":8093,"length":6,"messageText":"Duplicate identifier 'Script'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":4661,"length":6,"messageText":"'Script' was also declared here.","category":3,"code":6203}]},{"start":22764,"length":12,"messageText":"Property 'cachedData' does not exist on type 'Script'.","category":1,"code":2339},{"start":22827,"length":20,"messageText":"Property 'cachedDataProduced' does not exist on type 'Script'.","category":1,"code":2339},{"start":25292,"length":12,"messageText":"Duplicate identifier 'ModuleLinker'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":27944,"length":12,"messageText":"'ModuleLinker' was also declared here.","category":3,"code":6203}]},{"start":25485,"length":12,"messageText":"Duplicate identifier 'ModuleStatus'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":28137,"length":12,"messageText":"'ModuleStatus' was also declared here.","category":3,"code":6203}]},{"start":29675,"length":6,"messageText":"Duplicate identifier 'Module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":32327,"length":6,"messageText":"'Module' was also declared here.","category":3,"code":6203}]},{"start":36695,"length":16,"messageText":"Duplicate identifier 'SourceTextModule'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":39347,"length":16,"messageText":"'SourceTextModule' was also declared here.","category":3,"code":6203}]},{"start":38190,"length":15,"messageText":"Duplicate identifier 'SyntheticModule'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":40842,"length":15,"messageText":"'SyntheticModule' was also declared here.","category":3,"code":6203}]},{"start":40074,"length":31,"messageText":"Cannot redeclare block-scoped variable 'USE_MAIN_CONTEXT_DEFAULT_LOADER'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/vm.d.ts","start":42713,"length":31,"messageText":"'USE_MAIN_CONTEXT_DEFAULT_LOADER' was also declared here.","category":3,"code":6203}]}]],[462,[{"start":5197,"length":4,"messageText":"Duplicate identifier 'WASI'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/wasi.d.ts","start":1736,"length":4,"messageText":"'WASI' was also declared here.","category":3,"code":6203}]}]],[463,[{"start":2151,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: isMainThread, parentPort, resourceLimits, SHARE_ENV, threadId, workerData, MessageChannel, TransferListItem, MessagePort, Worker","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/worker_threads.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":13107,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'env' must be of type 'Dict<string> | unique symbol | undefined', but here has type 'Dict<string> | unique symbol | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/worker_threads.d.ts","start":3622,"length":3,"messageText":"'env' was also declared here.","category":3,"code":6203}]},{"start":27253,"length":16,"messageText":"Duplicate identifier 'BroadcastChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","start":27254,"length":16,"messageText":"'BroadcastChannel' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","start":28099,"length":16,"messageText":"and here.","category":3,"code":6204}]},{"start":28098,"length":16,"messageText":"Duplicate identifier 'BroadcastChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","start":27254,"length":16,"messageText":"'BroadcastChannel' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","start":28099,"length":16,"messageText":"and here.","category":3,"code":6204}]},{"start":32306,"length":12,"messageText":"Duplicate identifier 'Serializable'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/worker_threads.d.ts","start":32307,"length":12,"messageText":"'Serializable' was also declared here.","category":3,"code":6203}]}]],[464,[{"start":2494,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: InputType, CompressCallback, BROTLI_DECODE, BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2, BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS, BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2, BROTLI_DECODER_ERROR_FORMAT_CL_SPACE, BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT, BROTLI_DECODER_ERROR_FORMAT_DICTIONARY, BROTLI_DECODER_ERROR_FORMAT_DISTANCE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE, BROTLI_DECODER_ERROR_FORMAT_PADDING_1, BROTLI_DECODER_ERROR_FORMAT_PADDING_2, BROTLI_DECODER_ERROR_FORMAT_RESERVED, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME, BROTLI_DECODER_ERROR_FORMAT_TRANSFORM, BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS, BROTLI_DECODER_ERROR_INVALID_ARGUMENTS, BROTLI_DECODER_ERROR_UNREACHABLE, BROTLI_DECODER_NEEDS_MORE_INPUT, BROTLI_DECODER_NEEDS_MORE_OUTPUT, BROTLI_DECODER_NO_ERROR, BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION, BROTLI_DECODER_PARAM_LARGE_WINDOW, BROTLI_DECODER_RESULT_ERROR, BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT, BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT, BROTLI_DECODER_RESULT_SUCCESS, BROTLI_DECODER_SUCCESS, BROTLI_DEFAULT_MODE, BROTLI_DEFAULT_QUALITY, BROTLI_DEFAULT_WINDOW, BROTLI_ENCODE, BROTLI_LARGE_MAX_WINDOW_BITS, BROTLI_MAX_INPUT_BLOCK_BITS, BROTLI_MAX_QUALITY, BROTLI_MAX_WINDOW_BITS, BROTLI_MIN_INPUT_BLOCK_BITS, BROTLI_MIN_QUALITY, BROTLI_MIN_WINDOW_BITS, BROTLI_MODE_FONT, BROTLI_MODE_GENERIC, BROTLI_MODE_TEXT, BROTLI_OPERATION_EMIT_METADATA, BROTLI_OPERATION_FINISH, BROTLI_OPERATION_FLUSH, BROTLI_OPERATION_PROCESS, BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING, BROTLI_PARAM_LARGE_WINDOW, BROTLI_PARAM_LGBLOCK, BROTLI_PARAM_LGWIN, BROTLI_PARAM_MODE, BROTLI_PARAM_NDIRECT, BROTLI_PARAM_NPOSTFIX, BROTLI_PARAM_QUALITY, BROTLI_PARAM_SIZE_HINT, DEFLATE, DEFLATERAW, GUNZIP, GZIP, INFLATE, INFLATERAW, UNZIP, Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK, Z_TREES, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_ERRNO, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR, Z_VERSION_ERROR, Z_NO_COMPRESSION, Z_BEST_SPEED, Z_BEST_COMPRESSION, Z_DEFAULT_COMPRESSION, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY, Z_DEFAULT_WINDOWBITS, Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_MIN_CHUNK, Z_MAX_CHUNK, Z_DEFAULT_CHUNK, Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_MEMLEVEL, Z_MIN_LEVEL, Z_MAX_LEVEL, Z_DEFAULT_LEVEL, ZLIB_VERNUM, Z_BINARY, Z_TEXT, Z_ASCII, Z_UNKNOWN, Z_DEFLATED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/zlib.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[465,[{"start":12,"length":6,"messageText":"Subsequent variable declarations must have the same type.  Variable 'global' must be of type 'Global & typeof globalThis', but here has type 'typeof globalThis'.","category":1,"code":2403,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.global.d.ts","start":12,"length":6,"messageText":"'global' was also declared here.","category":3,"code":6203}]}]],[508,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":125,"length":19,"messageText":"Module '\"../modules/proto-includes\"' has no exported member 'Order_ConditionType'.","category":1,"code":2305},{"start":146,"length":10,"messageText":"Module '\"../modules/proto-includes\"' has no exported member 'Order_Side'.","category":1,"code":2305},{"start":158,"length":17,"messageText":"Module '\"../modules/proto-includes\"' has no exported member 'Order_TimeInForce'.","category":1,"code":2305}]],[528,[{"start":407,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[529,[{"start":196,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":251,"length":7,"messageText":"Module '\"./proto-includes\"' has no exported member 'OrderId'.","category":1,"code":2305},{"start":262,"length":5,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order'.","category":1,"code":2305},{"start":271,"length":19,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_ConditionType'.","category":1,"code":2305},{"start":294,"length":10,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_Side'.","category":1,"code":2305},{"start":308,"length":17,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_TimeInForce'.","category":1,"code":2305},{"start":329,"length":13,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgPlaceOrder'.","category":1,"code":2305},{"start":346,"length":14,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgCancelOrder'.","category":1,"code":2305},{"start":364,"length":12,"messageText":"Module '\"./proto-includes\"' has no exported member 'SubaccountId'.","category":1,"code":2305},{"start":380,"length":17,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgCreateTransfer'.","category":1,"code":2305},{"start":401,"length":8,"messageText":"Module '\"./proto-includes\"' has no exported member 'Transfer'.","category":1,"code":2305},{"start":413,"length":22,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgDepositToSubaccount'.","category":1,"code":2305},{"start":439,"length":25,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgWithdrawFromSubaccount'.","category":1,"code":2305}]],[530,[{"start":435,"length":8,"messageText":"Cannot find module 'lodash' or its corresponding type declarations.","category":1,"code":2307},{"start":462,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":956,"length":10,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_Side'.","category":1,"code":2305},{"start":970,"length":17,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_TimeInForce'.","category":1,"code":2305},{"start":998,"length":13,"messageText":"Module '\"./proto-includes\"' has no exported member 'MsgPlaceOrder'.","category":1,"code":2305},{"start":1015,"length":19,"messageText":"Module '\"./proto-includes\"' has no exported member 'Order_ConditionType'.","category":1,"code":2305}]],[531,[{"start":157,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[532,[{"start":296,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":414,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[534,[{"start":196,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[541,[{"start":87,"length":10,"messageText":"Duplicate identifier 'TypedArray'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":26272,"length":10,"messageText":"'TypedArray' was also declared here.","category":3,"code":6203}]},{"start":408,"length":15,"messageText":"Duplicate identifier 'ArrayBufferView'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":26545,"length":15,"messageText":"'ArrayBufferView' was also declared here.","category":3,"code":6203}]}]],[542,[{"start":14128,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":15618,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/buffer.d.ts","start":85219,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[543,[{"start":6414,"length":6,"messageText":"Subsequent variable declarations must have the same type.  Variable 'global' must be of type 'Global & typeof globalThis', but here has type 'typeof globalThis'.","category":1,"code":2403,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.global.d.ts","start":12,"length":6,"messageText":"'global' was also declared here.","category":3,"code":6203}]},{"start":8656,"length":11,"messageText":"Subsequent variable declarations must have the same type.  Variable 'AbortSignal' must be of type '{ new (): AbortSignal; prototype: AbortSignal; abort(reason?: any): AbortSignal; timeout(milliseconds: number): AbortSignal; }', but here has type '{ new (): AbortSignal; prototype: AbortSignal; abort(reason?: any): AbortSignal; timeout(milliseconds: number): AbortSignal; any(signals: AbortSignal[]): AbortSignal; }'.","category":1,"code":2403,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":3971,"length":11,"messageText":"'AbortSignal' was also declared here.","category":3,"code":6203}]},{"start":17879,"length":29,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374},{"start":17968,"length":38,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374}]],[544,[{"start":43741,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43713,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43806,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":43834,"length":6,"messageText":"Duplicate identifier 'assert'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43713,"length":6,"messageText":"'assert' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert.d.ts","start":43806,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[545,[{"start":88,"length":6,"messageText":"Duplicate identifier 'strict'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert/strict.d.ts","start":88,"length":6,"messageText":"'strict' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert/strict.d.ts","start":191,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":191,"length":6,"messageText":"Duplicate identifier 'strict'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert/strict.d.ts","start":88,"length":6,"messageText":"'strict' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/assert/strict.d.ts","start":191,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[546,[{"start":11320,"length":13,"messageText":"Duplicate identifier 'AsyncResource'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/async_hooks.d.ts","start":4341,"length":13,"messageText":"'AsyncResource' was also declared here.","category":3,"code":6203}]},{"start":15844,"length":17,"messageText":"Duplicate identifier 'AsyncLocalStorage'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/async_hooks.d.ts","start":6944,"length":17,"messageText":"'AsyncLocalStorage' was also declared here.","category":3,"code":6203}]}]],[547,[{"start":118,"length":4,"messageText":"Definitions of the following identifiers conflict with those in another file: INSPECT_MAX_BYTES, kMaxLength, kStringMaxLength, constants, TranscodeEncoding, SlowBuffer, Buffer, Blob","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/buffer.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":123,"length":5,"messageText":"Duplicate identifier '_Blob'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":123,"length":5,"messageText":"'_Blob' was also declared here.","category":3,"code":6203}]},{"start":222,"length":5,"messageText":"Duplicate identifier '_File'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":222,"length":5,"messageText":"'_File' was also declared here.","category":3,"code":6203}]},{"start":5507,"length":6,"messageText":"Cannot export 'Buffer'. Only local declarations can be exported from a module.","category":1,"code":2661},{"start":9297,"length":4,"messageText":"Duplicate identifier 'File'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":9297,"length":4,"messageText":"'File' was also declared here.","category":3,"code":6203}]},{"start":9712,"length":4,"messageText":"Duplicate identifier 'atob'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":9712,"length":4,"messageText":"'atob' was also declared here.","category":3,"code":6203}]},{"start":9754,"length":4,"messageText":"Duplicate identifier 'btoa'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":9754,"length":4,"messageText":"'btoa' was also declared here.","category":3,"code":6203}]},{"start":9840,"length":14,"messageText":"Duplicate identifier 'BufferEncoding'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/buffer.d.ts","start":9840,"length":14,"messageText":"'BufferEncoding' was also declared here.","category":3,"code":6203}]},{"start":9905,"length":14,"messageText":"Duplicate identifier 'BufferEncoding'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2557,"length":14,"messageText":"'BufferEncoding' was also declared here.","category":3,"code":6203}]},{"start":10208,"length":20,"messageText":"Duplicate identifier 'WithImplicitCoercion'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2740,"length":20,"messageText":"'WithImplicitCoercion' was also declared here.","category":3,"code":6203}]},{"start":15618,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":4496,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":85219,"length":6,"messageText":"Duplicate identifier 'Buffer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":4496,"length":6,"messageText":"'Buffer' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.9.0/node_modules/@types/node/ts5.6/buffer.buffer.d.ts","start":14128,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[548,[{"start":3586,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Serializable, SendHandle, ChildProcess, StdioOptions, SerializationType, StdioNull, StdioPipe, ExecFileException","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3685,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":24855,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":24933,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25048,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25118,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25193,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25307,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25419,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25972,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26147,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26208,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26274,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26379,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26482,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26538,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26609,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26717,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26780,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26848,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26955,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27060,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27118,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27200,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27319,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27393,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27472,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27590,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27706,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27775,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27861,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28019,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28097,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28180,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28337,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":28457,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'ChildProcess' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: (code: number | null, signal: Signals | null) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"exit\", listener: (code: number | null, signal: Sign...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":29654,"length":6,"messageText":"Duplicate identifier 'IOType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":29654,"length":6,"messageText":"'IOType' was also declared here.","category":3,"code":6203}]},{"start":30574,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'cwd' must be of type 'string | undefined', but here has type 'string | URL | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":6763,"length":3,"messageText":"'cwd' was also declared here.","category":3,"code":6203}]},{"start":31805,"length":5,"messageText":"Subsequent property declarations must have the same type.  Property 'stdio' must be of type '\"pipe\" | (\"pipe\" | null | undefined)[] | undefined', but here has type 'StdioPipeNamed | StdioPipe[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":7981,"length":5,"messageText":"'stdio' was also declared here.","category":3,"code":6203}]},{"start":31922,"length":14,"messageText":"Duplicate identifier 'StdioPipeNamed'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/child_process.d.ts","start":31922,"length":14,"messageText":"'StdioPipeNamed' was also declared here.","category":3,"code":6203}]},{"start":67695,"length":8,"messageText":"All declarations of 'encoding' must have identical modifiers.","category":1,"code":2687},{"start":67695,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'encoding' must be of type 'BufferEncoding', but here has type '\"buffer\" | null | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/child_process.d.ts","start":28194,"length":8,"messageText":"'encoding' was also declared here.","category":3,"code":6203}]}]],[549,[{"start":4808,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'addressType' must be of type 'number | \"udp4\" | \"udp6\"', but here has type '4 | 6 | -1 | \"udp4\" | \"udp6\"'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/cluster.d.ts","start":809,"length":11,"messageText":"'addressType' was also declared here.","category":3,"code":6203}]},{"start":5123,"length":6,"messageText":"Duplicate identifier 'Worker'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/cluster.d.ts","start":893,"length":6,"messageText":"'Worker' was also declared here.","category":3,"code":6203}]},{"start":13934,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14012,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14082,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14159,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14251,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14336,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14514,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14997,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15066,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15127,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15195,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15278,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15354,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15523,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15580,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15651,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15714,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15784,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15869,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":15947,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16118,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16177,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16259,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16333,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16414,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16510,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16599,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16781,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16851,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":16937,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17015,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17100,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17200,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17293,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17479,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Worker' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"disconnect\", listener: () => void): this; (event: \"error\", listener: (error: Error) => void): this; (event: \"exit\", listener: (code: number, signal: string) => void): this; (event: \"listening\", listener: (address: Address) => void): this; (event: ...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":17996,"length":8,"messageText":"All declarations of 'isMaster' must have identical modifiers.","category":1,"code":2687},{"start":18447,"length":8,"messageText":"All declarations of 'isWorker' must have identical modifiers.","category":1,"code":2687},{"start":19800,"length":8,"messageText":"All declarations of 'settings' must have identical modifiers.","category":1,"code":2687},{"start":21937,"length":6,"messageText":"All declarations of 'worker' must have identical modifiers.","category":1,"code":2687},{"start":22784,"length":7,"messageText":"All declarations of 'workers' must have identical modifiers.","category":1,"code":2687},{"start":27890,"length":7,"messageText":"Duplicate identifier 'cluster'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/cluster.d.ts","start":27890,"length":7,"messageText":"'cluster' was also declared here.","category":3,"code":6203}]},{"start":27986,"length":7,"messageText":"Duplicate identifier 'default'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/cluster.d.ts","start":27986,"length":7,"messageText":"'default' was also declared here.","category":3,"code":6203}]}]],[550,[{"start":2594,"length":7,"messageText":"Duplicate identifier 'console'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":86,"length":7,"messageText":"'console' was also declared here.","category":3,"code":6203}]},{"start":2839,"length":7,"messageText":"Subsequent property declarations must have the same type.  Property 'Console' must be of type 'ConsoleConstructor', but here has type 'ConsoleConstructor'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":327,"length":7,"messageText":"'Console' was also declared here.","category":3,"code":6203}]},{"start":20936,"length":28,"messageText":"Duplicate identifier 'export='.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/console.d.ts","start":6206,"length":7,"messageText":"'export=' was also declared here.","category":3,"code":6203}]}]],[551,[{"start":510,"length":3,"messageText":"Duplicate identifier 'exp'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/constants.d.ts","start":495,"length":3,"messageText":"'exp' was also declared here.","category":3,"code":6203}]},{"start":610,"length":9,"messageText":"Duplicate identifier 'constants'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/constants.d.ts","start":595,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203}]}]],[552,[{"start":596,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Certificate, OPENSSL_VERSION_NUMBER, SSL_OP_ALL, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION, SSL_OP_CIPHER_SERVER_PREFERENCE, SSL_OP_CISCO_ANYCONNECT, SSL_OP_COOKIE_EXCHANGE, SSL_OP_CRYPTOPRO_TLSEXT_BUG, SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS, SSL_OP_LEGACY_SERVER_CONNECT, SSL_OP_NO_COMPRESSION, SSL_OP_NO_QUERY_MTU, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION, SSL_OP_NO_SSLv2, SSL_OP_NO_SSLv3, SSL_OP_NO_TICKET, SSL_OP_NO_TLSv1, SSL_OP_NO_TLSv1_1, SSL_OP_NO_TLSv1_2, SSL_OP_TLS_ROLLBACK_BUG, ENGINE_METHOD_RSA, ENGINE_METHOD_DSA, ENGINE_METHOD_DH, ENGINE_METHOD_RAND, ENGINE_METHOD_EC, ENGINE_METHOD_CIPHERS, ENGINE_METHOD_DIGESTS, ENGINE_METHOD_PKEY_METHS, ENGINE_METHOD_PKEY_ASN1_METHS, ENGINE_METHOD_ALL, ENGINE_METHOD_NONE, DH_CHECK_P_NOT_SAFE_PRIME, DH_CHECK_P_NOT_PRIME, DH_UNABLE_TO_CHECK_GENERATOR, DH_NOT_SUITABLE_GENERATOR, RSA_PKCS1_PADDING, RSA_SSLV23_PADDING, RSA_NO_PADDING, RSA_PKCS1_OAEP_PADDING, RSA_X931_PADDING, RSA_PKCS1_PSS_PADDING, RSA_PSS_SALTLEN_DIGEST, RSA_PSS_SALTLEN_MAX_SIGN, RSA_PSS_SALTLEN_AUTO, POINT_CONVERSION_COMPRESSED, POINT_CONVERSION_UNCOMPRESSED, POINT_CONVERSION_HYBRID, defaultCoreCipherList, defaultCipherList, fips, BinaryToTextEncoding, CharacterEncoding, LegacyCharacterEncoding, Encoding, ECDHKeyFormat, Hash, Hmac, KeyObjectType, KeyObject, CipherCCMTypes, CipherGCMTypes, CipherOCBTypes, BinaryLike, CipherKey, Cipher, Decipher, DSAEncoding, KeyLike, Sign, Verify, DiffieHellman, DiffieHellmanGroup, ECDH, KeyType, KeyFormat, UUID","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/crypto.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":596,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: SSL_OP_ALLOW_NO_DHE_KEX, SSL_OP_NO_ENCRYPT_THEN_MAC, SSL_OP_NO_RENEGOTIATION, SSL_OP_NO_TLSv1_3, SSL_OP_PRIORITIZE_CHACHA, CipherMode, X509Certificate, LargeNumberLike, subtle","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/crypto.d.ts","start":596,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":22153,"length":23,"messageText":"Duplicate index signature for type 'string'.","category":1,"code":2374},{"start":164410,"length":9,"messageText":"Cannot augment module 'webcrypto' with value exports because it resolves to a non-module entity.","category":1,"code":2649}]],[553,[{"start":852,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1223,"length":10,"messageText":"Duplicate identifier 'SocketType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dgram.d.ts","start":469,"length":10,"messageText":"'SocketType' was also declared here.","category":3,"code":6203}]},{"start":3517,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dgram.d.ts","start":1280,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203}]},{"start":24974,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25052,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25117,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25184,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25259,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25328,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25735,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25804,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25860,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25918,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":25984,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26044,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26132,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26203,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26261,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26321,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26389,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26451,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26541,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26623,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26692,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26763,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26842,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":26915,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27016,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27102,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27175,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27250,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27333,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":27410,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Socket' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connect\", listener: () => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"message\", listener: (msg: Buffer, rinfo: Remote...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}}]],[554,[{"start":2456,"length":15,"messageText":"Duplicate identifier 'ChannelListener'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/diagnostics_channel.d.ts","start":2456,"length":15,"messageText":"'ChannelListener' was also declared here.","category":3,"code":6203}]},{"start":5950,"length":7,"messageText":"Duplicate identifier 'Channel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/diagnostics_channel.d.ts","start":5950,"length":7,"messageText":"'Channel' was also declared here.","category":3,"code":6203}]},{"start":14479,"length":14,"messageText":"Duplicate identifier 'TracingChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/diagnostics_channel.d.ts","start":14479,"length":14,"messageText":"'TracingChannel' was also declared here.","category":3,"code":6203}]}]],[555,[{"start":1781,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ADDRCONFIG, V4MAPPED, ALL, AnyRecordWithTtl, AnyRecord, NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver, promises","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dns.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3013,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'family' must be of type 'number | undefined', but here has type 'number | \"IPv4\" | \"IPv6\" | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/dns.d.ts","start":311,"length":6,"messageText":"'family' was also declared here.","category":3,"code":6203}]}]],[556,[{"start":302,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: NODATA, FORMERR, SERVFAIL, NOTFOUND, NOTIMP, REFUSED, BADQUERY, BADNAME, BADFAMILY, BADRESP, CONNREFUSED, TIMEOUT, EOF, FILE, NOMEM, DESTRUCTION, BADSTR, BADFLAGS, NONAME, BADHINTS, NOTINITIALIZED, LOADIPHLPAPI, ADDRGETNETWORKPARAMS, CANCELLED, Resolver","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/dns/promises.d.ts","start":302,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[557,[{"start":1235,"length":6,"messageText":"Duplicate identifier 'Domain'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/domain.d.ts","start":507,"length":6,"messageText":"'Domain' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/domain.d.ts","start":549,"length":6,"messageText":"and here.","category":3,"code":6204}]}]],[559,[{"start":43047,"length":12,"messageText":"Duplicate identifier 'EventEmitter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/events.d.ts","start":3368,"length":12,"messageText":"'EventEmitter' was also declared here.","category":3,"code":6203}]},{"start":43146,"length":6,"messageText":"Duplicate identifier 'events'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/events.d.ts","start":3467,"length":6,"messageText":"'events' was also declared here.","category":3,"code":6203}]}]],[560,[{"start":543,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: PathOrFileDescriptor, TimeLike, EncodingOption, StatsFs, ReadPosition, WatchEventType, WatchListener, StatsListener, BigIntStatsListener","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/fs.d.ts","start":543,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":543,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: Type, promises, PathLike, NoParamCallback, BufferEncodingOption, OpenMode, Mode, Stats, Dirent, Dir, ReadStream, WriteStream, statSync, lstatSync, WriteFileOptions, F_OK, R_OK, W_OK, X_OK, COPYFILE_EXCL, COPYFILE_FICLONE, COPYFILE_FICLONE_FORCE, O_RDONLY, O_WRONLY, O_RDWR, O_CREAT, O_EXCL, O_NOCTTY, O_TRUNC, O_APPEND, O_DIRECTORY, O_NOATIME, O_NOFOLLOW, O_SYNC, O_DSYNC, O_SYMLINK, O_DIRECT, O_NONBLOCK, S_IFMT, S_IFREG, S_IFDIR, S_IFCHR, S_IFBLK, S_IFIFO, S_IFLNK, S_IFSOCK, S_IRWXU, S_IRUSR, S_IWUSR, S_IXUSR, S_IRWXG, S_IRGRP, S_IWGRP, S_IXGRP, S_IRWXO, S_IROTH, S_IWOTH, S_IXOTH, UV_FS_O_FILEMAP","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":621,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":112310,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'position' must be of type 'number | null | undefined', but here has type 'ReadPosition | null | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs.d.ts","start":85014,"length":8,"messageText":"'position' was also declared here.","category":3,"code":6203}]}]],[561,[{"start":462,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":21495,"length":9,"messageText":"Cannot redeclare block-scoped variable 'constants'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/fs/promises.d.ts","start":8642,"length":9,"messageText":"'constants' was also declared here.","category":3,"code":6203}]}]],[562,[{"start":1556,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeader, RequestListener, Server, OutgoingMessage, ServerResponse, ClientRequest, IncomingMessage, Agent, METHODS, STATUS_CODES, globalAgent, maxHeaderSize","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":9136,"length":16,"messageText":"Subsequent property declarations must have the same type.  Property 'createConnection' must be of type '((options: ClientRequestArgs, oncreate: (err: Error, socket: Socket) => void) => Socket) | undefined', but here has type '((options: ClientRequestArgs, oncreate: (err: Error | null, socket: Duplex) => void) => Duplex | null | undefined) | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":4400,"length":16,"messageText":"'createConnection' was also declared here.","category":3,"code":6203}]},{"start":10367,"length":13,"messageText":"All declarations of 'ServerOptions' must have identical type parameters.","category":1,"code":2428},{"start":14223,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":14555,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":14692,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":14756,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":14810,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":19640,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":19740,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":20220,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":21983,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":22074,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":22483,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":23030,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":23123,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":23575,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24225,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24329,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":24860,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":25545,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":25653,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":26200,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":72263,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":72360,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":72388,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":72546,"length":21,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Request>' does not satisfy the constraint 'IncomingMessage'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'setTimeout(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'IncomingMessage' is not assignable to type 'InstanceType<Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http\").IncomingMessage' is not assignable to type 'import(\"http\").IncomingMessage'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":72641,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":72703,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":72737,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Types of construct signatures are incompatible.","category":1,"code":2419,"next":[{"messageText":"Type 'new <Request extends IncomingMessage = IncomingMessage>(req: Request) => ServerResponse<Request>' is not assignable to type 'new (req: IncomingMessage) => ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Property 'upgrading' is missing in type 'ServerResponse<IncomingMessage>' but required in type 'ServerResponse'.","category":1,"code":2741,"canonicalHead":{"code":2322,"messageText":"Type 'ServerResponse<IncomingMessage>' is not assignable to type 'ServerResponse'."}}]}],"canonicalHead":{"code":2719,"messageText":"Type 'typeof import(\"http\").ServerResponse' is not assignable to type 'typeof import(\"http\").ServerResponse'. Two different types with this name exist, but they are unrelated."}}]},"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http.d.ts","start":13372,"length":9,"messageText":"'upgrading' is declared here.","category":3,"code":2728}]},{"start":86919,"length":9,"messageText":"Cannot redeclare block-scoped variable 'WebSocket'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http.d.ts","start":85482,"length":9,"messageText":"'WebSocket' was also declared here.","category":3,"code":6203}]},{"start":87012,"length":10,"messageText":"Cannot redeclare block-scoped variable 'CloseEvent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http.d.ts","start":85575,"length":10,"messageText":"'CloseEvent' was also declared here.","category":3,"code":6203}]},{"start":87107,"length":12,"messageText":"Cannot redeclare block-scoped variable 'MessageEvent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http.d.ts","start":85670,"length":12,"messageText":"'MessageEvent' was also declared here.","category":3,"code":6203}]}]],[563,[{"start":298,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: OutgoingHttpHeaders, Http2ServerRequest, Http2ServerResponse, NGHTTP2_SESSION_SERVER, NGHTTP2_SESSION_CLIENT, NGHTTP2_STREAM_STATE_IDLE, NGHTTP2_STREAM_STATE_OPEN, NGHTTP2_STREAM_STATE_RESERVED_LOCAL, NGHTTP2_STREAM_STATE_RESERVED_REMOTE, NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL, NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE, NGHTTP2_STREAM_STATE_CLOSED, NGHTTP2_NO_ERROR, NGHTTP2_PROTOCOL_ERROR, NGHTTP2_INTERNAL_ERROR, NGHTTP2_FLOW_CONTROL_ERROR, NGHTTP2_SETTINGS_TIMEOUT, NGHTTP2_STREAM_CLOSED, NGHTTP2_FRAME_SIZE_ERROR, NGHTTP2_REFUSED_STREAM, NGHTTP2_CANCEL, NGHTTP2_COMPRESSION_ERROR, NGHTTP2_CONNECT_ERROR, NGHTTP2_ENHANCE_YOUR_CALM, NGHTTP2_INADEQUATE_SECURITY, NGHTTP2_HTTP_1_1_REQUIRED, NGHTTP2_ERR_FRAME_SIZE_ERROR, NGHTTP2_FLAG_NONE, NGHTTP2_FLAG_END_STREAM, NGHTTP2_FLAG_END_HEADERS, NGHTTP2_FLAG_ACK, NGHTTP2_FLAG_PADDED, NGHTTP2_FLAG_PRIORITY, DEFAULT_SETTINGS_HEADER_TABLE_SIZE, DEFAULT_SETTINGS_ENABLE_PUSH, DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE, DEFAULT_SETTINGS_MAX_FRAME_SIZE, MAX_MAX_FRAME_SIZE, MIN_MAX_FRAME_SIZE, MAX_INITIAL_WINDOW_SIZE, NGHTTP2_DEFAULT_WEIGHT, NGHTTP2_SETTINGS_HEADER_TABLE_SIZE, NGHTTP2_SETTINGS_ENABLE_PUSH, NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS, NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE, NGHTTP2_SETTINGS_MAX_FRAME_SIZE, NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE, PADDING_STRATEGY_NONE, PADDING_STRATEGY_MAX, PADDING_STRATEGY_CALLBACK, HTTP2_HEADER_STATUS, HTTP2_HEADER_METHOD, HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_SCHEME, HTTP2_HEADER_PATH, HTTP2_HEADER_ACCEPT_CHARSET, HTTP2_HEADER_ACCEPT_ENCODING, HTTP2_HEADER_ACCEPT_LANGUAGE, HTTP2_HEADER_ACCEPT_RANGES, HTTP2_HEADER_ACCEPT, HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN, HTTP2_HEADER_AGE, HTTP2_HEADER_ALLOW, HTTP2_HEADER_AUTHORIZATION, HTTP2_HEADER_CACHE_CONTROL, HTTP2_HEADER_CONNECTION, HTTP2_HEADER_CONTENT_DISPOSITION, HTTP2_HEADER_CONTENT_ENCODING, HTTP2_HEADER_CONTENT_LANGUAGE, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_CONTENT_LOCATION, HTTP2_HEADER_CONTENT_MD5, HTTP2_HEADER_CONTENT_RANGE, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_COOKIE, HTTP2_HEADER_DATE, HTTP2_HEADER_ETAG, HTTP2_HEADER_EXPECT, HTTP2_HEADER_EXPIRES, HTTP2_HEADER_FROM, HTTP2_HEADER_HOST, HTTP2_HEADER_IF_MATCH, HTTP2_HEADER_IF_MODIFIED_SINCE, HTTP2_HEADER_IF_NONE_MATCH, HTTP2_HEADER_IF_RANGE, HTTP2_HEADER_IF_UNMODIFIED_SINCE, HTTP2_HEADER_LAST_MODIFIED, HTTP2_HEADER_LINK, HTTP2_HEADER_LOCATION, HTTP2_HEADER_MAX_FORWARDS, HTTP2_HEADER_PREFER, HTTP2_HEADER_PROXY_AUTHENTICATE, HTTP2_HEADER_PROXY_AUTHORIZATION, HTTP2_HEADER_RANGE, HTTP2_HEADER_REFERER, HTTP2_HEADER_REFRESH, HTTP2_HEADER_RETRY_AFTER, HTTP2_HEADER_SERVER, HTTP2_HEADER_SET_COOKIE, HTTP2_HEADER_STRICT_TRANSPORT_SECURITY, HTTP2_HEADER_TRANSFER_ENCODING, HTTP2_HEADER_TE, HTTP2_HEADER_UPGRADE, HTTP2_HEADER_USER_AGENT, HTTP2_HEADER_VARY, HTTP2_HEADER_VIA, HTTP2_HEADER_WWW_AUTHENTICATE, HTTP2_HEADER_HTTP2_SETTINGS, HTTP2_HEADER_KEEP_ALIVE, HTTP2_HEADER_PROXY_CONNECTION, HTTP2_METHOD_ACL, HTTP2_METHOD_BASELINE_CONTROL, HTTP2_METHOD_BIND, HTTP2_METHOD_CHECKIN, HTTP2_METHOD_CHECKOUT, HTTP2_METHOD_CONNECT, HTTP2_METHOD_COPY, HTTP2_METHOD_DELETE, HTTP2_METHOD_GET, HTTP2_METHOD_HEAD, HTTP2_METHOD_LABEL, HTTP2_METHOD_LINK, HTTP2_METHOD_LOCK, HTTP2_METHOD_MERGE, HTTP2_METHOD_MKACTIVITY, HTTP2_METHOD_MKCALENDAR, HTTP2_METHOD_MKCOL, HTTP2_METHOD_MKREDIRECTREF, HTTP2_METHOD_MKWORKSPACE, HTTP2_METHOD_MOVE, HTTP2_METHOD_OPTIONS, HTTP2_METHOD_ORDERPATCH, HTTP2_METHOD_PATCH, HTTP2_METHOD_POST, HTTP2_METHOD_PRI, HTTP2_METHOD_PROPFIND, HTTP2_METHOD_PROPPATCH, HTTP2_METHOD_PUT, HTTP2_METHOD_REBIND, HTTP2_METHOD_REPORT, HTTP2_METHOD_SEARCH, HTTP2_METHOD_TRACE, HTTP2_METHOD_UNBIND, HTTP2_METHOD_UNCHECKOUT, HTTP2_METHOD_UNLINK, HTTP2_METHOD_UNLOCK, HTTP2_METHOD_UPDATE, HTTP2_METHOD_UPDATEREDIRECTREF, HTTP2_METHOD_VERSION_CONTROL, HTTP_STATUS_CONTINUE, HTTP_STATUS_SWITCHING_PROTOCOLS, HTTP_STATUS_PROCESSING, HTTP_STATUS_OK, HTTP_STATUS_CREATED, HTTP_STATUS_ACCEPTED, HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION, HTTP_STATUS_NO_CONTENT, HTTP_STATUS_RESET_CONTENT, HTTP_STATUS_PARTIAL_CONTENT, HTTP_STATUS_MULTI_STATUS, HTTP_STATUS_ALREADY_REPORTED, HTTP_STATUS_IM_USED, HTTP_STATUS_MULTIPLE_CHOICES, HTTP_STATUS_MOVED_PERMANENTLY, HTTP_STATUS_FOUND, HTTP_STATUS_SEE_OTHER, HTTP_STATUS_NOT_MODIFIED, HTTP_STATUS_USE_PROXY, HTTP_STATUS_TEMPORARY_REDIRECT, HTTP_STATUS_PERMANENT_REDIRECT, HTTP_STATUS_BAD_REQUEST, HTTP_STATUS_UNAUTHORIZED, HTTP_STATUS_PAYMENT_REQUIRED, HTTP_STATUS_FORBIDDEN, HTTP_STATUS_NOT_FOUND, HTTP_STATUS_METHOD_NOT_ALLOWED, HTTP_STATUS_NOT_ACCEPTABLE, HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED, HTTP_STATUS_REQUEST_TIMEOUT, HTTP_STATUS_CONFLICT, HTTP_STATUS_GONE, HTTP_STATUS_LENGTH_REQUIRED, HTTP_STATUS_PRECONDITION_FAILED, HTTP_STATUS_PAYLOAD_TOO_LARGE, HTTP_STATUS_URI_TOO_LONG, HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE, HTTP_STATUS_RANGE_NOT_SATISFIABLE, HTTP_STATUS_EXPECTATION_FAILED, HTTP_STATUS_TEAPOT, HTTP_STATUS_MISDIRECTED_REQUEST, HTTP_STATUS_UNPROCESSABLE_ENTITY, HTTP_STATUS_LOCKED, HTTP_STATUS_FAILED_DEPENDENCY, HTTP_STATUS_UNORDERED_COLLECTION, HTTP_STATUS_UPGRADE_REQUIRED, HTTP_STATUS_PRECONDITION_REQUIRED, HTTP_STATUS_TOO_MANY_REQUESTS, HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE, HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS, HTTP_STATUS_INTERNAL_SERVER_ERROR, HTTP_STATUS_NOT_IMPLEMENTED, HTTP_STATUS_BAD_GATEWAY, HTTP_STATUS_SERVICE_UNAVAILABLE, HTTP_STATUS_GATEWAY_TIMEOUT, HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED, HTTP_STATUS_VARIANT_ALSO_NEGOTIATES, HTTP_STATUS_INSUFFICIENT_STORAGE, HTTP_STATUS_LOOP_DETECTED, HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED, HTTP_STATUS_NOT_EXTENDED, HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":53068,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":53262,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":62480,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":62674,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":62771,"length":20,"messageText":"Subsequent property declarations must have the same type.  Property 'Http1IncomingMessage' must be of type 'typeof IncomingMessage | undefined', but here has type 'Http1Request | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29470,"length":20,"messageText":"'Http1IncomingMessage' was also declared here.","category":3,"code":6203}]},{"start":62828,"length":19,"messageText":"Subsequent property declarations must have the same type.  Property 'Http1ServerResponse' must be of type 'typeof ServerResponse | undefined', but here has type 'Http1Response | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29537,"length":19,"messageText":"'Http1ServerResponse' was also declared here.","category":3,"code":6203}]},{"start":62885,"length":18,"messageText":"Subsequent property declarations must have the same type.  Property 'Http2ServerRequest' must be of type 'typeof Http2ServerRequest | undefined', but here has type 'Http2Request | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29602,"length":18,"messageText":"'Http2ServerRequest' was also declared here.","category":3,"code":6203}]},{"start":62940,"length":19,"messageText":"Subsequent property declarations must have the same type.  Property 'Http2ServerResponse' must be of type 'typeof Http2ServerResponse | undefined', but here has type 'Http2Response | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/http2.d.ts","start":29670,"length":19,"messageText":"'Http2ServerResponse' was also declared here.","category":3,"code":6203}]},{"start":63277,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":63471,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":63807,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":64001,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":64327,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":64521,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":65259,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":65453,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":71189,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":71383,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":110842,"length":45,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":110842,"length":45,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS' was also declared here.","category":3,"code":6203}]},{"start":110911,"length":41,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":110911,"length":41,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":110976,"length":41,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_METHODS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":110976,"length":41,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_ALLOW_METHODS' was also declared here.","category":3,"code":6203}]},{"start":111105,"length":42,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":111105,"length":42,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":111171,"length":43,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_HEADERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":111171,"length":43,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_HEADERS' was also declared here.","category":3,"code":6203}]},{"start":111238,"length":42,"messageText":"Cannot redeclare block-scoped variable 'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":111238,"length":42,"messageText":"'HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD' was also declared here.","category":3,"code":6203}]},{"start":118720,"length":16,"messageText":"Cannot redeclare block-scoped variable 'sensitiveHeaders'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/http2.d.ts","start":118720,"length":16,"messageText":"'sensitiveHeaders' was also declared here.","category":3,"code":6203}]},{"start":121317,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":121511,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":122990,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":123184,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}},{"start":125067,"length":26,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":125261,"length":26,"code":2344,"category":1,"messageText":{"messageText":"Type 'InstanceType<Http2Request>' does not satisfy the constraint 'Http2ServerRequest'.","category":1,"code":2344,"next":[{"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated.","category":1,"code":2719,"next":[{"messageText":"The types returned by 'addListener(...)' are incompatible between these types.","category":1,"code":2201,"next":[{"messageText":"Type 'Http2ServerRequest' is not assignable to type 'InstanceType<Http2Request>'.","category":1,"code":2322,"canonicalHead":{"code":2719,"messageText":"Type 'import(\"http2\").Http2ServerRequest' is not assignable to type 'import(\"http2\").Http2ServerRequest'. Two different types with this name exist, but they are unrelated."}}]}]}]}}]],[564,[{"start":369,"length":13,"messageText":"Duplicate identifier 'ServerOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":169,"length":13,"messageText":"'ServerOptions' was also declared here.","category":3,"code":6203}]},{"start":519,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":652,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":672,"length":14,"messageText":"Duplicate identifier 'RequestOptions'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":450,"length":14,"messageText":"'RequestOptions' was also declared here.","category":3,"code":6203}]},{"start":1326,"length":5,"messageText":"Duplicate identifier 'Agent'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":967,"length":5,"messageText":"'Agent' was also declared here.","category":3,"code":6203}]},{"start":1449,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1091,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1322,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1592,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":1680,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":1787,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1091,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":1322,"length":6,"messageText":"and here.","category":3,"code":6204}]},{"start":1930,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":2078,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":2155,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":2226,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":3994,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":4099,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":4450,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":5737,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":5891,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":6208,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'abstract new (...args: any) => any'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'abstract new (...args: any) => any'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (...args: any): any'.","category":1,"code":2658}]}]}},{"start":7623,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":7719,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":8008,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9449,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9547,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":9842,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11417,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11526,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":11889,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":13558,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":13671,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":14046,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15482,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":15589,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15617,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15790,"length":21,"messageText":"Type 'typeof ServerResponse' has no signatures for which the type argument list is applicable.","category":1,"code":2635},{"start":15890,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15957,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":15991,"length":8,"code":2344,"category":1,"messageText":{"messageText":"Type 'Response' does not satisfy the constraint 'typeof ServerResponse'.","category":1,"code":2344,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' is not assignable to type 'typeof ServerResponse'.","category":1,"code":2322,"next":[{"messageText":"Type 'typeof http.ServerResponse<InstanceType<Request>>' provides no match for the signature 'new (req: IncomingMessage): ServerResponse'.","category":1,"code":2658}]}]}},{"start":24696,"length":11,"messageText":"Cannot redeclare block-scoped variable 'globalAgent'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/https.d.ts","start":14527,"length":11,"messageText":"'globalAgent' was also declared here.","category":3,"code":6203}]}]],[565,[{"start":524,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ResourceType, RequestId, TimeSinceEpoch, MonotonicTime, console, Session, open, close, url, waitForDebugger, InspectorNotification, Schema, Runtime, Debugger, Console, Profiler, HeapProfiler, NodeTracing, NodeWorker, Network, NodeRuntime","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/inspector.d.ts","start":524,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":524,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: ScriptId, RemoteObjectId, UnserializableValue, ExecutionContextId, Timestamp, UniqueDebuggerId, BreakpointId, CallFrameId, HeapSnapshotObjectId, WorkerID, SessionID, Session","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/inspector.d.ts","start":321,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":87593,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87771,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":87971,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88217,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88481,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88656,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":88887,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89111,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89401,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89718,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":89954,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90218,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90506,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90726,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":90879,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91132,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91297,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91464,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91635,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":91721,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92218,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92513,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":92755,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93083,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93239,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93471,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":93803,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94062,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94291,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94444,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":94591,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95001,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":95262,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99242,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99411,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99602,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":99839,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100094,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100260,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100482,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100697,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":100978,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101286,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101513,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":101768,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102047,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102258,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102402,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102646,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102802,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":102960,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103122,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103199,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103687,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":103973,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104206,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104525,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104672,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":104895,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105218,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105468,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105688,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105832,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":105970,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106371,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106623,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106704,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":106875,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107068,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107307,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107564,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107732,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":107956,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108173,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108456,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108766,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":108995,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109252,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109533,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109746,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":109892,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110138,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110296,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110456,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110620,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":110699,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111189,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111477,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":111712,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112033,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112182,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112407,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112732,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":112984,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113206,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113352,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113492,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":113895,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114149,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114232,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114414,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114618,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":114868,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115136,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115315,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115550,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":115778,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116072,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116393,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116633,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":116901,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117193,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117417,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117574,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":117831,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118000,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118171,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118346,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118436,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":118937,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119236,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119482,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119814,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":119974,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120210,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120546,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":120809,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121042,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121199,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121350,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":121764,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122029,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122123,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122309,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122517,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":122771,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123043,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123226,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123465,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123697,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":123995,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124320,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124564,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":124836,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125132,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125360,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125521,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125782,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":125955,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126130,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126309,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126403,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":126908,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127211,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127461,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127797,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":127961,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128201,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128541,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":128808,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129045,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129206,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129361,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":129779,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":130048,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154428,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154606,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":154806,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155052,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155316,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155491,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155722,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":155946,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156236,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156553,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":156789,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157053,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157341,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157561,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157714,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":157967,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158132,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158299,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158470,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":158556,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159053,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159348,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159590,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":159918,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160074,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160306,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160638,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":160897,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161126,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161279,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161426,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":161836,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":162097,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166077,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166246,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166437,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166674,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":166929,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167095,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167317,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167532,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":167813,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168121,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168348,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168603,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":168882,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169093,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169237,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169481,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169637,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169795,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":169957,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170034,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170522,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":170808,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171041,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171360,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171507,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":171730,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172053,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172303,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172523,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172667,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":172805,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173206,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173458,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173539,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173710,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":173903,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174142,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174399,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174567,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":174791,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175008,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175291,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175601,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":175830,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176087,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176368,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176581,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176727,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":176973,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177131,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177291,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177455,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":177534,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178024,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178312,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178547,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":178868,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179017,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179242,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179567,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":179819,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180041,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180187,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180327,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180730,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":180984,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181067,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181249,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181453,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181703,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":181971,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182150,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182385,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182613,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":182907,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183228,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183468,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":183736,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184028,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184252,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184409,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184666,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":184835,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185006,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185181,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185271,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":185772,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186071,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186317,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186649,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":186809,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187045,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187381,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187644,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":187877,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188034,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188185,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188599,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188864,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":188958,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189144,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189352,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189606,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":189878,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190061,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190300,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190532,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":190830,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191155,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191399,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191671,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":191967,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192195,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192356,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192617,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192790,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":192965,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193144,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193238,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":193743,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194046,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194296,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194632,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":194796,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195036,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195376,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195643,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":195880,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196041,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196196,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196614,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":196883,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Session' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"inspectorNotification\", listener: (message: InspectorNotification<object>) => void): this; (event: \"Runtime.executionContextCreated\", listener: (message: InspectorNotification<...>) => void): this; (event: \"Runtime.executionContextDestroyed\", list...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}}]],[566,[{"start":18211,"length":6,"messageText":"Duplicate identifier 'Module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/module.d.ts","start":1633,"length":6,"messageText":"'Module' was also declared here.","category":3,"code":6203}]},{"start":18304,"length":6,"messageText":"Duplicate identifier 'module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/module.d.ts","start":1726,"length":6,"messageText":"'module' was also declared here.","category":3,"code":6203}]}]],[567,[{"start":448,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":540,"length":14,"messageText":"Duplicate identifier 'LookupFunction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":148,"length":14,"messageText":"'LookupFunction' was also declared here.","category":3,"code":6203}]},{"start":2425,"length":17,"messageText":"Duplicate identifier 'SocketConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":1979,"length":17,"messageText":"'SocketConnectOpts' was also declared here.","category":3,"code":6203}]},{"start":2499,"length":16,"messageText":"Duplicate identifier 'SocketReadyState'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":2053,"length":16,"messageText":"'SocketReadyState' was also declared here.","category":3,"code":6203}]},{"start":3299,"length":6,"messageText":"Duplicate identifier 'Socket'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":2141,"length":6,"messageText":"'Socket' was also declared here.","category":3,"code":6203}]},{"start":25851,"length":6,"messageText":"Duplicate identifier 'Server'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":9941,"length":6,"messageText":"'Server' was also declared here.","category":3,"code":6203}]},{"start":32286,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32364,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32429,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32513,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32588,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":32657,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33055,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33124,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33180,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33255,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33321,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33381,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33455,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33526,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33584,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33661,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33729,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33791,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33867,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":33949,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34018,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34106,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34185,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34258,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34345,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34431,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34504,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34596,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34679,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":34756,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Server' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"connection\", listener: (socket: Socket) => void): this; (event: \"error\", listener: (err: Error) => void): this; (event: \"listening\", listener: () => void): this; (event: \"drop\", listener: (data?: DropA...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":35056,"length":9,"messageText":"Duplicate identifier 'IPVersion'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":35056,"length":9,"messageText":"'IPVersion' was also declared here.","category":3,"code":6203}]},{"start":35332,"length":9,"messageText":"Duplicate identifier 'BlockList'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":35332,"length":9,"messageText":"'BlockList' was also declared here.","category":3,"code":6203}]},{"start":38277,"length":14,"messageText":"Duplicate identifier 'NetConnectOpts'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/net.d.ts","start":13707,"length":14,"messageText":"'NetConnectOpts' was also declared here.","category":3,"code":6203}]},{"start":45661,"length":13,"messageText":"Duplicate identifier 'SocketAddress'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/net.d.ts","start":45661,"length":13,"messageText":"'SocketAddress' was also declared here.","category":3,"code":6203}]}]],[568,[{"start":245,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: NetworkInterfaceInfo, SignalConstants, UV_UDP_REUSEADDR, E2BIG, EACCES, EADDRINUSE, EADDRNOTAVAIL, EAFNOSUPPORT, EAGAIN, EALREADY, EBADF, EBADMSG, EBUSY, ECANCELED, ECHILD, ECONNABORTED, ECONNREFUSED, ECONNRESET, EDEADLK, EDESTADDRREQ, EDOM, EDQUOT, EEXIST, EFAULT, EFBIG, EHOSTUNREACH, EIDRM, EILSEQ, EINPROGRESS, EINTR, EINVAL, EIO, EISCONN, EISDIR, ELOOP, EMFILE, EMLINK, EMSGSIZE, EMULTIHOP, ENAMETOOLONG, ENETDOWN, ENETRESET, ENETUNREACH, ENFILE, ENOBUFS, ENODATA, ENODEV, ENOENT, ENOEXEC, ENOLCK, ENOLINK, ENOMEM, ENOMSG, ENOPROTOOPT, ENOSPC, ENOSR, ENOSTR, ENOSYS, ENOTCONN, ENOTDIR, ENOTEMPTY, ENOTSOCK, ENOTSUP, ENOTTY, ENXIO, EOPNOTSUPP, EOVERFLOW, EPERM, EPIPE, EPROTO, EPROTONOSUPPORT, EPROTOTYPE, ERANGE, EROFS, ESPIPE, ESRCH, ESTALE, ETIME, ETIMEDOUT, ETXTBSY, EWOULDBLOCK, EXDEV, WSAEINTR, WSAEBADF, WSAEACCES, WSAEFAULT, WSAEINVAL, WSAEMFILE, WSAEWOULDBLOCK, WSAEINPROGRESS, WSAEALREADY, WSAENOTSOCK, WSAEDESTADDRREQ, WSAEMSGSIZE, WSAEPROTOTYPE, WSAENOPROTOOPT, WSAEPROTONOSUPPORT, WSAESOCKTNOSUPPORT, WSAEOPNOTSUPP, WSAEPFNOSUPPORT, WSAEAFNOSUPPORT, WSAEADDRINUSE, WSAEADDRNOTAVAIL, WSAENETDOWN, WSAENETUNREACH, WSAENETRESET, WSAECONNABORTED, WSAECONNRESET, WSAENOBUFS, WSAEISCONN, WSAENOTCONN, WSAESHUTDOWN, WSAETOOMANYREFS, WSAETIMEDOUT, WSAECONNREFUSED, WSAELOOP, WSAENAMETOOLONG, WSAEHOSTDOWN, WSAEHOSTUNREACH, WSAENOTEMPTY, WSAEPROCLIM, WSAEUSERS, WSAEDQUOT, WSAESTALE, WSAEREMOTE, WSASYSNOTREADY, WSAVERNOTSUPPORTED, WSANOTINITIALISED, WSAEDISCON, WSAENOMORE, WSAECANCELLED, WSAEINVALIDPROCTABLE, WSAEINVALIDPROVIDER, WSAEPROVIDERFAILEDINIT, WSASYSCALLFAILURE, WSASERVICE_NOT_FOUND, WSATYPE_NOT_FOUND, WSA_E_NO_MORE, WSA_E_CANCELLED, WSAEREFUSED, PRIORITY_LOW, PRIORITY_BELOW_NORMAL, PRIORITY_NORMAL, PRIORITY_ABOVE_NORMAL, PRIORITY_HIGH, PRIORITY_HIGHEST, EOL","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/os.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":1410,"length":5,"messageText":"Subsequent property declarations must have the same type.  Property 'shell' must be of type 'T', but here has type 'T | null'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/os.d.ts","start":781,"length":5,"messageText":"'shell' was also declared here.","category":3,"code":6203}]},{"start":8835,"length":7,"messageText":"Cannot augment module 'signals' with value exports because it resolves to a non-module entity.","category":1,"code":2649},{"start":14142,"length":9,"messageText":"Cannot redeclare block-scoped variable 'RTLD_LAZY'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14142,"length":9,"messageText":"'RTLD_LAZY' was also declared here.","category":3,"code":6203}]},{"start":14179,"length":8,"messageText":"Cannot redeclare block-scoped variable 'RTLD_NOW'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14179,"length":8,"messageText":"'RTLD_NOW' was also declared here.","category":3,"code":6203}]},{"start":14215,"length":11,"messageText":"Cannot redeclare block-scoped variable 'RTLD_GLOBAL'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14215,"length":11,"messageText":"'RTLD_GLOBAL' was also declared here.","category":3,"code":6203}]},{"start":14254,"length":10,"messageText":"Cannot redeclare block-scoped variable 'RTLD_LOCAL'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14254,"length":10,"messageText":"'RTLD_LOCAL' was also declared here.","category":3,"code":6203}]},{"start":14292,"length":13,"messageText":"Cannot redeclare block-scoped variable 'RTLD_DEEPBIND'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14292,"length":13,"messageText":"'RTLD_DEEPBIND' was also declared here.","category":3,"code":6203}]},{"start":14646,"length":7,"messageText":"Cannot redeclare block-scoped variable 'devNull'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/os.d.ts","start":14646,"length":7,"messageText":"'devNull' was also declared here.","category":3,"code":6203}]}]],[569,[{"start":78,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":164,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":7948,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7032,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7117,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8033,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7032,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/path.d.ts","start":7117,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8130,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":8227,"length":4,"messageText":"Duplicate identifier 'path'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":78,"length":4,"messageText":"'path' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":164,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8130,"length":4,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/path.d.ts","start":8227,"length":4,"messageText":"and here.","category":3,"code":6204}]}]],[570,[{"start":1157,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: EntryType, PerformanceEntry, PerformanceNodeTiming, PerformanceObserverEntryList, PerformanceObserverCallback, PerformanceObserver, NODE_PERFORMANCE_GC_MAJOR, NODE_PERFORMANCE_GC_MINOR, NODE_PERFORMANCE_GC_INCREMENTAL, NODE_PERFORMANCE_GC_WEAKCB, NODE_PERFORMANCE_GC_FLAGS_NO, NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED, NODE_PERFORMANCE_GC_FLAGS_FORCED, NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING, NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE, NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY, NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE, performance","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/perf_hooks.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":3811,"length":15,"messageText":"Duplicate identifier 'PerformanceMark'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","start":3811,"length":15,"messageText":"'PerformanceMark' was also declared here.","category":3,"code":6203}]},{"start":4134,"length":18,"messageText":"Duplicate identifier 'PerformanceMeasure'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","start":4134,"length":18,"messageText":"'PerformanceMeasure' was also declared here.","category":3,"code":6203}]},{"start":7826,"length":24,"messageText":"Duplicate identifier 'EventLoopUtilityFunction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","start":6911,"length":24,"messageText":"'EventLoopUtilityFunction' was also declared here.","category":3,"code":6203}]},{"start":24139,"length":25,"messageText":"Duplicate identifier 'PerformanceResourceTiming'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/perf_hooks.d.ts","start":23224,"length":25,"messageText":"'PerformanceResourceTiming' was also declared here.","category":3,"code":6203}]},{"start":24209,"length":9,"code":2416,"category":1,"messageText":{"messageText":"Property 'entryType' in type 'PerformanceResourceTiming' is not assignable to the same property in base type 'PerformanceEntry'.","category":1,"code":2416,"next":[{"messageText":"Type '\"resource\"' is not assignable to type 'EntryType'.","category":1,"code":2322}]}}]],[571,[{"start":0,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: process, Platform, Signals, UncaughtExceptionOrigin, MultipleResolveType, BeforeExitListener, DisconnectListener, ExitListener, RejectionHandledListener, UncaughtExceptionListener, UnhandledRejectionListener, WarningListener, MessageListener, SignalsListener, MultipleResolveListener","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":9012,"length":12,"messageText":"Duplicate identifier 'Architecture'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/process.d.ts","start":9012,"length":12,"messageText":"'Architecture' was also declared here.","category":3,"code":6203}]},{"start":11660,"length":14,"messageText":"Duplicate identifier 'WorkerListener'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/process.d.ts","start":11660,"length":14,"messageText":"'WorkerListener' was also declared here.","category":3,"code":6203}]},{"start":42925,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'exitCode' must be of type 'number | undefined', but here has type 'string | number | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":8849,"length":8,"messageText":"'exitCode' was also declared here.","category":3,"code":6203}]},{"start":47690,"length":6,"messageText":"All declarations of 'getgid' must have identical modifiers.","category":1,"code":2687},{"start":49008,"length":6,"messageText":"All declarations of 'setgid' must have identical modifiers.","category":1,"code":2687},{"start":49741,"length":6,"messageText":"All declarations of 'getuid' must have identical modifiers.","category":1,"code":2687},{"start":51005,"length":6,"messageText":"All declarations of 'setuid' must have identical modifiers.","category":1,"code":2687},{"start":51754,"length":7,"messageText":"All declarations of 'geteuid' must have identical modifiers.","category":1,"code":2687},{"start":53081,"length":7,"messageText":"All declarations of 'seteuid' must have identical modifiers.","category":1,"code":2687},{"start":53840,"length":7,"messageText":"All declarations of 'getegid' must have identical modifiers.","category":1,"code":2687},{"start":55176,"length":7,"messageText":"All declarations of 'setegid' must have identical modifiers.","category":1,"code":2687},{"start":55966,"length":9,"messageText":"All declarations of 'getgroups' must have identical modifiers.","category":1,"code":2687},{"start":57174,"length":9,"messageText":"All declarations of 'setgroups' must have identical modifiers.","category":1,"code":2687},{"start":60263,"length":7,"messageText":"All declarations of 'version' must have identical modifiers.","category":1,"code":2687},{"start":62018,"length":8,"messageText":"All declarations of 'versions' must have identical modifiers.","category":1,"code":2687},{"start":63647,"length":6,"messageText":"All declarations of 'config' must have identical modifiers.","category":1,"code":2687},{"start":63647,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'config' must be of type '{ target_defaults: { cflags: any[]; default_configuration: string; defines: string[]; include_dirs: string[]; libraries: string[]; }; variables: { clang: number; host_arch: string; node_install_npm: boolean; ... 11 more ...; visibility: string; }; }', but here has type 'ProcessConfig'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":9586,"length":6,"messageText":"'config' was also declared here.","category":3,"code":6203}]},{"start":66584,"length":3,"messageText":"All declarations of 'pid' must have identical modifiers.","category":1,"code":2687},{"start":67044,"length":4,"messageText":"All declarations of 'ppid' must have identical modifiers.","category":1,"code":2687},{"start":68922,"length":4,"messageText":"All declarations of 'arch' must have identical modifiers.","category":1,"code":2687},{"start":68922,"length":4,"messageText":"Subsequent property declarations must have the same type.  Property 'arch' must be of type 'string', but here has type 'Architecture'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":10861,"length":4,"messageText":"'arch' was also declared here.","category":3,"code":6203}]},{"start":70040,"length":8,"messageText":"All declarations of 'platform' must have identical modifiers.","category":1,"code":2687},{"start":70834,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'memoryUsage' must be of type '() => MemoryUsage', but here has type 'MemoryUsageFn'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":11055,"length":27,"messageText":"'memoryUsage' was also declared here.","category":3,"code":6203}]},{"start":78557,"length":7,"messageText":"All declarations of 'release' must have identical modifiers.","category":1,"code":2687},{"start":86196,"length":6,"messageText":"All declarations of 'report' must have identical modifiers.","category":1,"code":2687},{"start":86196,"length":6,"messageText":"Subsequent property declarations must have the same type.  Property 'report' must be of type 'ProcessReport | undefined', but here has type 'ProcessReport'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/process.d.ts","start":13031,"length":6,"messageText":"'report' was also declared here.","category":3,"code":6203}]}]],[572,[{"start":4152,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2228,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2254,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":4178,"length":4,"messageText":"Cannot redeclare block-scoped variable 'ucs2'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2228,"length":4,"messageText":"'ucs2' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":2254,"length":4,"messageText":"and here.","category":3,"code":6204}]},{"start":5371,"length":7,"messageText":"Cannot redeclare block-scoped variable 'version'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/punycode.d.ts","start":3451,"length":7,"messageText":"'version' was also declared here.","category":3,"code":6203}]}]],[573,[{"start":5526,"length":6,"messageText":"Cannot redeclare block-scoped variable 'encode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/querystring.d.ts","start":953,"length":6,"messageText":"'encode' was also declared here.","category":3,"code":6203}]},{"start":5656,"length":6,"messageText":"Cannot redeclare block-scoped variable 'decode'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/querystring.d.ts","start":1083,"length":6,"messageText":"'decode' was also declared here.","category":3,"code":6203}]}]],[574,[{"start":1279,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1394,"length":8,"messageText":"Duplicate identifier 'promises'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline.d.ts","start":1394,"length":8,"messageText":"'promises' was also declared here.","category":3,"code":6203}]},{"start":2180,"length":9,"messageText":"Duplicate identifier 'Interface'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":294,"length":9,"messageText":"'Interface' was also declared here.","category":3,"code":6203}]},{"start":10607,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10685,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10750,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10827,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10892,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":10958,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11025,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11091,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11158,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11658,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11727,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11783,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11851,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11907,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":11964,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12022,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12079,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12137,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12212,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12283,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12341,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12411,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12469,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12528,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12588,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12647,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12707,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12784,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12866,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":12935,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13016,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13085,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13155,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13226,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13296,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13367,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13455,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13541,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13614,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13699,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13772,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13846,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13921,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":13995,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14070,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'Interface' is not assignable to the same property in base type 'EventEmitter'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: string, listener: (...args: any[]) => void): this; (event: \"close\", listener: () => void): this; (event: \"line\", listener: (input: string) => void): this; (event: \"pause\", listener: () => void): this; (event: \"resume\", listener: () => void): this; (event: \"SIGCONT\", listener: () => void): this; (event: \"SI...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type 'string'.","category":1,"code":2322,"next":[{"messageText":"Type 'symbol' is not assignable to type 'string'.","category":1,"code":2322}]}]}]}]}]}},{"start":14240,"length":8,"messageText":"Duplicate identifier 'ReadLine'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5600,"length":8,"messageText":"'ReadLine' was also declared here.","category":3,"code":6203}]},{"start":14324,"length":9,"messageText":"Duplicate identifier 'Completer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5678,"length":9,"messageText":"'Completer' was also declared here.","category":3,"code":6203}]},{"start":14387,"length":14,"messageText":"Duplicate identifier 'AsyncCompleter'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5734,"length":14,"messageText":"'AsyncCompleter' was also declared here.","category":3,"code":6203}]},{"start":14533,"length":15,"messageText":"Duplicate identifier 'CompleterResult'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":5850,"length":15,"messageText":"'CompleterResult' was also declared here.","category":3,"code":6203}]},{"start":23330,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/readline.d.ts","start":6758,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203}]}]],[575,[{"start":93,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":712,"length":9,"messageText":"Duplicate identifier 'Interface'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline/promises.d.ts","start":665,"length":9,"messageText":"'Interface' was also declared here.","category":3,"code":6203}]},{"start":2436,"length":8,"messageText":"Duplicate identifier 'Readline'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/readline/promises.d.ts","start":2389,"length":8,"messageText":"'Readline' was also declared here.","category":3,"code":6203}]}]],[576,[{"start":328,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: REPLEval, REPLWriter, writer, REPLCommandAction, REPLServer, REPL_MODE_SLOPPY, REPL_MODE_STRICT, Recoverable","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/repl.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":4087,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'replMode' must be of type 'unique symbol | unique symbol | undefined', but here has type 'unique symbol | unique symbol | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/repl.d.ts","start":3753,"length":8,"messageText":"'replMode' was also declared here.","category":3,"code":6203}]}]],[577,[{"start":4630,"length":8,"messageText":"Duplicate identifier 'AssetKey'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sea.d.ts","start":4630,"length":8,"messageText":"'AssetKey' was also declared here.","category":3,"code":6203}]}]],[578,[{"start":1931,"length":12,"messageText":"Duplicate identifier 'DatabaseSync'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sqlite.d.ts","start":1931,"length":12,"messageText":"'DatabaseSync' was also declared here.","category":3,"code":6203}]},{"start":3979,"length":18,"messageText":"Duplicate identifier 'SupportedValueType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sqlite.d.ts","start":3979,"length":18,"messageText":"'SupportedValueType' was also declared here.","category":3,"code":6203}]},{"start":5645,"length":13,"messageText":"Duplicate identifier 'StatementSync'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/sqlite.d.ts","start":5645,"length":13,"messageText":"'StatementSync' was also declared here.","category":3,"code":6203}]}]],[579,[{"start":1022,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":50009,"length":54,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"encoding\" | \"highWaterMark\" | \"objectMode\"' does not satisfy the constraint 'keyof ReadableOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof ReadableOptions'.","category":1,"code":2322}]}},{"start":51496,"length":59,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"highWaterMark\" | \"objectMode\" | \"decodeStrings\"' does not satisfy the constraint 'keyof WritableOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof WritableOptions'.","category":1,"code":2322}]}},{"start":57781,"length":90,"code":2344,"category":1,"messageText":{"messageText":"Type '\"signal\" | \"encoding\" | \"allowHalfOpen\" | \"highWaterMark\" | \"objectMode\" | \"decodeStrings\"' does not satisfy the constraint 'keyof DuplexOptions'.","category":1,"code":2344,"next":[{"messageText":"Type '\"signal\"' is not assignable to type 'keyof DuplexOptions'.","category":1,"code":2322}]}},{"start":84360,"length":8,"messageText":"Duplicate identifier 'internal'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/stream.d.ts","start":26881,"length":8,"messageText":"'internal' was also declared here.","category":3,"code":6203}]},{"start":84455,"length":6,"messageText":"Duplicate identifier 'stream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/stream.d.ts","start":26976,"length":6,"messageText":"'stream' was also declared here.","category":3,"code":6203}]}]],[580,[{"start":101,"length":19,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineDestination'.","category":1,"code":2305},{"start":130,"length":15,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineOptions'.","category":1,"code":2305},{"start":155,"length":15,"messageText":"Module '\"node:stream\"' has no exported member 'PipelinePromise'.","category":1,"code":2305},{"start":180,"length":14,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineSource'.","category":1,"code":2305},{"start":204,"length":17,"messageText":"Module '\"node:stream\"' has no exported member 'PipelineTransform'.","category":1,"code":2305}]],[582,[{"start":0,"length":4,"messageText":"Definitions of the following identifiers conflict with those in another file: _ByteLengthQueuingStrategy, _CompressionStream, _CountQueuingStrategy, _DecompressionStream, _ReadableByteStreamController, _ReadableStream, _ReadableStreamBYOBReader, _ReadableStreamBYOBRequest, _ReadableStreamDefaultController, _ReadableStreamDefaultReader, _TextDecoderStream, _TextEncoderStream, _TransformStream, _TransformStreamDefaultController, _WritableStream, _WritableStreamDefaultController, _WritableStreamDefaultWriter, ReadableStreamController, ReadableStreamReadResult, ReadableStream, ReadableStreamReaderMode, ReadableStreamReader, ReadableStreamDefaultReader, ReadableStreamBYOBReader, ReadableStreamBYOBRequest, ReadableByteStreamController, ReadableStreamDefaultController, TransformStream, TransformStreamDefaultController, WritableStream, WritableStreamDefaultWriter, WritableStreamDefaultController, ByteLengthQueuingStrategy, CountQueuingStrategy, TextEncoderStream, BufferSource, TextDecoderStream, CompressionStream, DecompressionStream","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/stream/web.d.ts","start":0,"length":4,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[583,[{"start":1533,"length":13,"messageText":"Duplicate identifier 'StringDecoder'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/string_decoder.d.ts","start":44,"length":13,"messageText":"'StringDecoder' was also declared here.","category":3,"code":6203}]}]],[584,[{"start":2700,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: after, afterEach, before, beforeEach, describe, it, Mock, mock, only, run, skip, snapshot, suite, SuiteContext, test, default, TestContext, todo, dot, junit, lcov, spec, tap, TestEvent","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/test.d.ts","start":2700,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":18881,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":18972,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19063,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19152,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19247,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19336,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19419,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19502,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19585,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19670,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19757,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19844,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":19922,"length":11,"code":2416,"category":1,"messageText":{"messageText":"Property 'addListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20814,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20896,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":20978,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21058,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21144,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21224,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21298,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21372,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21446,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21522,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21600,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21678,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21747,"length":2,"code":2416,"category":1,"messageText":{"messageText":"Property 'on' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21816,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21900,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":21984,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22066,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22154,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22236,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22312,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22388,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22464,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22542,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22622,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22702,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22773,"length":4,"code":2416,"category":1,"messageText":{"messageText":"Property 'once' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22844,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":22939,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23034,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23127,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23226,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23319,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23406,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23493,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23580,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23669,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23760,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23851,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":23933,"length":15,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24015,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24114,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24213,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24310,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24413,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24510,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24601,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24692,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24783,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24876,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":24971,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":25066,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":25152,"length":19,"code":2416,"category":1,"messageText":{"messageText":"Property 'prependOnceListener' in type 'TestsStream' is not assignable to the same property in base type 'ReadableStream'.","category":1,"code":2416,"next":[{"messageText":"Type '{ (event: \"test:coverage\", listener: (data: TestCoverage) => void): this; (event: \"test:complete\", listener: (data: TestComplete) => void): this; (event: \"test:dequeue\", listener: (data: TestDequeue) => void): this; (event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this; (event: \"test:enqueue\", l...' is not assignable to type '{ (event: string | symbol, listener: (...args: any[]) => void): this; <K>(eventName: Key<K, T>, listener: Listener<K, T, (...args: any[]) => void>): this; <K>(eventName: Key<...>, listener: Listener<...>): this; }'.","category":1,"code":2322,"next":[{"messageText":"Types of parameters 'event' and 'eventName' are incompatible.","category":1,"code":2328,"next":[{"messageText":"Type 'Key<any, T>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string | symbol | Key<any, Record<keyof T, any[]>>' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322,"next":[{"messageText":"Type 'string' is not assignable to type '\"test:coverage\"'.","category":1,"code":2322}]}]}]}]}]}},{"start":76563,"length":7,"messageText":"Subsequent property declarations must have the same type.  Property 'summary' must be of type '{ files: { path: string; totalLineCount: number; totalBranchCount: number; totalFunctionCount: number; coveredLineCount: number; coveredBranchCount: number; coveredFunctionCount: number; ... 5 more ...; lines: { ...; }[]; }[]; totals: { ...; }; workingDirectory: string; }', but here has type '{ files: { path: string; totalLineCount: number; totalBranchCount: number; totalFunctionCount: number; coveredLineCount: number; coveredBranchCount: number; coveredFunctionCount: number; ... 5 more ...; lines: { ...; }[]; }[]; thresholds: { ...; }; totals: { ...; }; workingDirectory: string; }'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/test.d.ts","start":75946,"length":7,"messageText":"'summary' was also declared here.","category":3,"code":6203}]}]],[585,[{"start":636,"length":9,"messageText":"Module '\"node:events\"' has no exported member 'Abortable'.","category":1,"code":2305},{"start":1128,"length":10,"messageText":"Cannot redeclare block-scoped variable 'setTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":39,"length":10,"messageText":"'setTimeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":146,"length":10,"messageText":"and here.","category":3,"code":6204}]},{"start":1174,"length":12,"messageText":"Cannot redeclare block-scoped variable 'clearTimeout'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":306,"length":12,"messageText":"'clearTimeout' was also declared here.","category":3,"code":6203}]},{"start":1224,"length":11,"messageText":"Cannot redeclare block-scoped variable 'setInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":396,"length":11,"messageText":"'setInterval' was also declared here.","category":3,"code":6203}]},{"start":1272,"length":13,"messageText":"Cannot redeclare block-scoped variable 'clearInterval'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":503,"length":13,"messageText":"'clearInterval' was also declared here.","category":3,"code":6203}]},{"start":1324,"length":12,"messageText":"Cannot redeclare block-scoped variable 'setImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":595,"length":12,"messageText":"'setImmediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":693,"length":12,"messageText":"and here.","category":3,"code":6204}]},{"start":1374,"length":14,"messageText":"Cannot redeclare block-scoped variable 'clearImmediate'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/timers.d.ts","start":833,"length":14,"messageText":"'clearImmediate' was also declared here.","category":3,"code":6203}]},{"start":2289,"length":9,"messageText":"Duplicate identifier 'Immediate'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":25985,"length":9,"messageText":"'Immediate' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":2289,"length":9,"messageText":"and here.","category":3,"code":6204}]},{"start":4621,"length":7,"messageText":"Duplicate identifier 'Timeout'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":26140,"length":7,"messageText":"'Timeout' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":4621,"length":7,"messageText":"and here.","category":3,"code":6204}]},{"start":8300,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1627,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1682,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2184,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2229,"length":13,"messageText":"and here.","category":3,"code":6204}]},{"start":9965,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers.d.ts","start":9965,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203}]},{"start":11801,"length":13,"messageText":"Cannot redeclare block-scoped variable '__promisify__'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1627,"length":13,"messageText":"'__promisify__' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":1682,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2184,"length":13,"messageText":"and here.","category":3,"code":6204},{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/globals.d.ts","start":2229,"length":13,"messageText":"and here.","category":3,"code":6204}]}]],[586,[{"start":2842,"length":4,"messageText":"Subsequent property declarations must have the same type.  Property 'wait' must be of type '(delay?: number | undefined, options?: Pick<TimerOptions, \"signal\"> | undefined) => Promise<void>', but here has type '(delay?: number | undefined, options?: TimerOptions | undefined) => Promise<void>'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers/promises.d.ts","start":2842,"length":4,"messageText":"'wait' was also declared here.","category":3,"code":6203}]},{"start":3394,"length":9,"messageText":"Cannot redeclare block-scoped variable 'scheduler'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/timers/promises.d.ts","start":3410,"length":9,"messageText":"'scheduler' was also declared here.","category":3,"code":6203}]}]],[587,[{"start":332,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: CLIENT_RENEG_LIMIT, CLIENT_RENEG_WINDOW, TLSSocket, Server, SecureVersion, DEFAULT_ECDH_CURVE, DEFAULT_MAX_VERSION, DEFAULT_MIN_VERSION, rootCertificates","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":2444,"length":13,"messageText":"All declarations of 'ext_key_usage' must have identical modifiers.","category":1,"code":2687},{"start":2444,"length":13,"messageText":"Subsequent property declarations must have the same type.  Property 'ext_key_usage' must be of type 'string[]', but here has type 'string[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":954,"length":13,"messageText":"'ext_key_usage' was also declared here.","category":3,"code":6203}]},{"start":2619,"length":14,"messageText":"All declarations of 'subjectaltname' must have identical modifiers.","category":1,"code":2687},{"start":2619,"length":14,"messageText":"Subsequent property declarations must have the same type.  Property 'subjectaltname' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":713,"length":14,"messageText":"'subjectaltname' was also declared here.","category":3,"code":6203}]},{"start":2748,"length":10,"messageText":"All declarations of 'infoAccess' must have identical modifiers.","category":1,"code":2687},{"start":2748,"length":10,"messageText":"Subsequent property declarations must have the same type.  Property 'infoAccess' must be of type 'Dict<string[]>', but here has type 'Dict<string[]> | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":745,"length":10,"messageText":"'infoAccess' was also declared here.","category":3,"code":6203}]},{"start":3036,"length":8,"messageText":"All declarations of 'exponent' must have identical modifiers.","category":1,"code":2687},{"start":3036,"length":8,"messageText":"Subsequent property declarations must have the same type.  Property 'exponent' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":813,"length":8,"messageText":"'exponent' was also declared here.","category":3,"code":6203}]},{"start":3140,"length":7,"messageText":"All declarations of 'modulus' must have identical modifiers.","category":1,"code":2687},{"start":3140,"length":7,"messageText":"Subsequent property declarations must have the same type.  Property 'modulus' must be of type 'string', but here has type 'string | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":788,"length":7,"messageText":"'modulus' was also declared here.","category":3,"code":6203}]},{"start":22802,"length":11,"messageText":"Subsequent property declarations must have the same type.  Property 'SNICallback' must be of type '((servername: string, cb: (err: Error | null, ctx: SecureContext) => void) => void) | undefined', but here has type '((servername: string, cb: (err: Error | null, ctx?: SecureContext | undefined) => void) => void) | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":16094,"length":11,"messageText":"'SNICallback' was also declared here.","category":3,"code":6203}]},{"start":40943,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'key' must be of type 'string | Buffer | (Buffer | KeyObject)[] | undefined', but here has type 'string | Buffer | (string | Buffer | KeyObject)[] | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tls.d.ts","start":32026,"length":3,"messageText":"'key' was also declared here.","category":3,"code":6203}]},{"start":57049,"length":15,"messageText":"Cannot redeclare block-scoped variable 'DEFAULT_CIPHERS'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/tls.d.ts","start":56818,"length":15,"messageText":"'DEFAULT_CIPHERS' was also declared here.","category":3,"code":6203}]}]],[589,[{"start":1720,"length":10,"messageText":"Duplicate identifier 'ReadStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":108,"length":10,"messageText":"'ReadStream' was also declared here.","category":3,"code":6203}]},{"start":3286,"length":9,"messageText":"Duplicate identifier 'Direction'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":431,"length":9,"messageText":"'Direction' was also declared here.","category":3,"code":6203}]},{"start":3609,"length":11,"messageText":"Duplicate identifier 'WriteStream'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/tty.d.ts","start":465,"length":11,"messageText":"'WriteStream' was also declared here.","category":3,"code":6203}]}]],[590,[{"start":19317,"length":3,"messageText":"Duplicate identifier 'URL'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/url.d.ts","start":3993,"length":3,"messageText":"'URL' was also declared here.","category":3,"code":6203}]},{"start":36113,"length":15,"messageText":"Duplicate identifier 'URLSearchParams'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/url.d.ts","start":4450,"length":15,"messageText":"'URLSearchParams' was also declared here.","category":3,"code":6203}]}]],[591,[{"start":303,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: colors, styles, defaultOptions, replDefaults, custom, Style, CustomInspectFunction, DebugLoggerFunction, debug, CustomPromisify, TextDecoder, types, TextEncoder","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/util.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":63411,"length":8,"messageText":"Duplicate identifier 'MIMEType'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/util.d.ts","start":61031,"length":8,"messageText":"'MIMEType' was also declared here.","category":3,"code":6203}]},{"start":66209,"length":10,"messageText":"Duplicate identifier 'MIMEParams'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/util.d.ts","start":63829,"length":10,"messageText":"'MIMEParams' was also declared here.","category":3,"code":6203}]}]],[592,[{"start":674,"length":20,"messageText":"Duplicate identifier 'DoesZapCodeSpaceFlag'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":375,"length":20,"messageText":"'DoesZapCodeSpaceFlag' was also declared here.","category":3,"code":6203}]},{"start":13713,"length":10,"messageText":"Duplicate identifier 'Serializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":2550,"length":10,"messageText":"'Serializer' was also declared here.","category":3,"code":6203}]},{"start":15956,"length":17,"messageText":"Duplicate identifier 'DefaultSerializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":4361,"length":17,"messageText":"'DefaultSerializer' was also declared here.","category":3,"code":6203}]},{"start":16043,"length":12,"messageText":"Duplicate identifier 'Deserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":4417,"length":12,"messageText":"'Deserializer' was also declared here.","category":3,"code":6203}]},{"start":18330,"length":19,"messageText":"Duplicate identifier 'DefaultDeserializer'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/v8.d.ts","start":6414,"length":19,"messageText":"'DefaultDeserializer' was also declared here.","category":3,"code":6203}]},{"start":20553,"length":10,"messageText":"Duplicate identifier 'GCProfiler'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":20553,"length":10,"messageText":"'GCProfiler' was also declared here.","category":3,"code":6203}]},{"start":29492,"length":12,"messageText":"Cannot redeclare block-scoped variable 'promiseHooks'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":29492,"length":12,"messageText":"'promiseHooks' was also declared here.","category":3,"code":6203}]},{"start":29529,"length":25,"messageText":"Duplicate identifier 'StartupSnapshotCallbackFn'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":29529,"length":25,"messageText":"'StartupSnapshotCallbackFn' was also declared here.","category":3,"code":6203}]},{"start":34678,"length":15,"messageText":"Cannot redeclare block-scoped variable 'startupSnapshot'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/v8.d.ts","start":34678,"length":15,"messageText":"'startupSnapshot' was also declared here.","category":3,"code":6203}]}]],[593,[{"start":1285,"length":16,"messageText":"Module '\"node:module\"' has no exported member 'ImportAttributes'.","category":1,"code":2305},{"start":2097,"length":10,"messageText":"Subsequent property declarations must have the same type.  Property 'cachedData' must be of type 'Buffer | undefined', but here has type 'Buffer | ArrayBufferView | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":803,"length":10,"messageText":"'cachedData' was also declared here.","category":3,"code":6203}]},{"start":7481,"length":17,"messageText":"Duplicate identifier 'MeasureMemoryMode'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":4271,"length":17,"messageText":"'MeasureMemoryMode' was also declared here.","category":3,"code":6203}]},{"start":8093,"length":6,"messageText":"Duplicate identifier 'Script'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/vm.d.ts","start":4661,"length":6,"messageText":"'Script' was also declared here.","category":3,"code":6203}]},{"start":25416,"length":12,"messageText":"Property 'cachedData' does not exist on type 'Script'.","category":1,"code":2339},{"start":25479,"length":20,"messageText":"Property 'cachedDataProduced' does not exist on type 'Script'.","category":1,"code":2339},{"start":27944,"length":12,"messageText":"Duplicate identifier 'ModuleLinker'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":25292,"length":12,"messageText":"'ModuleLinker' was also declared here.","category":3,"code":6203}]},{"start":28137,"length":12,"messageText":"Duplicate identifier 'ModuleStatus'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":25485,"length":12,"messageText":"'ModuleStatus' was also declared here.","category":3,"code":6203}]},{"start":32327,"length":6,"messageText":"Duplicate identifier 'Module'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":29675,"length":6,"messageText":"'Module' was also declared here.","category":3,"code":6203}]},{"start":39347,"length":16,"messageText":"Duplicate identifier 'SourceTextModule'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":36695,"length":16,"messageText":"'SourceTextModule' was also declared here.","category":3,"code":6203}]},{"start":40842,"length":15,"messageText":"Duplicate identifier 'SyntheticModule'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":38190,"length":15,"messageText":"'SyntheticModule' was also declared here.","category":3,"code":6203}]},{"start":42713,"length":31,"messageText":"Cannot redeclare block-scoped variable 'USE_MAIN_CONTEXT_DEFAULT_LOADER'.","category":1,"code":2451,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/vm.d.ts","start":40074,"length":31,"messageText":"'USE_MAIN_CONTEXT_DEFAULT_LOADER' was also declared here.","category":3,"code":6203}]}]],[594,[{"start":5197,"length":4,"messageText":"Duplicate identifier 'WASI'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/wasi.d.ts","start":1736,"length":4,"messageText":"'WASI' was also declared here.","category":3,"code":6203}]}]],[595,[{"start":2151,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: isMainThread, parentPort, resourceLimits, SHARE_ENV, threadId, workerData, MessageChannel, TransferListItem, MessagePort, Worker","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/worker_threads.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]},{"start":13107,"length":3,"messageText":"Subsequent property declarations must have the same type.  Property 'env' must be of type 'Dict<string> | unique symbol | undefined', but here has type 'Dict<string> | unique symbol | undefined'.","category":1,"code":2717,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/worker_threads.d.ts","start":3622,"length":3,"messageText":"'env' was also declared here.","category":3,"code":6203}]},{"start":27254,"length":16,"messageText":"Duplicate identifier 'BroadcastChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":27253,"length":16,"messageText":"'BroadcastChannel' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":28098,"length":16,"messageText":"and here.","category":3,"code":6204}]},{"start":28099,"length":16,"messageText":"Duplicate identifier 'BroadcastChannel'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":27253,"length":16,"messageText":"'BroadcastChannel' was also declared here.","category":3,"code":6203},{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":28098,"length":16,"messageText":"and here.","category":3,"code":6204}]},{"start":32307,"length":12,"messageText":"Duplicate identifier 'Serializable'.","category":1,"code":2300,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@22.7.5/node_modules/@types/node/worker_threads.d.ts","start":32306,"length":12,"messageText":"'Serializable' was also declared here.","category":3,"code":6203}]}]],[596,[{"start":2494,"length":7,"messageText":"Definitions of the following identifiers conflict with those in another file: InputType, CompressCallback, BROTLI_DECODE, BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP, BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1, BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2, BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS, BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1, BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2, BROTLI_DECODER_ERROR_FORMAT_CL_SPACE, BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT, BROTLI_DECODER_ERROR_FORMAT_DICTIONARY, BROTLI_DECODER_ERROR_FORMAT_DISTANCE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE, BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE, BROTLI_DECODER_ERROR_FORMAT_PADDING_1, BROTLI_DECODER_ERROR_FORMAT_PADDING_2, BROTLI_DECODER_ERROR_FORMAT_RESERVED, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET, BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME, BROTLI_DECODER_ERROR_FORMAT_TRANSFORM, BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS, BROTLI_DECODER_ERROR_INVALID_ARGUMENTS, BROTLI_DECODER_ERROR_UNREACHABLE, BROTLI_DECODER_NEEDS_MORE_INPUT, BROTLI_DECODER_NEEDS_MORE_OUTPUT, BROTLI_DECODER_NO_ERROR, BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION, BROTLI_DECODER_PARAM_LARGE_WINDOW, BROTLI_DECODER_RESULT_ERROR, BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT, BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT, BROTLI_DECODER_RESULT_SUCCESS, BROTLI_DECODER_SUCCESS, BROTLI_DEFAULT_MODE, BROTLI_DEFAULT_QUALITY, BROTLI_DEFAULT_WINDOW, BROTLI_ENCODE, BROTLI_LARGE_MAX_WINDOW_BITS, BROTLI_MAX_INPUT_BLOCK_BITS, BROTLI_MAX_QUALITY, BROTLI_MAX_WINDOW_BITS, BROTLI_MIN_INPUT_BLOCK_BITS, BROTLI_MIN_QUALITY, BROTLI_MIN_WINDOW_BITS, BROTLI_MODE_FONT, BROTLI_MODE_GENERIC, BROTLI_MODE_TEXT, BROTLI_OPERATION_EMIT_METADATA, BROTLI_OPERATION_FINISH, BROTLI_OPERATION_FLUSH, BROTLI_OPERATION_PROCESS, BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING, BROTLI_PARAM_LARGE_WINDOW, BROTLI_PARAM_LGBLOCK, BROTLI_PARAM_LGWIN, BROTLI_PARAM_MODE, BROTLI_PARAM_NDIRECT, BROTLI_PARAM_NPOSTFIX, BROTLI_PARAM_QUALITY, BROTLI_PARAM_SIZE_HINT, DEFLATE, DEFLATERAW, GUNZIP, GZIP, INFLATE, INFLATERAW, UNZIP, Z_NO_FLUSH, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH, Z_BLOCK, Z_TREES, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_ERRNO, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR, Z_BUF_ERROR, Z_VERSION_ERROR, Z_NO_COMPRESSION, Z_BEST_SPEED, Z_BEST_COMPRESSION, Z_DEFAULT_COMPRESSION, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY, Z_DEFAULT_WINDOWBITS, Z_MIN_WINDOWBITS, Z_MAX_WINDOWBITS, Z_MIN_CHUNK, Z_MAX_CHUNK, Z_DEFAULT_CHUNK, Z_MIN_MEMLEVEL, Z_MAX_MEMLEVEL, Z_DEFAULT_MEMLEVEL, Z_MIN_LEVEL, Z_MAX_LEVEL, Z_DEFAULT_LEVEL, ZLIB_VERNUM, Z_BINARY, Z_TEXT, Z_ASCII, Z_UNKNOWN, Z_DEFLATED","category":1,"code":6200,"relatedInformation":[{"file":"../node_modules/.pnpm/@types+node@14.18.63/node_modules/@types/node/zlib.d.ts","start":0,"length":7,"messageText":"Conflicts are in this file.","category":3,"code":6201}]}]],[602,[{"start":298,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":328,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":385,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1075,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1137,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1176,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1213,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1273,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1320,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[603,[{"start":159,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":190,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":224,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":459,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":508,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":587,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":673,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":698,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":748,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":795,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":998,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1047,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1129,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1219,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1262,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1293,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1362,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1815,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1898,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1947,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2029,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2075,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[604,[{"start":56,"length":8,"messageText":"Module '\"../../src/types\"' has no exported member 'Transfer'.","category":1,"code":2305},{"start":492,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":626,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":660,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":2125,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2182,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":5076,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":5133,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":7633,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":7692,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":8194,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[605,[{"start":417,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":450,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":502,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":549,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":824,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1358,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1419,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1476,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1531,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1621,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1668,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1918,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":2191,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[607,[{"start":178,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":284,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":326,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":492,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":642,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":696,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":863,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":964,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1018,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1156,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1239,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1354,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1408,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1554,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1637,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1752,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1806,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1933,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2016,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2131,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2185,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":2306,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2376,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2479,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2530,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":2649,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2724,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2823,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2873,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":3010,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":3101,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":3234,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[608,[{"start":182,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":276,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":317,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":419,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[609,[{"start":215,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":321,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":362,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":548,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":592,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":795,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":839,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1000,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1049,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1246,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1286,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1333,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1506,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1556,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1702,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1801,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1950,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":2014,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":2181,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[610,[{"start":46,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":127,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[611,[{"start":350,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}},{"start":518,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":650,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":684,"length":10,"messageText":"Cannot find name 'beforeEach'.","category":1,"code":2304},{"start":995,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1234,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1448,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582}]],[612,[{"start":155,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":261,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":303,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":424,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":470,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":635,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":677,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":724,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":882,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[613,[{"start":182,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":252,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":280,"length":10,"messageText":"Cannot find name 'beforeEach'.","category":1,"code":2304},{"start":399,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":504,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":567,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":681,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":732,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":835,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":900,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1017,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1081,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1178,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1232,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1287,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1374,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1429,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1485,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1618,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304},{"start":1684,"length":6,"messageText":"Cannot find name 'expect'.","category":1,"code":2304}]],[614,[{"start":27,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":1004,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1102,"length":8,"messageText":"Cannot find name 'describe'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582},{"start":1131,"length":10,"messageText":"Cannot find name 'beforeEach'.","category":1,"code":2304},{"start":1333,"length":2,"messageText":"Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i --save-dev @types/jest` or `npm i --save-dev @types/mocha`.","category":1,"code":2582}]],[619,[{"start":55,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[622,[{"start":217,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307},{"start":368,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[624,[{"start":71,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[626,[{"start":36,"length":17,"messageText":"'\"../src\"' has no exported member named 'Order_TimeInForce'. Did you mean 'OrderTimeInForce'?","category":1,"code":2724,"relatedInformation":[{"file":"../src/clients/constants.ts","start":1912,"length":16,"messageText":"'OrderTimeInForce' is declared here.","category":3,"code":2728}]}]],[628,[{"start":34,"length":62,"messageText":"Cannot find module '@klyraprotocol/v4-proto/src/codegen/klyraprotocol/clob/order' or its corresponding type declarations.","category":1,"code":2307}]],[630,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[631,[{"start":120,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[632,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[633,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[634,[{"start":120,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[638,[{"start":17,"length":6,"code":7016,"category":1,"messageText":{"messageText":"Could not find a declaration file for module 'long'. '/Users/solal/Documents/GitHub/stream-chain/v4-client-js/node_modules/.pnpm/long@4.0.0/node_modules/long/src/long.js' implicitly has an 'any' type.","category":1,"code":7016,"next":[{"info":{"moduleReference":"long"}}]}}]],[643,[{"start":6996,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[645,[{"start":5717,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5782,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5847,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5916,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5993,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6094,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6161,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6242,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[646,[{"start":5031,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5128,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6888,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[647,[{"start":6086,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6187,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[649,[{"start":2824,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4325,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[650,[{"start":6254,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7638,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[651,[{"start":2043,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[652,[{"start":11304,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":18170,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[655,[{"start":7976,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[657,[{"start":1575,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[658,[{"start":6813,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10097,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":13394,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[659,[{"start":6314,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7423,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[660,[{"start":2050,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[661,[{"start":2145,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":2224,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[662,[{"start":5634,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8266,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":9560,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10624,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12133,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14558,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[663,[{"start":3936,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4012,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4099,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4186,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5496,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[664,[{"start":19588,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":22925,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28810,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":36391,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":46294,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":47896,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":49566,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[665,[{"start":5472,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7668,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7744,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12660,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12754,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[667,[{"start":3656,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6173,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[668,[{"start":18345,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19553,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23539,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25457,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25591,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28666,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":46202,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":47948,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[671,[{"start":12850,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":16323,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":32291,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":41445,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[673,[{"start":4876,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7889,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8003,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[674,[{"start":7502,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":9774,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[675,[{"start":7866,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10499,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[685,[{"start":1995,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[689,[{"start":12069,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":13565,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":15000,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":16272,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19092,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":20226,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":22192,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25560,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[690,[{"start":10061,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24156,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24332,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24484,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24629,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24764,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24894,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25018,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[691,[{"start":15915,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":15999,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25649,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28655,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31570,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31662,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":34228,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":39046,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[692,[{"start":11695,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14326,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":15715,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":20788,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23567,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[695,[{"start":1532,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[696,[{"start":7671,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[699,[{"start":4860,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7434,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7523,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":9152,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[700,[{"start":1513,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[701,[{"start":9006,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12392,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[704,[{"start":1415,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[706,[{"start":17510,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":21990,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":22406,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":26487,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":27986,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":35607,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":36628,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[707,[{"start":5503,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5577,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5656,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[708,[{"start":17039,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":22929,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":32688,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[709,[{"start":9693,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":9781,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":18383,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":21059,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[710,[{"start":15360,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19230,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":22948,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24401,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[711,[{"start":4169,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4243,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4322,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[712,[{"start":13768,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19658,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":29050,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[713,[{"start":5299,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10827,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":13457,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[715,[{"start":39317,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":40081,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[717,[{"start":4351,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4441,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4688,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4919,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4994,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[718,[{"start":21312,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24572,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28116,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31553,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":37557,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":43897,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":47117,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":50400,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55906,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[719,[{"start":16148,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":19259,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":33969,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":44154,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":44259,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[730,[{"start":2178,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":2254,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":3521,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[731,[{"start":16015,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23762,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[734,[{"start":6538,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":11410,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12816,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12889,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14292,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[735,[{"start":6913,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[736,[{"start":4776,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[738,[{"start":2532,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[739,[{"start":6901,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8175,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[741,[{"start":46779,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51136,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51211,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51282,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51347,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51435,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51525,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":51622,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55458,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55553,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55650,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55738,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55842,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":55947,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":56186,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":56296,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":60798,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":67888,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":68128,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":68246,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":73188,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":82775,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":85193,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":87792,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":89029,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":90761,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":92285,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":93794,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":95584,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":98158,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":101393,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":103953,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":104004,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":104215,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":105433,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":107474,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[742,[{"start":2886,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[745,[{"start":3997,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4089,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7154,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[746,[{"start":10101,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[748,[{"start":2674,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[749,[{"start":7836,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[750,[{"start":5213,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5308,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5396,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5503,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5605,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[752,[{"start":1536,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[753,[{"start":6117,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[755,[{"start":6359,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[756,[{"start":3058,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[758,[{"start":2361,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[759,[{"start":7758,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14843,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[760,[{"start":15055,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":16644,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23421,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23700,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23814,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25387,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31745,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":33366,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":34803,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[761,[{"start":14918,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":17244,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":17325,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":29527,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[764,[{"start":14305,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[767,[{"start":6102,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6189,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6282,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10981,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":13081,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[768,[{"start":5069,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8016,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":11252,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[838,[{"start":1447,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[839,[{"start":6456,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[841,[{"start":3944,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[842,[{"start":1657,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[846,[{"start":4552,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4685,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4844,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":4999,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[848,[{"start":2880,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":3000,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[850,[{"start":3132,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[853,[{"start":5406,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5512,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[854,[{"start":5226,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7132,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7257,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[855,[{"start":20088,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":21347,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":24124,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[856,[{"start":9984,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12717,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14915,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[857,[{"start":14838,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14939,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":17258,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[859,[{"start":14261,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":21883,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":23535,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25063,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":25160,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[861,[{"start":5697,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5807,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":5921,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6053,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6163,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6305,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6419,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[866,[{"start":13105,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":16689,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":28210,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":30085,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[867,[{"start":2841,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[868,[{"start":2753,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":6940,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[870,[{"start":1834,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[872,[{"start":2023,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[873,[{"start":9946,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[876,[{"start":1527,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[877,[{"start":6981,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[878,[{"start":2422,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[886,[{"start":36009,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":61566,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":61689,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":87681,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":100676,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[887,[{"start":7879,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12347,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12442,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[890,[{"start":15403,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":16783,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[892,[{"start":2228,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":2322,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[893,[{"start":9395,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":12555,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[894,[{"start":14479,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[896,[{"start":12761,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[897,[{"start":1923,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":2015,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[898,[{"start":9066,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":14659,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[900,[{"start":2803,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[901,[{"start":2414,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[902,[{"start":1634,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[904,[{"start":5943,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":8485,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":10907,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[917,[{"start":3561,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":7804,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[920,[{"start":1527,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[921,[{"start":9798,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[923,[{"start":3974,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[925,[{"start":1546,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[976,[{"start":27501,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006},{"start":31030,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]],[978,[{"start":1795,"length":1,"messageText":"Parameter 'e' implicitly has an 'any' type.","category":1,"code":7006}]]],"version":"5.6.3"}