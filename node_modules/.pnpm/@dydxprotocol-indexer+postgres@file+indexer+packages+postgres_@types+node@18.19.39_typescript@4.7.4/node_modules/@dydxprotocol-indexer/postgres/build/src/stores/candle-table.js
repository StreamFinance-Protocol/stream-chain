"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCandlesMap = exports.findLatest = exports.findById = exports.update = exports.create = exports.findAll = exports.uuid = void 0;
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const uuid_1 = require("../helpers/uuid");
const candle_model_1 = __importDefault(require("../models/candle-model"));
const types_1 = require("../types");
function uuid(startedAt, ticker, resolution) {
    // TODO(IND-483): Fix all uuid string substitutions to use Array.join.
    return (0, uuid_1.getUuid)(Buffer.from(`${startedAt}-${ticker}-${resolution}`, constants_1.BUFFER_ENCODING_UTF_8));
}
exports.uuid = uuid;
/**
 * Find all candles that match the given query config. fromIso is inclusive and toISO is exclusive.
 */
async function findAll({ limit, id, ticker, resolution, fromISO, toISO, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        id,
        ticker,
        resolution,
        fromISO,
        toISO,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(candle_model_1.default, options);
    if (id) {
        baseQuery = baseQuery.whereIn(types_1.CandleColumns.id, id);
    }
    if (ticker) {
        baseQuery = baseQuery.whereIn(types_1.CandleColumns.ticker, ticker);
    }
    if (resolution) {
        baseQuery = baseQuery.where(types_1.CandleColumns.resolution, resolution);
    }
    if (fromISO) {
        baseQuery = baseQuery.where(types_1.CandleColumns.startedAt, '>=', fromISO);
    }
    if (toISO) {
        baseQuery = baseQuery.where(types_1.CandleColumns.startedAt, '<', toISO);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(types_1.CandleColumns.ticker, types_1.Ordering.DESC).orderBy(types_1.CandleColumns.resolution, types_1.Ordering.DESC).orderBy(types_1.CandleColumns.startedAt, types_1.Ordering.DESC);
    }
    if (limit) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(candle, options = { txId: undefined }) {
    return candle_model_1.default.query(transaction_1.default.get(options.txId)).insert({
        id: uuid(candle.startedAt, candle.ticker, candle.resolution),
        ...candle,
    }).returning('*');
}
exports.create = create;
async function update({ id, ...fields }, options = { txId: undefined }) {
    const candle = await candle_model_1.default.query(transaction_1.default.get(options.txId)).findById(id);
    const updatedCandle = await candle.$query().patch(fields).returning('*');
    // The objection types mistakenly think the query returns an array of candles.
    return updatedCandle;
}
exports.update = update;
async function findById(id, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(candle_model_1.default, options);
    return baseQuery
        .findById(id)
        .returning('*');
}
exports.findById = findById;
async function findLatest(ticker, resolution, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const candles = await findAll({
        ticker: [ticker],
        resolution,
        limit: 1,
    }, [types_1.QueryableField.TICKER, types_1.QueryableField.RESOLUTION], {
        ...options,
        // Ordered by 'startedAt' descending, so the most recent candle will be only candle returned
        orderBy: [[types_1.CandleColumns.startedAt, types_1.Ordering.DESC]],
    });
    if (candles.length === 1) {
        return candles[0];
    }
    return undefined;
}
exports.findLatest = findLatest;
async function findCandlesMap(tickers, resolutions, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const candlesMap = {};
    await Promise.all(lodash_1.default.map(tickers, async (ticker) => {
        candlesMap[ticker] = {};
        const findLatestCandles = resolutions.map((resolution) => findLatest(ticker, resolution, options));
        // Map each resolution to its respective candle
        const allLatestCandles = await Promise.all(findLatestCandles);
        lodash_1.default.forEach(allLatestCandles, (candle) => {
            if (candle !== undefined) {
                candlesMap[ticker][candle.resolution] = candle;
            }
        });
    }));
    return candlesMap;
}
exports.findCandlesMap = findCandlesMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuZGxlLXRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0b3Jlcy9jYW5kbGUtdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0RBQXVCO0FBR3ZCLDRDQUErRTtBQUMvRSw4REFBb0Y7QUFDcEYseUVBQWlEO0FBQ2pELDBDQUEwQztBQUMxQywwRUFBaUQ7QUFDakQsb0NBYWtCO0FBRWxCLFNBQWdCLElBQUksQ0FBQyxTQUFvQixFQUFFLE1BQWMsRUFBRSxVQUE0QjtJQUNyRixzRUFBc0U7SUFDdEUsT0FBTyxJQUFBLGNBQU8sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsU0FBUyxJQUFJLE1BQU0sSUFBSSxVQUFVLEVBQUUsRUFBRSxpQ0FBcUIsQ0FBQyxDQUFDLENBQUM7QUFDN0YsQ0FBQztBQUhELG9CQUdDO0FBRUQ7O0dBRUc7QUFDSSxLQUFLLFVBQVUsT0FBTyxDQUMzQixFQUNFLEtBQUssRUFDTCxFQUFFLEVBQ0YsTUFBTSxFQUNOLFVBQVUsRUFDVixPQUFPLEVBQ1AsS0FBSyxHQUNhLEVBQ3BCLGNBQWdDLEVBQ2hDLFVBQW1CLG9DQUF3QjtJQUUzQyxJQUFBLHdDQUF1QixFQUNyQjtRQUNFLEVBQUU7UUFDRixNQUFNO1FBQ04sVUFBVTtRQUNWLE9BQU87UUFDUCxLQUFLO0tBQ1MsRUFDaEIsY0FBYyxDQUNmLENBQUM7SUFFRixJQUFJLFNBQVMsR0FBOEIsSUFBQSwrQkFBYyxFQUN2RCxzQkFBVyxFQUNYLE9BQU8sQ0FDUixDQUFDO0lBRUYsSUFBSSxFQUFFLEVBQUU7UUFDTixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxxQkFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNyRDtJQUVELElBQUksTUFBTSxFQUFFO1FBQ1YsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMscUJBQWEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7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