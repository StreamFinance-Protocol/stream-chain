"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const big_js_1 = __importDefault(require("big.js"));
const v4_proto_parser_1 = require("@dydxprotocol-indexer/v4-proto-parser");
const v4_protos_1 = require("@dydxprotocol-indexer/v4-protos");
const protocol_translations_1 = require("../../src/lib/protocol-translations");
const constants_1 = require("../helpers/constants");
const types_1 = require("../../src/types");
const long_1 = __importDefault(require("long"));
const db_helpers_1 = require("../../src/helpers/db-helpers");
describe('protocolTranslations', () => {
    beforeAll(async () => {
        await (0, db_helpers_1.migrate)();
    });
    afterEach(async () => {
        await (0, db_helpers_1.clearData)();
    });
    afterAll(async () => {
        await (0, db_helpers_1.teardown)();
    });
    const orderIdShortTerm = {
        subaccountId: {
            owner: 'owner',
            number: 0,
        },
        clientId: 1,
        clobPairId: 0,
        orderFlags: v4_proto_parser_1.ORDER_FLAG_SHORT_TERM,
    };
    const orderIdLongTerm = {
        ...orderIdShortTerm,
        orderFlags: v4_proto_parser_1.ORDER_FLAG_LONG_TERM,
    };
    const goodTilBlockOrder = {
        orderId: orderIdShortTerm,
        side: v4_protos_1.IndexerOrder_Side.SIDE_BUY,
        subticks: long_1.default.fromValue(1000000, true),
        quantums: long_1.default.fromValue(1000000, true),
        goodTilBlock: 100,
        timeInForce: v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_UNSPECIFIED,
        reduceOnly: false,
        clientMetadata: 0,
        conditionType: v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED,
        conditionalOrderTriggerSubticks: long_1.default.fromValue(0, true),
    };
    const goodTilBlockTimeOrder = {
        ...goodTilBlockOrder,
        orderId: orderIdLongTerm,
        goodTilBlock: undefined,
        goodTilBlockTime: 1500000000,
    };
    const expectedGoodTilBlockTimeISO = '2017-07-14T02:40:00.000Z';
    describe('getTickSize', () => {
        it('successfully calculates tick size', () => {
            // 100 * 1e-8 * 1e-6 / 10e-10 = 1e-2
            expect((0, protocol_translations_1.getTickSize)(constants_1.defaultPerpetualMarket)).toEqual((0, big_js_1.default)(10).pow(-2).toFixed());
        });
    });
    describe('subticksToPrice', () => {
        it('successfully converts subticks to price', () => {
            const subticks = '100';
            // 100 * 1e-8 * 1e-6 / 1e-10 = .01
            expect((0, protocol_translations_1.subticksToPrice)(subticks, constants_1.defaultPerpetualMarket)).toEqual('0.01');
        });
    });
    describe('priceToSubticks', () => {
        it('successfully converts price to subticks', () => {
            const price = '0.01';
            // .01 * 1e-10 / 1e-6 / 1e-8 = 100
            expect((0, protocol_translations_1.priceToSubticks)(price, constants_1.defaultPerpetualMarket)).toEqual('100');
        });
    });
    describe('getStepSize', () => {
        it('successfully calculates step size', () => {
            // 10 * 1e-10 = 1e-9
            expect((0, protocol_translations_1.getStepSize)(constants_1.defaultPerpetualMarket)).toEqual((0, big_js_1.default)(10).pow(-9).toFixed());
        });
    });
    describe('fundingIndexToHumanFixedString', () => {
        it('successfully gets the human readable form of a funding index value', () => {
            // 1e3 * 1e-6 * 1e-6 / 1e-10 = 1e1
            expect((0, protocol_translations_1.fundingIndexToHumanFixedString)('1000', constants_1.defaultPerpetualMarket)).toEqual((0, big_js_1.default)(10).pow(1).toFixed());
        });
    });
    describe('funding8HourValuePpmTo1HourRate', () => {
        it('successfully gets the human readable form of a funding rate', () => {
            // 8e6 / 1e-6 / 8 = 1e1
            expect((0, protocol_translations_1.funding8HourValuePpmTo1HourRate)(8000000)).toEqual((0, big_js_1.default)(1).toFixed());
        });
    });
    describe('getGoodTilBlock', () => {
        it('gets goodTilBlock for order', () => {
            expect((0, protocol_translations_1.getGoodTilBlock)(goodTilBlockOrder)).toEqual(100);
        });
        it('returns undefined for order without goodTilBlock', () => {
            expect((0, protocol_translations_1.getGoodTilBlock)(goodTilBlockTimeOrder)).toBeUndefined();
        });
    });
    describe('getGoodTilBlockTime', () => {
        it('gets goodTilBlockTime as ISO string for order', () => {
            expect((0, protocol_translations_1.getGoodTilBlockTime)(goodTilBlockTimeOrder)).toEqual(expectedGoodTilBlockTimeISO);
        });
        it('returns undefined for order without goodTilBlockTime', () => {
            expect((0, protocol_translations_1.getGoodTilBlockTime)(goodTilBlockOrder)).toBeUndefined();
        });
    });
    describe('serializedQuantumsToAbsHumanFixedString', () => {
        it.each([
            [-1000000, -5, '10'],
            [-2000000000, -8, '20'],
            [1000000000, -5, '10000'],
            [1000, -1, '100'],
            [-1000000000, 15, '1000000000000000000000000'],
        ])('successfully converts serialized quantums (%d), atomic resolution (%d) to absolute fixed string', (sizeQuantums, atomicResolution, expectedFixedString) => {
            expect((0, protocol_translations_1.serializedQuantumsToAbsHumanFixedString)((0, v4_proto_parser_1.bigIntToBytes)(BigInt(sizeQuantums)), atomicResolution)).toEqual(expectedFixedString);
        });
    });
    describe('protocolOrderTIFToTIF', () => {
        it.each([
            ['FOK', v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_FILL_OR_KILL, types_1.TimeInForce.FOK],
            ['IOC', v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_IOC, types_1.TimeInForce.IOC],
            ['UNSPECIFIED', v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_UNSPECIFIED, types_1.TimeInForce.GTT],
            ['POST_ONLY', v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_POST_ONLY, types_1.TimeInForce.POST_ONLY],
        ])('successfully gets TimeInForce given protocol order TIF: %s', (_name, protocolTIF, expectedTimeInForce) => {
            expect((0, protocol_translations_1.protocolOrderTIFToTIF)(protocolTIF)).toEqual(expectedTimeInForce);
        });
        it('throws error if unrecognized protocolTIF given', () => {
            expect(() => {
                (0, protocol_translations_1.protocolOrderTIFToTIF)(100);
            }).toThrow(new Error('Unexpected TimeInForce from protocol: 100'));
        });
    });
    describe('tifToProtocolOrderTIF', () => {
        it.each([
            ['FOK', types_1.TimeInForce.FOK, v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_FILL_OR_KILL],
            ['IOC', types_1.TimeInForce.IOC, v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_IOC],
            ['GTT', types_1.TimeInForce.GTT, v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_UNSPECIFIED],
            ['POST_ONLY', types_1.TimeInForce.POST_ONLY, v4_protos_1.IndexerOrder_TimeInForce.TIME_IN_FORCE_POST_ONLY],
        ])('successfully gets protocol order TIF given TimeInForce: %s', (_name, timeInForce, expectedProtocolTIF) => {
            expect((0, protocol_translations_1.tifToProtocolOrderTIF)(timeInForce)).toEqual(expectedProtocolTIF);
        });
        it('throws error if unrecognized TimeInForce given', () => {
            expect(() => {
                (0, protocol_translations_1.tifToProtocolOrderTIF)('INVALID');
            }).toThrow(new Error('Unexpected TimeInForce: INVALID'));
        });
    });
    describe('protocolConditionTypeToOrderType', () => {
        it.each([
            ['UNSPECIFIED', v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED, types_1.OrderType.LIMIT],
            ['UNRECOGNIZED', v4_protos_1.IndexerOrder_ConditionType.UNRECOGNIZED, types_1.OrderType.LIMIT],
            ['STOP_LOSS', v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_STOP_LOSS, types_1.OrderType.STOP_LIMIT],
            ['TAKE_PROFIT', v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_TAKE_PROFIT, types_1.OrderType.TAKE_PROFIT],
        ])('successfully gets order type given protocol condition type: %s', (_name, conditionType, orderType) => {
            expect((0, protocol_translations_1.protocolConditionTypeToOrderType)(conditionType)).toEqual(orderType);
        });
        it('throws error if unrecognized ConditionType given', () => {
            expect(() => {
                (0, protocol_translations_1.protocolConditionTypeToOrderType)(100);
            }).toThrow(new Error('Unexpected ConditionType: 100'));
        });
    });
    describe('orderTypeToProtocolConditionType', () => {
        it.each([
            ['LIMIT', types_1.OrderType.LIMIT, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED],
            ['HARD_TRADE', types_1.OrderType.HARD_TRADE, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED],
            [
                'FAILED_HARD_TRADE',
                types_1.OrderType.FAILED_HARD_TRADE,
                v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED,
            ],
            ['MARKET', types_1.OrderType.MARKET, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED],
            [
                'TRAILING_STOP',
                types_1.OrderType.TRAILING_STOP,
                v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_UNSPECIFIED,
            ],
            ['STOP_LIMIT', types_1.OrderType.STOP_LIMIT, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_STOP_LOSS],
            ['STOP_MARKET', types_1.OrderType.STOP_MARKET, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_STOP_LOSS],
            ['TAKE_PROFIT', types_1.OrderType.TAKE_PROFIT, v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_TAKE_PROFIT],
            [
                'TAKE_PROFIT_MARKET',
                types_1.OrderType.TAKE_PROFIT_MARKET,
                v4_protos_1.IndexerOrder_ConditionType.CONDITION_TYPE_TAKE_PROFIT,
            ],
        ])('successfully gets order type given protocol condition type: %s', (_name, orderType, conditionType) => {
            expect((0, protocol_translations_1.orderTypeToProtocolConditionType)(orderType)).toEqual(conditionType);
        });
        it('throws error if unrecognized OrderType given', () => {
            expect(() => {
                (0, protocol_translations_1.orderTypeToProtocolConditionType)('INVALID');
            }).toThrow(new Error('Unexpected OrderType: INVALID'));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,