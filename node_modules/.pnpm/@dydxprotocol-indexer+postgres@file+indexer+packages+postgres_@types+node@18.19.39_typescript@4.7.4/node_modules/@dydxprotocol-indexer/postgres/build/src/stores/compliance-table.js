"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkUpsert = exports.findByAddressAndProvider = exports.upsert = exports.update = exports.create = exports.findAll = void 0;
const lodash_1 = __importDefault(require("lodash"));
const constants_1 = require("../constants");
const knex_1 = require("../helpers/knex");
const stores_helpers_1 = require("../helpers/stores-helpers");
const transaction_1 = __importDefault(require("../helpers/transaction"));
const compliance_data_model_1 = __importDefault(require("../models/compliance-data-model"));
const types_1 = require("../types");
const compliance_data_types_1 = require("../types/compliance-data-types");
async function findAll({ address, updatedBeforeOrAt, provider, blocked, limit, }, requiredFields, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    (0, stores_helpers_1.verifyAllRequiredFields)({
        address,
        updatedBeforeOrAt,
        provider,
        blocked,
        limit,
    }, requiredFields);
    let baseQuery = (0, stores_helpers_1.setupBaseQuery)(compliance_data_model_1.default, options);
    if (address !== undefined) {
        baseQuery = baseQuery.whereIn(compliance_data_types_1.ComplianceDataColumns.address, address);
    }
    if (updatedBeforeOrAt !== undefined) {
        baseQuery = baseQuery.where(compliance_data_types_1.ComplianceDataColumns.updatedAt, '<=', updatedBeforeOrAt);
    }
    if (provider !== undefined) {
        baseQuery = baseQuery.where(compliance_data_types_1.ComplianceDataColumns.provider, provider);
    }
    if (blocked !== undefined) {
        baseQuery = baseQuery.where(compliance_data_types_1.ComplianceDataColumns.blocked, blocked);
    }
    if (options.orderBy !== undefined) {
        for (const [column, order] of options.orderBy) {
            baseQuery = baseQuery.orderBy(column, order);
        }
    }
    else {
        baseQuery = baseQuery.orderBy(compliance_data_types_1.ComplianceDataColumns.updatedAt, types_1.Ordering.ASC);
    }
    if (limit !== undefined) {
        baseQuery = baseQuery.limit(limit);
    }
    return baseQuery.returning('*');
}
exports.findAll = findAll;
async function create(complianceDataToCreate, options = { txId: undefined }) {
    return compliance_data_model_1.default.query(transaction_1.default.get(options.txId)).insert(complianceDataToCreate).returning('*');
}
exports.create = create;
async function update({ address, provider, ...fields }, options = { txId: undefined }) {
    const complianceData = await compliance_data_model_1.default.query(transaction_1.default.get(options.txId)).findById([address, provider]);
    const updatedComplianceData = await complianceData
        .$query()
        .patch(fields)
        .returning('*');
    // The objection types mistakenly think the query returns an array of ComplianceData.
    return updatedComplianceData;
}
exports.update = update;
async function upsert(complianceDataToUpsert, options = { txId: undefined }) {
    const complianceData = await findByAddressAndProvider(complianceDataToUpsert.address, complianceDataToUpsert.provider);
    if (complianceData === undefined) {
        return create({
            ...complianceDataToUpsert,
        }, options);
    }
    const updatedComplianceData = await update({
        ...complianceDataToUpsert,
    }, options);
    if (updatedComplianceData === undefined) {
        throw Error('order must exist after update');
    }
    return updatedComplianceData;
}
exports.upsert = upsert;
async function findByAddressAndProvider(address, provider, options = constants_1.DEFAULT_POSTGRES_OPTIONS) {
    const baseQuery = (0, stores_helpers_1.setupBaseQuery)(compliance_data_model_1.default, options);
    return baseQuery
        .findById([address, provider])
        .returning('*');
}
exports.findByAddressAndProvider = findByAddressAndProvider;
async function bulkUpsert(complianceObjects, options = { txId: undefined }) {
    if (complianceObjects.length === 0) {
        return;
    }
    complianceObjects.forEach((complianceObject) => (0, stores_helpers_1.verifyAllInjectableVariables)(Object.values(complianceObject)));
    const columns = lodash_1.default.keys(complianceObjects[0]);
    const rows = (0, stores_helpers_1.setBulkRowsForUpdate)({
        objectArray: complianceObjects,
        columns,
        booleanColumns: [
            compliance_data_types_1.ComplianceDataColumns.blocked,
        ],
        numericColumns: [
            compliance_data_types_1.ComplianceDataColumns.riskScore,
        ],
        stringColumns: [
            compliance_data_types_1.ComplianceDataColumns.address,
            compliance_data_types_1.ComplianceDataColumns.chain,
            compliance_data_types_1.ComplianceDataColumns.provider,
        ],
        timestampColumns: [
            compliance_data_types_1.ComplianceDataColumns.updatedAt,
        ],
    });
    const query = (0, stores_helpers_1.generateBulkUpsertString)({
        table: compliance_data_model_1.default.tableName,
        objectRows: rows,
        columns,
        uniqueIdentifiers: [compliance_data_types_1.ComplianceDataColumns.address, compliance_data_types_1.ComplianceDataColumns.provider],
    });
    const transaction = transaction_1.default.get(options.txId);
    return transaction
        ? knex_1.knexPrimary.raw(query).transacting(transaction)
        : knex_1.knexPrimary.raw(query);
}
exports.bulkUpsert = bulkUpsert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGxpYW5jZS10YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdG9yZXMvY29tcGxpYW5jZS10YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxvREFBdUI7QUFHdkIsNENBQXdEO0FBQ3hELDBDQUE4QztBQUM5Qyw4REFNbUM7QUFDbkMseUVBQWlEO0FBQ2pELDRGQUFrRTtBQUNsRSxvQ0FPa0I7QUFDbEIsMEVBSXdDO0FBRWpDLEtBQUssVUFBVSxPQUFPLENBQzNCLEVBQ0UsT0FBTyxFQUNQLGlCQUFpQixFQUNqQixRQUFRLEVBQ1IsT0FBTyxFQUNQLEtBQUssR0FDcUIsRUFDNUIsY0FBZ0MsRUFDaEMsVUFBbUIsb0NBQXdCO0lBRTNDLElBQUEsd0NBQXVCLEVBQ3JCO1FBQ0UsT0FBTztRQUNQLGlCQUFpQjtRQUNqQixRQUFRO1FBQ1IsT0FBTztRQUNQLEtBQUs7S0FDUyxFQUNoQixjQUFjLENBQ2YsQ0FBQztJQUVGLElBQUksU0FBUyxHQUFzQyxJQUFBLCtCQUFjLEVBQy9ELCtCQUFtQixFQUNuQixPQUFPLENBQ1IsQ0FBQztJQUVGLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtRQUN6QixTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyw2Q0FBcUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdkU7SUFFRCxJQUFJLGlCQUFpQixLQUFLLFNBQVMsRUFBRTtRQUNuQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyw2Q0FBcUIsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7S0FDdkY7SUFFRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7UUFDMUIsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsNkNBQXFCLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZFO0lBRUQsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFF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