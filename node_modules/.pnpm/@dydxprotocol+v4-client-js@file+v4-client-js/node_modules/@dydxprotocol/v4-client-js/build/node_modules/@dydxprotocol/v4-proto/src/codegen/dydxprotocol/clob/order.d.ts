/// <reference types="long" />
import { SubaccountId, SubaccountIdSDKType } from "../subaccounts/subaccount";
import * as _m0 from "protobufjs/minimal";
import { Long } from "../../helpers";
/**
 * Represents the side of the orderbook the order will be placed on.
 * Note that Side.SIDE_UNSPECIFIED is an invalid order and cannot be
 * placed on the orderbook.
 */
export declare enum Order_Side {
    /** SIDE_UNSPECIFIED - Default value. This value is invalid and unused. */
    SIDE_UNSPECIFIED = 0,
    /** SIDE_BUY - SIDE_BUY is used to represent a BUY order. */
    SIDE_BUY = 1,
    /** SIDE_SELL - SIDE_SELL is used to represent a SELL order. */
    SIDE_SELL = 2,
    UNRECOGNIZED = -1
}
export declare const Order_SideSDKType: typeof Order_Side;
export declare function order_SideFromJSON(object: any): Order_Side;
export declare function order_SideToJSON(object: Order_Side): string;
/**
 * TimeInForce indicates how long an order will remain active before it
 * is executed or expires.
 */
export declare enum Order_TimeInForce {
    /**
     * TIME_IN_FORCE_UNSPECIFIED - TIME_IN_FORCE_UNSPECIFIED represents the default behavior where an
     * order will first match with existing orders on the book, and any
     * remaining size will be added to the book as a maker order.
     */
    TIME_IN_FORCE_UNSPECIFIED = 0,
    /**
     * TIME_IN_FORCE_IOC - TIME_IN_FORCE_IOC enforces that an order only be matched with
     * maker orders on the book. If the order has remaining size after
     * matching with existing orders on the book, the remaining size
     * is not placed on the book.
     */
    TIME_IN_FORCE_IOC = 1,
    /**
     * TIME_IN_FORCE_POST_ONLY - TIME_IN_FORCE_POST_ONLY enforces that an order only be placed
     * on the book as a maker order. Note this means that validators will cancel
     * any newly-placed post only orders that would cross with other maker
     * orders.
     */
    TIME_IN_FORCE_POST_ONLY = 2,
    /**
     * TIME_IN_FORCE_FILL_OR_KILL - TIME_IN_FORCE_FILL_OR_KILL enforces that an order will either be filled
     * completely and immediately by maker orders on the book or canceled if the
     * entire amount canâ€˜t be matched.
     */
    TIME_IN_FORCE_FILL_OR_KILL = 3,
    UNRECOGNIZED = -1
}
export declare const Order_TimeInForceSDKType: typeof Order_TimeInForce;
export declare function order_TimeInForceFromJSON(object: any): Order_TimeInForce;
export declare function order_TimeInForceToJSON(object: Order_TimeInForce): string;
export declare enum Order_ConditionType {
    /**
     * CONDITION_TYPE_UNSPECIFIED - CONDITION_TYPE_UNSPECIFIED represents the default behavior where an
     * order will be placed immediately on the orderbook.
     */
    CONDITION_TYPE_UNSPECIFIED = 0,
    /**
     * CONDITION_TYPE_STOP_LOSS - CONDITION_TYPE_STOP_LOSS represents a stop order. A stop order will
     * trigger when the oracle price moves at or above the trigger price for
     * buys, and at or below the trigger price for sells.
     */
    CONDITION_TYPE_STOP_LOSS = 1,
    /**
     * CONDITION_TYPE_TAKE_PROFIT - CONDITION_TYPE_TAKE_PROFIT represents a take profit order. A take profit
     * order will trigger when the oracle price moves at or below the trigger
     * price for buys and at or above the trigger price for sells.
     */
    CONDITION_TYPE_TAKE_PROFIT = 2,
    UNRECOGNIZED = -1
}
export declare const Order_ConditionTypeSDKType: typeof Order_ConditionType;
export declare function order_ConditionTypeFromJSON(object: any): Order_ConditionType;
export declare function order_ConditionTypeToJSON(object: Order_ConditionType): string;
/** OrderId refers to a single order belonging to a Subaccount. */
export interface OrderId {
    /**
     * The subaccount ID that opened this order.
     * Note that this field has `gogoproto.nullable = false` so that it is
     * generated as a value instead of a pointer. This is because the `OrderId`
     * proto is used as a key within maps, and map comparisons will compare
     * pointers for equality (when the desired behavior is to compare the values).
     */
    subaccountId?: SubaccountId;
    /**
     * The client ID of this order, unique with respect to the specific
     * sub account (I.E., the same subaccount can't have two orders with
     * the same ClientId).
     */
    clientId: number;
    /**
     * order_flags represent order flags for the order. This field is invalid if
     * it's greater than 127 (larger than one byte). Each bit in the first byte
     * represents a different flag. Currently only two flags are supported.
     *
     * Starting from the bit after the most MSB (note that the MSB is used in
     * proto varint encoding, and therefore cannot be used): Bit 1 is set if this
     * order is a Long-Term order (0x40, or 64 as a uint8). Bit 2 is set if this
     * order is a Conditional order (0x20, or 32 as a uint8).
     *
     * If neither bit is set, the order is assumed to be a Short-Term order.
     *
     * If both bits are set or bits other than the 2nd and 3rd are set, the order
     * ID is invalid.
     */
    orderFlags: number;
    /** ID of the CLOB the order is created for. */
    clobPairId: number;
}
/** OrderId refers to a single order belonging to a Subaccount. */
export interface OrderIdSDKType {
    subaccount_id?: SubaccountIdSDKType;
    client_id: number;
    order_flags: number;
    clob_pair_id: number;
}
/**
 * OrdersFilledDuringLatestBlock represents a list of `OrderIds` that were
 * filled by any non-zero amount in the latest block.
 */
export interface OrdersFilledDuringLatestBlock {
    /**
     * A list of unique order_ids that were filled by any non-zero amount in the
     * latest block.
     */
    orderIds: OrderId[];
}
/**
 * OrdersFilledDuringLatestBlock represents a list of `OrderIds` that were
 * filled by any non-zero amount in the latest block.
 */
export interface OrdersFilledDuringLatestBlockSDKType {
    order_ids: OrderIdSDKType[];
}
/**
 * PotentiallyPrunableOrders represents a list of orders that may be prunable
 * from state at a future block height.
 */
export interface PotentiallyPrunableOrders {
    /**
     * A list of unique order_ids that may potentially be pruned from state at a
     * future block height.
     */
    orderIds: OrderId[];
}
/**
 * PotentiallyPrunableOrders represents a list of orders that may be prunable
 * from state at a future block height.
 */
export interface PotentiallyPrunableOrdersSDKType {
    order_ids: OrderIdSDKType[];
}
/**
 * OrderFillState represents the fill amount of an order according to on-chain
 * state. This proto includes both the current on-chain fill amount of the
 * order, as well as the block at which this information can be pruned from
 * state.
 */
export interface OrderFillState {
    /** The current fillAmount of the order according to on-chain state. */
    fillAmount: Long;
    /**
     * The block height at which the fillAmount state for this order can be
     * pruned.
     */
    prunableBlockHeight: number;
}
/**
 * OrderFillState represents the fill amount of an order according to on-chain
 * state. This proto includes both the current on-chain fill amount of the
 * order, as well as the block at which this information can be pruned from
 * state.
 */
export interface OrderFillStateSDKType {
    fill_amount: Long;
    prunable_block_height: number;
}
/**
 * StatefulOrderTimeSliceValue represents the type of the value of the
 * `StatefulOrdersTimeSlice` in state. The `StatefulOrdersTimeSlice`
 * in state consists of key/value pairs where the keys are UTF-8-encoded
 * `RFC3339NANO` timestamp strings with right-padded zeroes and no
 * time zone info, and the values are of type `StatefulOrderTimeSliceValue`.
 * This `StatefulOrderTimeSliceValue` in state is used for managing stateful
 * order expiration. Stateful order expirations can be for either long term
 * or conditional orders.
 */
export interface StatefulOrderTimeSliceValue {
    /**
     * A unique list of order_ids that expire at this timestamp, sorted in
     * ascending order by block height and transaction index of each stateful
     * order.
     */
    orderIds: OrderId[];
}
/**
 * StatefulOrderTimeSliceValue represents the type of the value of the
 * `StatefulOrdersTimeSlice` in state. The `StatefulOrdersTimeSlice`
 * in state consists of key/value pairs where the keys are UTF-8-encoded
 * `RFC3339NANO` timestamp strings with right-padded zeroes and no
 * time zone info, and the values are of type `StatefulOrderTimeSliceValue`.
 * This `StatefulOrderTimeSliceValue` in state is used for managing stateful
 * order expiration. Stateful order expirations can be for either long term
 * or conditional orders.
 */
export interface StatefulOrderTimeSliceValueSDKType {
    order_ids: OrderIdSDKType[];
}
/**
 * LongTermOrderPlacement represents the placement of a stateful order in
 * state. It stores the stateful order itself and the `BlockHeight` and
 * `TransactionIndex` at which the order was placed.
 */
export interface LongTermOrderPlacement {
    order?: Order;
    /**
     * The block height and transaction index at which the order was placed.
     * Used for ordering by time priority when the chain is restarted.
     */
    placementIndex?: TransactionOrdering;
}
/**
 * LongTermOrderPlacement represents the placement of a stateful order in
 * state. It stores the stateful order itself and the `BlockHeight` and
 * `TransactionIndex` at which the order was placed.
 */
export interface LongTermOrderPlacementSDKType {
    order?: OrderSDKType;
    placement_index?: TransactionOrderingSDKType;
}
/**
 * ConditionalOrderPlacement represents the placement of a conditional order in
 * state. It stores the stateful order itself, the `BlockHeight` and
 * `TransactionIndex` at which the order was placed and triggered.
 */
export interface ConditionalOrderPlacement {
    order?: Order;
    /** The block height and transaction index at which the order was placed. */
    placementIndex?: TransactionOrdering;
    /**
     * The block height and transaction index at which the order was triggered.
     * Set to be nil if the transaction has not been triggered.
     * Used for ordering by time priority when the chain is restarted.
     */
    triggerIndex?: TransactionOrdering;
}
/**
 * ConditionalOrderPlacement represents the placement of a conditional order in
 * state. It stores the stateful order itself, the `BlockHeight` and
 * `TransactionIndex` at which the order was placed and triggered.
 */
export interface ConditionalOrderPlacementSDKType {
    order?: OrderSDKType;
    placement_index?: TransactionOrderingSDKType;
    trigger_index?: TransactionOrderingSDKType;
}
/**
 * Order represents a single order belonging to a `Subaccount`
 * for a particular `ClobPair`.
 */
export interface Order {
    /** The unique ID of this order. Meant to be unique across all orders. */
    orderId?: OrderId;
    side: Order_Side;
    /**
     * The size of this order in base quantums. Must be a multiple of
     * `ClobPair.StepBaseQuantums` (where `ClobPair.Id = orderId.ClobPairId`).
     */
    quantums: Long;
    /**
     * The price level that this order will be placed at on the orderbook,
     * in subticks. Must be a multiple of ClobPair.SubticksPerTick
     * (where `ClobPair.Id = orderId.ClobPairId`).
     */
    subticks: Long;
    /**
     * The last block this order can be executed at (after which it will be
     * unfillable). Used only for Short-Term orders. If this value is non-zero
     * then the order is assumed to be a Short-Term order.
     */
    goodTilBlock?: number;
    /**
     * good_til_block_time represents the unix timestamp (in seconds) at which a
     * stateful order will be considered expired. The
     * good_til_block_time is always evaluated against the previous block's
     * `BlockTime` instead of the block in which the order is committed. If this
     * value is non-zero then the order is assumed to be a stateful or
     * conditional order.
     */
    goodTilBlockTime?: number;
    /** The time in force of this order. */
    timeInForce: Order_TimeInForce;
    /**
     * Enforces that the order can only reduce the size of an existing position.
     * If a ReduceOnly order would change the side of the existing position,
     * its size is reduced to that of the remaining size of the position.
     * If existing orders on the book with ReduceOnly
     * would already close the position, the least aggressive (out-of-the-money)
     * ReduceOnly orders are resized and canceled first.
     */
    reduceOnly: boolean;
    /**
     * Set of bit flags set arbitrarily by clients and ignored by the protocol.
     * Used by indexer to infer information about a placed order.
     */
    clientMetadata: number;
    conditionType: Order_ConditionType;
    /**
     * conditional_order_trigger_subticks represents the price at which this order
     * will be triggered. If the condition_type is CONDITION_TYPE_UNSPECIFIED,
     * this value is enforced to be 0. If this value is nonzero, condition_type
     * cannot be CONDITION_TYPE_UNSPECIFIED. Value is in subticks.
     * Must be a multiple of ClobPair.SubticksPerTick (where `ClobPair.Id =
     * orderId.ClobPairId`).
     */
    conditionalOrderTriggerSubticks: Long;
}
/**
 * Order represents a single order belonging to a `Subaccount`
 * for a particular `ClobPair`.
 */
export interface OrderSDKType {
    order_id?: OrderIdSDKType;
    side: Order_Side;
    quantums: Long;
    subticks: Long;
    good_til_block?: number;
    good_til_block_time?: number;
    time_in_force: Order_TimeInForce;
    reduce_only: boolean;
    client_metadata: number;
    condition_type: Order_ConditionType;
    conditional_order_trigger_subticks: Long;
}
/**
 * TransactionOrdering represents a unique location in the block where a
 * transaction was placed. This proto includes both block height and the
 * transaction index that the specific transaction was placed. This information
 * is used for ordering by time priority when the chain is restarted.
 */
export interface TransactionOrdering {
    /** Block height in which the transaction was placed. */
    blockHeight: number;
    /** Within the block, the unique transaction index. */
    transactionIndex: number;
}
/**
 * TransactionOrdering represents a unique location in the block where a
 * transaction was placed. This proto includes both block height and the
 * transaction index that the specific transaction was placed. This information
 * is used for ordering by time priority when the chain is restarted.
 */
export interface TransactionOrderingSDKType {
    block_height: number;
    transaction_index: number;
}
export declare const OrderId: {
    encode(message: OrderId, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): OrderId;
    fromPartial(object: {
        subaccountId?: {
            owner?: string | undefined;
            number?: number | undefined;
        } | undefined;
        clientId?: number | undefined;
        orderFlags?: number | undefined;
        clobPairId?: number | undefined;
    }): OrderId;
};
export declare const OrdersFilledDuringLatestBlock: {
    encode(message: OrdersFilledDuringLatestBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): OrdersFilledDuringLatestBlock;
    fromPartial(object: {
        orderIds?: {
            subaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            clientId?: number | undefined;
            orderFlags?: number | undefined;
            clobPairId?: number | undefined;
        }[] | undefined;
    }): OrdersFilledDuringLatestBlock;
};
export declare const PotentiallyPrunableOrders: {
    encode(message: PotentiallyPrunableOrders, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): PotentiallyPrunableOrders;
    fromPartial(object: {
        orderIds?: {
            subaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            clientId?: number | undefined;
            orderFlags?: number | undefined;
            clobPairId?: number | undefined;
        }[] | undefined;
    }): PotentiallyPrunableOrders;
};
export declare const OrderFillState: {
    encode(message: OrderFillState, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): OrderFillState;
    fromPartial(object: {
        fillAmount?: string | number | Long.Long | undefined;
        prunableBlockHeight?: number | undefined;
    }): OrderFillState;
};
export declare const StatefulOrderTimeSliceValue: {
    encode(message: StatefulOrderTimeSliceValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): StatefulOrderTimeSliceValue;
    fromPartial(object: {
        orderIds?: {
            subaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            clientId?: number | undefined;
            orderFlags?: number | undefined;
            clobPairId?: number | undefined;
        }[] | undefined;
    }): StatefulOrderTimeSliceValue;
};
export declare const LongTermOrderPlacement: {
    encode(message: LongTermOrderPlacement, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): LongTermOrderPlacement;
    fromPartial(object: {
        order?: {
            orderId?: {
                subaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                clientId?: number | undefined;
                orderFlags?: number | undefined;
                clobPairId?: number | undefined;
            } | undefined;
            side?: Order_Side | undefined;
            quantums?: string | number | Long.Long | undefined;
            subticks?: string | number | Long.Long | undefined;
            goodTilBlock?: number | undefined;
            goodTilBlockTime?: number | undefined;
            timeInForce?: Order_TimeInForce | undefined;
            reduceOnly?: boolean | undefined;
            clientMetadata?: number | undefined;
            conditionType?: Order_ConditionType | undefined;
            conditionalOrderTriggerSubticks?: string | number | Long.Long | undefined;
        } | undefined;
        placementIndex?: {
            blockHeight?: number | undefined;
            transactionIndex?: number | undefined;
        } | undefined;
    }): LongTermOrderPlacement;
};
export declare const ConditionalOrderPlacement: {
    encode(message: ConditionalOrderPlacement, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): ConditionalOrderPlacement;
    fromPartial(object: {
        order?: {
            orderId?: {
                subaccountId?: {
                    owner?: string | undefined;
                    number?: number | undefined;
                } | undefined;
                clientId?: number | undefined;
                orderFlags?: number | undefined;
                clobPairId?: number | undefined;
            } | undefined;
            side?: Order_Side | undefined;
            quantums?: string | number | Long.Long | undefined;
            subticks?: string | number | Long.Long | undefined;
            goodTilBlock?: number | undefined;
            goodTilBlockTime?: number | undefined;
            timeInForce?: Order_TimeInForce | undefined;
            reduceOnly?: boolean | undefined;
            clientMetadata?: number | undefined;
            conditionType?: Order_ConditionType | undefined;
            conditionalOrderTriggerSubticks?: string | number | Long.Long | undefined;
        } | undefined;
        placementIndex?: {
            blockHeight?: number | undefined;
            transactionIndex?: number | undefined;
        } | undefined;
        triggerIndex?: {
            blockHeight?: number | undefined;
            transactionIndex?: number | undefined;
        } | undefined;
    }): ConditionalOrderPlacement;
};
export declare const Order: {
    encode(message: Order, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): Order;
    fromPartial(object: {
        orderId?: {
            subaccountId?: {
                owner?: string | undefined;
                number?: number | undefined;
            } | undefined;
            clientId?: number | undefined;
            orderFlags?: number | undefined;
            clobPairId?: number | undefined;
        } | undefined;
        side?: Order_Side | undefined;
        quantums?: string | number | Long.Long | undefined;
        subticks?: string | number | Long.Long | undefined;
        goodTilBlock?: number | undefined;
        goodTilBlockTime?: number | undefined;
        timeInForce?: Order_TimeInForce | undefined;
        reduceOnly?: boolean | undefined;
        clientMetadata?: number | undefined;
        conditionType?: Order_ConditionType | undefined;
        conditionalOrderTriggerSubticks?: string | number | Long.Long | undefined;
    }): Order;
};
export declare const TransactionOrdering: {
    encode(message: TransactionOrdering, writer?: _m0.Writer): _m0.Writer;
    decode(input: Uint8Array | _m0.Reader, length?: number | undefined): TransactionOrdering;
    fromPartial(object: {
        blockHeight?: number | undefined;
        transactionIndex?: number | undefined;
    }): TransactionOrdering;
};
